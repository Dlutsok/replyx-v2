name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Запускаем еженедельно в воскресенье в 02:00 UTC
    - cron: '0 2 * * 0'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/dlutsok/replyx2
  ENABLE_CODE_SCANNING_UPLOAD: 'false'

jobs:
  # =============================================================================
  # DEPENDENCY SCANNING
  # =============================================================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (fs mode)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Не валить билд, только отчет

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && env.ENABLE_CODE_SCANNING_UPLOAD == 'true' && hashFiles('trivy-results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload SARIF as artifact (fs scan)
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          name: trivy-fs-scan-sarif
          path: trivy-results.sarif

  # =============================================================================
  # SECRETS SCANNING  
  # =============================================================================
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Полная история для поиска секретов

      - name: Run TruffleHog OSS
        id: trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.before || 'HEAD~1' }}
          head: HEAD
          extra_args: --debug --only-verified

  # =============================================================================
  # DOCKER IMAGE SCANNING (только при наличии образов)
  # =============================================================================
  image-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write
      actions: read
    
    strategy:
      matrix:
        image: [backend, frontend, workers]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.image }}
          load: true
          tags: ${{ env.IMAGE_PREFIX }}-${{ matrix.image }}:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}-${{ matrix.image }}:scan
          format: 'sarif'
          output: 'trivy-${{ matrix.image }}-results.sarif'
          severity: 'CRITICAL,HIGH'
          vuln-type: 'os,library'
          exit-code: '0'  # Не валить билд

      - name: Upload image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && env.ENABLE_CODE_SCANNING_UPLOAD == 'true' && hashFiles(format('trivy-{0}-results.sarif', matrix.image)) != ''
        continue-on-error: true
        with:
          sarif_file: 'trivy-${{ matrix.image }}-results.sarif'

      - name: Upload SARIF as artifact (image scan)
        uses: actions/upload-artifact@v4
        if: always() && hashFiles(format('trivy-{0}-results.sarif', matrix.image)) != ''
        with:
          name: trivy-image-${{ matrix.image }}-sarif
          path: trivy-${{ matrix.image }}-results.sarif

  # =============================================================================
  # CONFIGURATION SCANNING
  # =============================================================================
  config-scan:
    name: Configuration Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy config scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          exit-code: '0'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Run Trivy config scanner on Deployed structure
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'config'
          scan-ref: 'Deployed/'
          format: 'sarif'
          output: 'trivy-deployed-config-results.sarif'
          exit-code: '0'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload config scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && env.ENABLE_CODE_SCANNING_UPLOAD == 'true' && hashFiles('trivy-config-results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: 'trivy-config-results.sarif'

      - name: Upload SARIF as artifact (config scan)
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('trivy-config-results.sarif') != ''
        with:
          name: trivy-config-sarif
          path: trivy-config-results.sarif
      
      - name: Upload deployed config scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && env.ENABLE_CODE_SCANNING_UPLOAD == 'true' && hashFiles('trivy-deployed-config-results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: 'trivy-deployed-config-results.sarif'

      - name: Upload SARIF as artifact (deployed config)
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('trivy-deployed-config-results.sarif') != ''
        with:
          name: trivy-deployed-config-sarif
          path: trivy-deployed-config-results.sarif

  # =============================================================================
  # SECURITY SUMMARY
  # =============================================================================
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, secrets-scan, config-scan]
    if: always()
    
    steps:
      - name: Security scan summary
        run: |
          echo "## 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets | ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration | ${{ needs.config-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Detailed results available in the Security tab." >> $GITHUB_STEP_SUMMARY