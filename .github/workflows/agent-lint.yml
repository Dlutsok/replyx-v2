name: RAD Agent Documentation Lint

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**' 
      - 'docs/**'
      - 'scripts/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docs/**'
      - 'scripts/**'
      - '.github/workflows/**'

jobs:
  documentation-lint:
    runs-on: ubuntu-latest
    name: Documentation Synchronization Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # –ù—É–∂–Ω–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Setup Node.js  
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          
      - name: Install Node.js dependencies
        run: |
          cd backend/workers
          npm install
          
      - name: Run RAD Agent Lint (Warning Mode)
        run: |
          chmod +x scripts/agent-lint.sh
          FAIL_MODE=warn VERBOSE=true scripts/agent-lint.sh
          
      - name: Generate OpenAPI Schema
        run: |
          cd backend
          chmod +x scripts/gen_openapi.sh
          scripts/gen_openapi.sh
          
      - name: Check Documentation Currency
        run: |
          chmod +x scripts/check_docs_currency.py
          python3 scripts/check_docs_currency.py
          
      - name: Validate Critical Structure Changes
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–∞—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
          if git diff --name-only HEAD~1 | grep -E "(backend/workers|backend/api|backend/services)" > /dev/null; then
            echo "üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
            
            # –ñ–µ—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö  
            FAIL_MODE=fail VERBOSE=true scripts/agent-lint.sh
          else
            echo "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
          fi
          
      - name: Archive documentation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation-check-results
          path: |
            docs/api/openapi.json
            scripts/check_docs_currency.py
            
  future-hard-gate:
    runs-on: ubuntu-latest
    name: Future Hard Gate (Currently Disabled)
    if: false  # –í–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 2-3 –¥–Ω—è –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          cd backend  
          pip install -r requirements.txt
          
      - name: Run RAD Agent Lint (Strict Mode)
        run: |
          chmod +x scripts/agent-lint.sh
          FAIL_MODE=fail VERBOSE=true scripts/agent-lint.sh
          
      - name: Validate OpenAPI Schema
        run: |
          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–µ–∂—É—é —Å—Ö–µ–º—É –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
          cd backend
          chmod +x scripts/gen_openapi.sh
          scripts/gen_openapi.sh
          
          if ! cmp -s ../docs/api/openapi.json openapi_generated.json; then
            echo "‚ùå OpenAPI —Å—Ö–µ–º–∞ —É—Å—Ç–∞—Ä–µ–ª–∞! –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:"
            echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd backend && scripts/gen_openapi.sh && cp openapi_generated.json ../docs/api/openapi.json"
            exit 1
          fi
          
      - name: Validate Documentation Completeness
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã
          python3 scripts/extract_all_endpoints.py > endpoints_actual.json
          
          # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
          if ! python3 -c "
          import json
          with open('endpoints_actual.json') as f: actual = set(json.load(f))
          with open('docs/api/endpoints.md') as f: documented = len([l for l in f if l.strip().startswith('###')])
          if len(actual) > documented * 1.2:  # –ü–æ–∑–≤–æ–ª—è–µ–º 20% —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
              print(f'‚ùå –ù–∞–π–¥–µ–Ω–æ {len(actual)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, –Ω–æ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–ª—å–∫–æ ~{documented}')
              exit(1)
          print(f'‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: ~{documented}/{len(actual)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤')
          "; then
            exit 1
          fi