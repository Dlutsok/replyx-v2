name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/dlutsok/replyx

jobs:
  # =============================================================================
  # BUILD AND PUSH IMAGES
  # =============================================================================
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [backend, frontend, workers]
        # Note: ws-gateway uses the same backend image with different entrypoint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # SECURITY SCAN BEFORE DEPLOY
  # =============================================================================
  security-scan:
    name: Security Scan Before Deploy
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on Deployed config
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'config'
          scan-ref: 'Deployed/'
          format: 'sarif'
          output: 'trivy-deploy-config.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-deploy-config.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: 'trivy-deploy-config.sarif'

      - name: Upload SARIF as artifact (deploy config)
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('trivy-deploy-config.sarif') != ''
        with:
          name: trivy-deploy-config-sarif
          path: trivy-deploy-config.sarif

  # =============================================================================
  # DEPLOYMENT
  # =============================================================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set deployment tag
        run: |
          echo "TAG=main-${{ github.sha }}" >> $GITHUB_ENV
      
      - name: Validate Deployed structure
        run: |
          echo "🔍 Validating Deployed/ structure..."
          ls -la Deployed/
          
          if [ ! -f "Deployed/docker-compose.yml" ]; then
            echo "❌ docker-compose.yml not found in Deployed/"
            exit 1
          fi
          
          if [ ! -f "Deployed/.env.production" ]; then
            echo "❌ .env.production not found in Deployed/"
            exit 1
          fi
          
          if [ ! -f "Deployed/deploy.sh" ]; then
            echo "❌ deploy.sh not found in Deployed/"
            exit 1
          fi
          
          echo "✅ Deployed structure validation passed!"
      
      - name: Test docker-compose syntax
        run: |
          cd Deployed/
          docker compose -f docker-compose.yml config --quiet
          echo "✅ Docker compose syntax is valid!"
      
      - name: Deploy info
        run: |
          echo "🚀 Deploying ReplyX to production..."
          echo "Tag: ${{ env.TAG }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          echo "📋 Services to deploy:"
          echo "  - Backend (ghcr.io/${{ github.repository_owner }}/replyx-backend:${{ env.TAG }})"
          echo "  - Frontend (ghcr.io/${{ github.repository_owner }}/replyx-frontend:${{ env.TAG }})"  
          echo "  - Workers (ghcr.io/${{ github.repository_owner }}/replyx-workers:${{ env.TAG }})"
          echo "  - WS Gateway (uses backend image: ghcr.io/${{ github.repository_owner }}/replyx-backend:${{ env.TAG }})"
          echo ""
          echo "📁 Deployment structure: Deployed/"
      
      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          # Setup SSH key
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ssh_key
          chmod 600 ssh_key
          
          # Deploy files to server
          scp -i ssh_key -o StrictHostKeyChecking=no -r Deployed/ $SERVER_USER@$SERVER_HOST:/opt/replyx/
          
          # Run deployment script with new TAG
          ssh -i ssh_key -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "
            cd /opt/replyx/Deployed &&
            TAG=${{ env.TAG }} ./deploy.sh
          "
          
          # Cleanup SSH key
          rm -f ssh_key
      
      - name: Post-deployment verification
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          echo "🔍 Verifying deployment..."
          
          # Wait for services to start
          sleep 30
          
          # Check health endpoints
          if curl -sf https://$SERVER_HOST/health > /dev/null; then
            echo "✅ Main health check passed"
          else
            echo "❌ Main health check failed"
            exit 1
          fi
          
          if curl -sf https://$SERVER_HOST/ws-health > /dev/null; then
            echo "✅ WS Gateway health check passed"  
          else
            echo "❌ WS Gateway health check failed"
            exit 1
          fi
          
          echo "🎉 Deployment verification successful!"