
services:
  # Frontend Next.js application
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: replyx-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://replyx.ru
      - NEXT_PUBLIC_FRONTEND_URL=https://replyx.ru
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - replyx-network

  # Backend FastAPI application
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: replyx-backend
    ports:
      - "8000:8000"
    env_file:
      - .env.production
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SKIP_PIP_INSTALL=1
    depends_on:
      - redis
    volumes:
      - ../backend/uploads:/app/uploads
      - ../backend/data/logs:/app/data/logs
      - ./ssl:/app/ssl
    restart: unless-stopped
    networks:
      - replyx-network

  # Workers Node.js for Telegram bots
  workers:
    build:
      context: ../workers
      dockerfile: Dockerfile
    container_name: replyx-workers
    ports:
      - "8443:8443"  # Telegram webhook port
      - "3002:3002"  # Health check port
    env_file:
      - .env.production
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      - backend
      - redis
    volumes:
      - ./ssl:/app/ssl
    restart: unless-stopped
    networks:
      - replyx-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: replyx-redis
    ports:
      - "6379:6379"
    env_file:
      - .env.production
    command: >
      sh -c '
        if [ -n "$$REDIS_PASSWORD" ]; then
          redis-server --requirepass "$$REDIS_PASSWORD"
        else
          redis-server
        fi
      '
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - replyx-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: replyx-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/static:/var/www/static
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - replyx-network

volumes:
  redis-data:
    driver: local

networks:
  replyx-network:
    driver: bridge