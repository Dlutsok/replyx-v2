#!/usr/bin/env python3
"""
üß™ –ü–û–õ–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ S3 –°–ò–°–¢–ï–ú–´
==========================================

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é S3:
- –ó–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –ó–∞–≥—Ä—É–∑–∫—É –∞–≤–∞—Ç–∞—Ä–æ–≤
- –ó–∞–≥—Ä—É–∑–∫—É –∏–∫–æ–Ω–æ–∫ –≤–∏–¥–∂–µ—Ç–æ–≤
- Proxy endpoints
- –°—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
- CORS –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '../backend'))

import requests
import tempfile
import json
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path="../.env")

class S3IntegrationTester:
    def __init__(self, base_url="http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.test_results = []
        
    def log_result(self, test_name, success, details=None, error=None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        result = {
            'test': test_name,
            'success': success,
            'timestamp': datetime.now().isoformat(),
            'details': details,
            'error': str(error) if error else None
        }
        self.test_results.append(result)
        
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {test_name}")
        if details:
            print(f"   üìã –î–µ—Ç–∞–ª–∏: {details}")
        if error:
            print(f"   üö® –û—à–∏–±–∫–∞: {error}")
        print()
    
    def authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
        print("üîê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø")
        print("=" * 50)
        
        try:
            # –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            login_data = {
                "username": "test@example.com",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π email
                "password": "your_password"      # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
            }
            
            response = self.session.post(
                f"{self.base_url}/api/auth/login",
                data=login_data
            )
            
            if response.status_code == 200:
                data = response.json()
                token = data.get('access_token')
                if token:
                    self.session.headers.update({'Authorization': f'Bearer {token}'})
                    self.log_result("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", True, f"–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
                    return True
            
            self.log_result("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", False, f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
        except Exception as e:
            self.log_result("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", False, error=e)
            return False
    
    def test_document_upload(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        print("üìÑ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –î–û–ö–£–ú–ï–ù–¢–û–í")
        print("=" * 50)
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            test_content = f"–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è S3\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now()}\n–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ S3"
            
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
                f.write(test_content)
                temp_path = f.name
            
            try:
                with open(temp_path, 'rb') as f:
                    files = {'file': ('test_document.txt', f, 'text/plain')}
                    
                    response = self.session.post(
                        f"{self.base_url}/api/documents",
                        files=files
                    )
                
                if response.status_code == 200:
                    data = response.json()
                    self.log_result(
                        "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", 
                        True, 
                        f"ID: {data.get('id')}, –†–∞–∑–º–µ—Ä: {data.get('size')} –±–∞–π—Ç"
                    )
                    return data
                else:
                    self.log_result(
                        "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", 
                        False, 
                        f"HTTP {response.status_code}: {response.text}"
                    )
                    
            finally:
                os.unlink(temp_path)
                
        except Exception as e:
            self.log_result("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", False, error=e)
        
        return None
    
    def test_avatar_upload(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∞–≤–∞—Ç–∞—Ä–æ–≤"""
        print("üñºÔ∏è –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ê–í–ê–¢–ê–†–û–í")
        print("=" * 50)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 PNG)
            png_data = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x02\x00\x00\x00\x90wS\xde\x00\x00\x00\tpHYs\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\nIDATx\x9cc\xf8\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00IEND\xaeB`\x82'
            
            files = {'file': ('test_avatar.png', png_data, 'image/png')}
            
            response = self.session.post(
                f"{self.base_url}/api/upload/avatar",
                files=files
            )
            
            if response.status_code == 200:
                data = response.json()
                avatar_url = data.get('url')
                s3_url = data.get('s3_url')
                
                self.log_result(
                    "–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞", 
                    True, 
                    f"URL: {avatar_url}, S3: {s3_url}"
                )
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ proxy
                if avatar_url:
                    self.test_avatar_accessibility(avatar_url)
                
                return data
            else:
                self.log_result(
                    "–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞", 
                    False, 
                    f"HTTP {response.status_code}: {response.text}"
                )
                
        except Exception as e:
            self.log_result("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞", False, error=e)
        
        return None
    
    def test_avatar_accessibility(self, avatar_url):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ proxy"""
        try:
            full_url = f"{self.base_url}{avatar_url}"
            response = requests.get(full_url, timeout=10)
            
            if response.status_code == 200:
                content_type = response.headers.get('content-type', '')
                content_length = len(response.content)
                
                self.log_result(
                    "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ proxy", 
                    True, 
                    f"–¢–∏–ø: {content_type}, –†–∞–∑–º–µ—Ä: {content_length} –±–∞–π—Ç"
                )
            else:
                self.log_result(
                    "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ proxy", 
                    False, 
                    f"HTTP {response.status_code}"
                )
                
        except Exception as e:
            self.log_result("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ proxy", False, error=e)
    
    def test_widget_icon_upload(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∫–æ–Ω–æ–∫ –≤–∏–¥–∂–µ—Ç–æ–≤"""
        print("üé® –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ò–ö–û–ù–û–ö –í–ò–î–ñ–ï–¢–û–í")
        print("=" * 50)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 PNG)
            png_data = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x02\x00\x00\x00\x90wS\xde\x00\x00\x00\tpHYs\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\nIDATx\x9cc\xf8\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00IEND\xaeB`\x82'
            
            files = {'file': ('test_widget_icon.png', png_data, 'image/png')}
            
            response = self.session.post(
                f"{self.base_url}/api/widget-icons/upload",
                files=files
            )
            
            if response.status_code == 200:
                data = response.json()
                icon_url = data.get('url')
                s3_url = data.get('s3_url')
                
                self.log_result(
                    "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏ –≤–∏–¥–∂–µ—Ç–∞", 
                    True, 
                    f"URL: {icon_url}, S3: {s3_url}"
                )
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ proxy
                if icon_url:
                    self.test_widget_icon_accessibility(icon_url)
                
                return data
            else:
                self.log_result(
                    "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏ –≤–∏–¥–∂–µ—Ç–∞", 
                    False, 
                    f"HTTP {response.status_code}: {response.text}"
                )
                
        except Exception as e:
            self.log_result("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏ –≤–∏–¥–∂–µ—Ç–∞", False, error=e)
        
        return None
    
    def test_widget_icon_accessibility(self, icon_url):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∫–æ–Ω–∫–∏ –≤–∏–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ proxy"""
        try:
            full_url = f"{self.base_url}{icon_url}"
            response = requests.get(full_url, timeout=10)
            
            if response.status_code == 200:
                content_type = response.headers.get('content-type', '')
                content_length = len(response.content)
                
                self.log_result(
                    "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ proxy", 
                    True, 
                    f"–¢–∏–ø: {content_type}, –†–∞–∑–º–µ—Ä: {content_length} –±–∞–π—Ç"
                )
            else:
                self.log_result(
                    "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ proxy", 
                    False, 
                    f"HTTP {response.status_code}"
                )
                
        except Exception as e:
            self.log_result("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ proxy", False, error=e)
    
    def test_s3_structure(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –≤ S3"""
        print("üìÅ –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –ü–ê–ü–û–ö S3")
        print("=" * 50)
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º S3 —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            sys.path.append('../backend')
            from services.s3_storage_service import get_s3_service
            
            s3_service = get_s3_service()
            if not s3_service:
                self.log_result("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 —Å–µ—Ä–≤–∏—Å–∞", False, "S3 —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            self.log_result("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 —Å–µ—Ä–≤–∏—Å–∞", True, f"–ë–∞–∫–µ—Ç: {s3_service.bucket_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = 6  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ documents, avatars, widget-icons
            folders = ['documents', 'avatars', 'widget-icons']
            
            for folder in folders:
                try:
                    files = s3_service.list_user_files(user_id, folder)
                    self.log_result(
                        f"–ü–∞–ø–∫–∞ {folder}", 
                        True, 
                        f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}"
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
                    if files:
                        for i, file_info in enumerate(files[:3]):
                            print(f"     üìÑ {file_info.get('filename')} ({file_info.get('size')} –±–∞–π—Ç)")
                        if len(files) > 3:
                            print(f"     ... –∏ –µ—â–µ {len(files) - 3} —Ñ–∞–π–ª–æ–≤")
                    
                except Exception as e:
                    self.log_result(f"–ü–∞–ø–∫–∞ {folder}", False, error=e)
            
        except Exception as e:
            self.log_result("–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã S3", False, error=e)
    
    def test_cors_headers(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
        print("üåê –¢–ï–°–¢ CORS –ó–ê–ì–û–õ–û–í–ö–û–í")
        print("=" * 50)
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º CORS –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ endpoint
            response = requests.options(
                f"{self.base_url}/api/files/avatars/1/test.png",
                headers={
                    'Origin': 'http://localhost:3000',
                    'Access-Control-Request-Method': 'GET'
                }
            )
            
            cors_headers = {
                'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
                'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),
                'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers'),
            }
            
            self.log_result(
                "CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏", 
                True, 
                f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {cors_headers}"
            )
            
        except Exception as e:
            self.log_result("CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏", False, error=e)
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print("\n" + "=" * 70)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø S3")
        print("=" * 70)
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r['success']])
        failed_tests = total_tests - successful_tests
        
        print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_tests/total_tests*100):.1f}%")
        
        if failed_tests > 0:
            print(f"\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
            for result in self.test_results:
                if not result['success']:
                    print(f"   - {result['test']}: {result['error']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report_file = f"s3_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.test_results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        return successful_tests == total_tests
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø S3 –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 70)
        print(f"üïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now()}")
        print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {self.base_url}")
        print()
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # auth_success = self.authenticate()
        # if not auth_success:
        #     print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å)")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.test_s3_structure()
        self.test_document_upload()
        self.test_avatar_upload()
        self.test_widget_icon_upload()
        self.test_cors_headers()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        return self.generate_report()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ S3 INTEGRATION TESTER")
    print("=" * 70)
    print("–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é S3 –≤ —Å–∏—Å—Ç–µ–º–µ ReplyX")
    print()
    
    tester = S3IntegrationTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        exit(0)
    else:
        print("\nüí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        exit(1)

if __name__ == "__main__":
    main()
