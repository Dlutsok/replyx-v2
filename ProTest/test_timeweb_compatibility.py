#!/usr/bin/env python3
"""
üîß –¢–ï–°–¢ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° TIMEWEB CLOUD STORAGE
=============================================

–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è Timeweb Cloud:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ñ–∏—Å–∞–º–∏
- –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π S3
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤
- –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∫–µ—Ç–∞
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '../backend'))

import tempfile
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path="../.env")

class TimwebCompatibilityTester:
    def __init__(self):
        self.test_results = []
        
    def log_result(self, test_name, success, details=None, error=None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        result = {
            'test': test_name,
            'success': success,
            'timestamp': datetime.now().isoformat(),
            'details': details,
            'error': str(error) if error else None
        }
        self.test_results.append(result)
        
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {test_name}")
        if details:
            print(f"   üìã {details}")
        if error:
            print(f"   üö® {error}")
        print()
    
    def test_s3_service_initialization(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é S3 —Å–µ—Ä–≤–∏—Å–∞"""
        print("üîß –¢–ï–°–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò S3 –°–ï–†–í–ò–°–ê")
        print("=" * 50)
        
        try:
            from services.s3_storage_service import get_s3_service
            
            s3_service = get_s3_service()
            if s3_service:
                self.log_result(
                    "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 —Å–µ—Ä–≤–∏—Å–∞", 
                    True, 
                    f"–ë–∞–∫–µ—Ç: {s3_service.bucket_name}, Endpoint: {s3_service.endpoint_url}"
                )
                return s3_service
            else:
                self.log_result("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 —Å–µ—Ä–≤–∏—Å–∞", False, "–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
                
        except Exception as e:
            self.log_result("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 —Å–µ—Ä–≤–∏—Å–∞", False, error=e)
            return None
    
    def test_metadata_with_dashes(self, s3_service):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–µ—Ñ–∏—Å–∞–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Timeweb)"""
        print("üè∑Ô∏è –¢–ï–°–¢ –ú–ï–¢–ê–î–ê–ù–ù–´–• –° –î–ï–§–ò–°–ê–ú–ò")
        print("=" * 50)
        
        if not s3_service:
            self.log_result("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–µ—Ñ–∏—Å–∞–º–∏", False, "S3 —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            test_content = b"Test metadata with dashes"
            object_key = "test/metadata_test.txt"
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–µ—Ñ–∏—Å–∞–º–∏ (—Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
            good_metadata = {
                'user-id': '123',
                'file-type': 'test',
                'original-filename': 'test.txt'
            }
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            upload_result = s3_service.upload_file(
                file_content=test_content,
                object_key=object_key,
                content_type='text/plain',
                metadata=good_metadata
            )
            
            if upload_result.get('success'):
                self.log_result(
                    "–ó–∞–≥—Ä—É–∑–∫–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–¥–µ—Ñ–∏—Å—ã)", 
                    True, 
                    f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {object_key}"
                )
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                try:
                    s3_service.s3_client.delete_object(
                        Bucket=s3_service.bucket_name,
                        Key=object_key
                    )
                    self.log_result("–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞", True)
                except:
                    pass
                    
            else:
                self.log_result(
                    "–ó–∞–≥—Ä—É–∑–∫–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–¥–µ—Ñ–∏—Å—ã)", 
                    False, 
                    upload_result.get('error')
                )
            
            # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            bad_metadata = {
                'user_id': '123',  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
                'file_type': 'test',
                'original_filename': 'test.txt'
            }
            
            object_key_bad = "test/metadata_bad_test.txt"
            
            upload_result_bad = s3_service.upload_file(
                file_content=test_content,
                object_key=object_key_bad,
                content_type='text/plain',
                metadata=bad_metadata
            )
            
            if upload_result_bad.get('success'):
                self.log_result(
                    "–ó–∞–≥—Ä—É–∑–∫–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)", 
                    False, 
                    "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Å–ø–µ—à–Ω–æ - –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É"
                )
                # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å–ª—É—á–∞–π–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
                try:
                    s3_service.s3_client.delete_object(
                        Bucket=s3_service.bucket_name,
                        Key=object_key_bad
                    )
                except:
                    pass
            else:
                self.log_result(
                    "–ó–∞–≥—Ä—É–∑–∫–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)", 
                    True, 
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {upload_result_bad.get('error')}"
                )
                
        except Exception as e:
            self.log_result("–¢–µ—Å—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö", False, error=e)
    
    def test_file_naming_conventions(self, s3_service):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ–Ω—Ü–∏–∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        print("üìù –¢–ï–°–¢ –ö–û–ù–í–ï–ù–¶–ò–ô –ò–ú–ï–ù–û–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í")
        print("=" * 50)
        
        if not s3_service:
            self.log_result("–ö–æ–Ω–≤–µ–Ω—Ü–∏–∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è", False, "S3 —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
            test_content = b"Test file naming"
            user_id = 999
            
            # –¢–µ—Å—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_filename = s3_service.generate_secure_filename(
                user_id=user_id,
                original_filename="—Ç–µ—Å—Ç —Ñ–∞–π–ª.txt",
                content=test_content
            )
            
            self.log_result(
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞", 
                True, 
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {doc_filename}"
            )
            
            # –¢–µ—Å—Ç –¥–ª—è –∏–∫–æ–Ω–∫–∏ –≤–∏–¥–∂–µ—Ç–∞
            icon_filename = s3_service.generate_widget_icon_filename(
                user_id=user_id,
                original_filename="icon with spaces.png",
                content=test_content
            )
            
            self.log_result(
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∏–∫–æ–Ω–∫–∏", 
                True, 
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {icon_filename}"
            )
            
            # –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª—é—á–µ–π –æ–±—ä–µ–∫—Ç–æ–≤
            doc_key = s3_service.get_user_object_key(user_id, doc_filename, "documents")
            avatar_key = s3_service.get_user_object_key(user_id, "avatar.jpg", "avatars")
            icon_key = s3_service.get_user_object_key(user_id, icon_filename, "widget-icons")
            
            expected_patterns = [
                f"users/{user_id}/documents/",
                f"users/{user_id}/avatars/",
                f"users/{user_id}/widget-icons/"
            ]
            
            keys = [doc_key, avatar_key, icon_key]
            names = ["–¥–æ–∫—É–º–µ–Ω—Ç–∞", "–∞–≤–∞—Ç–∞—Ä–∞", "–∏–∫–æ–Ω–∫–∏"]
            
            for i, (key, pattern, name) in enumerate(zip(keys, expected_patterns, names)):
                if key.startswith(pattern):
                    self.log_result(
                        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª—é—á–∞ {name}", 
                        True, 
                        f"–ö–ª—é—á: {key}"
                    )
                else:
                    self.log_result(
                        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª—é—á–∞ {name}", 
                        False, 
                        f"–û–∂–∏–¥–∞–ª—Å—è –ø—Ä–µ—Ñ–∏–∫—Å {pattern}, –ø–æ–ª—É—á–µ–Ω {key}"
                    )
                    
        except Exception as e:
            self.log_result("–¢–µ—Å—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤", False, error=e)
    
    def test_connection_configurations(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        print("‚öôÔ∏è –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
        print("=" * 50)
        
        try:
            import boto3
            from botocore.config import Config
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            access_key = os.getenv('S3_ACCESS_KEY_ID')
            secret_key = os.getenv('S3_SECRET_ACCESS_KEY')
            endpoint_url = os.getenv('S3_ENDPOINT_URL')
            region = os.getenv('S3_REGION')
            bucket_name = os.getenv('S3_BUCKET_NAME')
            
            if not all([access_key, secret_key, endpoint_url, region, bucket_name]):
                self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", False, "–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ S3 –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return
            
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", 
                True, 
                f"Endpoint: {endpoint_url}, Region: {region}"
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Timeweb
            try:
                s3_client = boto3.client(
                    's3',
                    endpoint_url=endpoint_url,
                    region_name=region,
                    aws_access_key_id=access_key,
                    aws_secret_access_key=secret_key,
                    config=Config(
                        s3={
                            'addressing_style': 'path',
                            'signature_version': 's3v4'
                        },
                        region_name=region
                    )
                )
                
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
                response = s3_client.list_objects_v2(
                    Bucket=bucket_name,
                    MaxKeys=1
                )
                
                self.log_result(
                    "–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Timeweb", 
                    True, 
                    f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {response.get('KeyCount', 0)}"
                )
                
            except Exception as e:
                self.log_result("–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Timeweb", False, error=e)
                
        except Exception as e:
            self.log_result("–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", False, error=e)
    
    def test_bucket_permissions(self, s3_service):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∫–µ—Ç—É"""
        print("üîí –¢–ï–°–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê –ö –ë–ê–ö–ï–¢–£")
        print("=" * 50)
        
        if not s3_service:
            self.log_result("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", False, "S3 —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        try:
            # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
            try:
                response = s3_service.s3_client.list_objects_v2(
                    Bucket=s3_service.bucket_name,
                    MaxKeys=1
                )
                self.log_result("–ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ", True, "–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω")
            except Exception as e:
                self.log_result("–ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ", False, error=e)
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞)
            try:
                test_key = "test/permissions_test.txt"
                s3_service.s3_client.put_object(
                    Bucket=s3_service.bucket_name,
                    Key=test_key,
                    Body=b"Permission test",
                    ContentType="text/plain"
                )
                self.log_result("–ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å", True, "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
                
                # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
                s3_service.s3_client.delete_object(
                    Bucket=s3_service.bucket_name,
                    Key=test_key
                )
                self.log_result("–ü—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ", True, "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
                
            except Exception as e:
                self.log_result("–ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å/—É–¥–∞–ª–µ–Ω–∏–µ", False, error=e)
                
        except Exception as e:
            self.log_result("–¢–µ—Å—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", False, error=e)
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("\n" + "=" * 70)
        print("üìä –û–¢–ß–ï–¢ –û –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° TIMEWEB CLOUD")
        print("=" * 70)
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r['success']])
        failed_tests = total_tests - successful_tests
        
        print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        print(f"üìä –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {(successful_tests/total_tests*100):.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if failed_tests == 0:
            print("\nüéâ –ü–û–õ–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –° TIMEWEB CLOUD!")
        elif failed_tests <= 2:
            print("\n‚ö†Ô∏è –•–æ—Ä–æ—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        else:
            print("\nüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        
        if failed_tests > 0:
            print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–´:")
            for result in self.test_results:
                if not result['success']:
                    print(f"   - {result['test']}: {result['error']}")
        
        return failed_tests == 0
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° TIMEWEB CLOUD")
        print("=" * 70)
        print(f"üïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now()}")
        print()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        s3_service = self.test_s3_service_initialization()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.test_connection_configurations()
        self.test_metadata_with_dashes(s3_service)
        self.test_file_naming_conventions(s3_service)
        self.test_bucket_permissions(s3_service)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        return self.generate_report()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß TIMEWEB CLOUD COMPATIBILITY TESTER")
    print("=" * 70)
    print("–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Timeweb Cloud Storage")
    print()
    
    tester = TimwebCompatibilityTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ –ü–û–õ–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
        exit(0)
    else:
        print("\nüí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò!")
        exit(1)

if __name__ == "__main__":
    main()
