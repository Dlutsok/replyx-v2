#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Database configuration from .env.production or environment variables
DB_HOST="${DB_HOST:-192.168.0.4}"
DB_PORT="${DB_PORT:-5432}"
DB_ADMIN_USER="${DB_ADMIN_USER:-postgres}"
DB_ADMIN_PASS="${PGPASSWORD:-}"  # Use PGPASSWORD env var
DB_NAME="${DB_NAME:-replyx_production}"
DB_USER="${DB_USER:-gen_user}"
DB_PASS="${DB_PASS:-q?|>7!gzi+S.jJ}"

print_status() {
    echo -e "${GREEN}[–ò–ù–§–û]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[–í–ù–ò–ú–ê–ù–ò–ï]${NC} $1"
}

print_error() {
    echo -e "${RED}[–û–®–ò–ë–ö–ê]${NC} $1"
}

# Check if database admin credentials are provided
check_admin_credentials() {
    if [ -z "$DB_ADMIN_PASS" ]; then
        print_error "–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ PostgreSQL –Ω–µ —É–∫–∞–∑–∞–Ω!"
        echo ""
        echo "–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ PostgreSQL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
        echo "export PGPASSWORD=–≤–∞—à-–ø–∞—Ä–æ–ª—å-postgres"
        echo "./init-db.sh"
        echo ""
        echo "–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª .env.production –∫–∞–∫ PGPASSWORD"
        exit 1
    fi
    print_status "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ PostgreSQL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
}

# Test database connection
test_connection() {
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É PostgreSQL..."
    
    export PGPASSWORD="$DB_ADMIN_PASS"
    
    if ! psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_ADMIN_USER" -c "SELECT version();" > /dev/null 2>&1; then
        print_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É PostgreSQL!"
        print_error "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:"
        echo "  1. –°–µ—Ä–≤–µ—Ä PostgreSQL –∑–∞–ø—É—â–µ–Ω –Ω–∞ $DB_HOST:$DB_PORT"
        echo "  2. –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
        echo "  3. –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
        exit 1
    fi
    
    print_status "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!"
}

# Create database and user
create_database() {
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    
    export PGPASSWORD="$DB_ADMIN_PASS"
    
    # Create user if not exists
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '$DB_USER'..."
    psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_ADMIN_USER" -c "
        DO \$\$
        BEGIN
            CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';
        EXCEPTION WHEN duplicate_object THEN
            RAISE NOTICE 'User $DB_USER already exists';
        END
        \$\$;
    "
    
    # Create database if not exists
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '$DB_NAME'..."
    psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_ADMIN_USER" -c "
        SELECT 'CREATE DATABASE $DB_NAME OWNER $DB_USER'
        WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$DB_NAME')\gexec
    "
    
    # Grant privileges
    print_status "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π..."
    psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_ADMIN_USER" -c "
        GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;
        ALTER USER $DB_USER CREATEDB;
    "
}

# Install pgvector extension
install_pgvector() {
    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgvector..."
    
    export PGPASSWORD="$DB_PASS"
    
    psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -c "
        CREATE EXTENSION IF NOT EXISTS vector;
    "
    
    if [ $? -eq 0 ]; then
        print_status "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector!"
        print_error "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ pgvector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ PostgreSQL:"
        echo "  Ubuntu/Debian: apt install postgresql-15-pgvector"
        echo "  CentOS/RHEL: yum install pgvector"
        exit 1
    fi
}

# Test application database connection
test_app_connection() {
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
    
    export PGPASSWORD="$DB_PASS"
    
    if psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -c "SELECT version();" > /dev/null 2>&1; then
        print_status "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
        
        # Test vector extension
        if psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1" > /dev/null 2>&1; then
            print_status "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π!"
        fi
    else
        print_error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
        exit 1
    fi
}

# Main execution
main() {
    print_status "üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ReplyX"
    echo "=================================="
    
    print_warning "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç:"
    echo "  1. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $DB_NAME"
    echo "  2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $DB_USER"
    echo "  3. –£—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgvector"
    echo "  4. –ü—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo ""
    
    # Check for non-interactive mode
    if [ "${INIT_DB_NON_INTERACTIVE:-0}" = "1" ] || [ "${CI:-false}" = "true" ] || [ -n "${AUTO_CONFIRM:-}" ]; then
        print_status "–ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
    else
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_status "–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            exit 0
        fi
    fi
    
    check_admin_credentials
    test_connection
    create_database
    install_pgvector
    test_app_connection
    
    print_status "üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    print_status "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: docker-compose up -d backend"
    print_status "Backend –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"
}

# Handle script arguments
case "${1:-init}" in
    "test")
        check_admin_credentials
        test_connection
        test_app_connection
        ;;
    "init"|"")
        main
        ;;
    "-y"|"--yes")
        export AUTO_CONFIRM=1
        main
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [init|test|-y|--yes]"
        echo ""
        echo "  init     - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  test     - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        echo "  -y|--yes - –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)"
        echo ""
        echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:"
        echo "  INIT_DB_NON_INTERACTIVE=1 - –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"
        echo "  CI=true                   - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ CI/CD"
        echo "  AUTO_CONFIRM=–ª—é–±–æ–µ        - –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
        exit 1
        ;;
esac