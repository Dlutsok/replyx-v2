"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—É–ª –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
–†–µ–∞–ª–∏–∑—É–µ—Ç semaphore –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import asyncio
import logging
from typing import Optional, Callable, Any
from contextlib import asynccontextmanager

logger = logging.getLogger(__name__)


class AsyncRequestPool:
    """–ü—É–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏"""
    
    def __init__(self, max_concurrent_requests: int = 10):
        self.semaphore = asyncio.Semaphore(max_concurrent_requests)
        self.active_requests = 0
        self.total_requests = 0
        self.failed_requests = 0
        
    @asynccontextmanager
    async def acquire_slot(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        async with self.semaphore:
            self.active_requests += 1
            self.total_requests += 1
            try:
                logger.debug(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {self.active_requests}/{self.semaphore._value + self.active_requests}")
                yield
            except Exception as e:
                self.failed_requests += 1
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø—É–ª–µ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
                raise
            finally:
                self.active_requests -= 1
    
    async def execute_with_limit(self, coro: Callable, *args, **kwargs) -> Any:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏"""
        async with self.acquire_slot():
            return await coro(*args, **kwargs)
    
    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞"""
        return {
            "active_requests": self.active_requests,
            "total_requests": self.total_requests,
            "failed_requests": self.failed_requests,
            "success_rate": ((self.total_requests - self.failed_requests) / max(self.total_requests, 1)) * 100
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—É–ª–∞
request_pool = AsyncRequestPool(max_concurrent_requests=20)


def get_request_pool() -> AsyncRequestPool:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return request_pool