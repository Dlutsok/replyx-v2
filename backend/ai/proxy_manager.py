"""
Proxy Manager —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é –∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π
–†–µ–∞–ª–∏–∑—É–µ—Ç circuit breaker, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—à–∏–±–æ–∫ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–µ–π–ª–æ–≤–µ—Ä
"""

import os
import json
import time
import asyncio
from typing import List, Dict, Optional, Any, Tuple
from datetime import datetime, timedelta
from enum import Enum
import logging
from dataclasses import dataclass, field
import httpx

logger = logging.getLogger(__name__)


class CircuitState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è circuit breaker'–∞"""
    CLOSED = "closed"      # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    OPEN = "open"         # –ü—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    HALF_OPEN = "half_open"  # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º


class ProxyErrorType(Enum):
    """–¢–∏–ø—ã –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    CONNECTION_ERROR = "connection_error"    # ConnectError, ConnectTimeout 
    READ_TIMEOUT = "read_timeout"           # ReadTimeout
    AUTH_ERROR = "auth_error"               # 407, 403
    RATE_LIMIT = "rate_limit"               # 429
    PROXY_ERROR = "proxy_error"             # ProxyError
    UPSTREAM_ERROR = "upstream_error"        # 5xx –æ—Ç API, –Ω–µ –æ—Ç –ø—Ä–æ–∫—Å–∏
    UNKNOWN_ERROR = "unknown_error"


@dataclass
class ProxyConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
    url: str
    priority: int
    name: str
    
    # Circuit breaker —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    circuit_state: CircuitState = CircuitState.CLOSED
    failure_count: int = 0
    opened_at: Optional[datetime] = None
    last_success: Optional[datetime] = None
    last_error: Optional[datetime] = None
    last_error_type: Optional[ProxyErrorType] = None
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    requests_total: int = 0
    requests_ok: int = 0
    requests_failed: int = 0
    switches_total: int = 0
    response_times: List[float] = field(default_factory=list)
    
    def get_success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.requests_total == 0:
            return 0.0
        return (self.requests_ok / self.requests_total) * 100
    
    def get_avg_response_time(self) -> float:
        """–°—Ä–µ–¥–Ω–∏–π response time"""
        if not self.response_times:
            return 0.0
        return sum(self.response_times) / len(self.response_times)
    
    def get_p95_response_time(self) -> float:
        """95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å response time"""
        if not self.response_times:
            return 0.0
        sorted_times = sorted(self.response_times)
        index = int(0.95 * len(sorted_times))
        return sorted_times[min(index, len(sorted_times) - 1)]


class ProxyErrorClassifier:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"""
    
    # –û—à–∏–±–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
    IMMEDIATE_SWITCH = [
        httpx.ConnectError,
        httpx.ConnectTimeout, 
        httpx.ProxyError,
        httpx.RemoteProtocolError
    ]
    
    # –û—à–∏–±–∫–∏ —Å –æ–¥–Ω–∏–º retry, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
    RETRY_THEN_SWITCH = [
        httpx.ReadTimeout
    ]
    
    # HTTP –∫–æ–¥—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (15 –º–∏–Ω)
    LONG_COOLDOWN_CODES = [407, 403, 429]
    
    # HTTP –∫–æ–¥—ã upstream –æ—à–∏–±–æ–∫ (–Ω–µ –º–µ–Ω—è—Ç—å –ø—Ä–æ–∫—Å–∏)
    UPSTREAM_ERROR_CODES = [500, 502, 503, 504]
    
    @classmethod
    def classify_error(cls, error: Exception, response_code: Optional[int] = None) -> ProxyErrorType:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è"""
        
        if isinstance(error, tuple(cls.IMMEDIATE_SWITCH)):
            if isinstance(error, (httpx.ConnectError, httpx.ConnectTimeout)):
                return ProxyErrorType.CONNECTION_ERROR
            elif isinstance(error, httpx.ProxyError):
                return ProxyErrorType.PROXY_ERROR
            else:
                return ProxyErrorType.CONNECTION_ERROR
        
        if isinstance(error, tuple(cls.RETRY_THEN_SWITCH)):
            return ProxyErrorType.READ_TIMEOUT
        
        if response_code:
            if response_code in cls.LONG_COOLDOWN_CODES:
                if response_code in [407, 403]:
                    return ProxyErrorType.AUTH_ERROR
                elif response_code == 429:
                    return ProxyErrorType.RATE_LIMIT
            
            if response_code in cls.UPSTREAM_ERROR_CODES:
                return ProxyErrorType.UPSTREAM_ERROR
        
        return ProxyErrorType.UNKNOWN_ERROR
    
    @classmethod
    def should_switch_proxy(cls, error_type: ProxyErrorType) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –ø—Ä–æ–∫—Å–∏"""
        return error_type in [
            ProxyErrorType.CONNECTION_ERROR,
            ProxyErrorType.PROXY_ERROR,
            ProxyErrorType.AUTH_ERROR,
            ProxyErrorType.RATE_LIMIT
        ]
    
    @classmethod
    def should_retry(cls, error_type: ProxyErrorType) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å retry –Ω–∞ —Ç–æ–º –∂–µ –ø—Ä–æ–∫—Å–∏"""
        return error_type == ProxyErrorType.READ_TIMEOUT
    
    @classmethod
    def get_cooldown_seconds(cls, error_type: ProxyErrorType) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        cooldown_map = {
            ProxyErrorType.CONNECTION_ERROR: 60,    # 1 –º–∏–Ω—É—Ç–∞
            ProxyErrorType.PROXY_ERROR: 60,         # 1 –º–∏–Ω—É—Ç–∞
            ProxyErrorType.READ_TIMEOUT: 30,        # 30 —Å–µ–∫—É–Ω–¥
            ProxyErrorType.AUTH_ERROR: 900,         # 15 –º–∏–Ω—É—Ç
            ProxyErrorType.RATE_LIMIT: 300,         # 5 –º–∏–Ω—É—Ç
            ProxyErrorType.UPSTREAM_ERROR: 0,       # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º
            ProxyErrorType.UNKNOWN_ERROR: 120       # 2 –º–∏–Ω—É—Ç—ã
        }
        return cooldown_map.get(error_type, 60)


class ProxyCircuitBreaker:
    """Circuit Breaker –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ —Å half-open —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
    
    def __init__(self, failure_threshold: int = 3):
        self.failure_threshold = failure_threshold
    
    def can_make_request(self, proxy: ProxyConfig) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –ø—Ä–æ–∫—Å–∏"""
        
        if proxy.circuit_state == CircuitState.CLOSED:
            return True
        
        if proxy.circuit_state == CircuitState.OPEN:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ HALF_OPEN
            if proxy.opened_at:
                error_type = proxy.last_error_type or ProxyErrorType.UNKNOWN_ERROR
                cooldown_seconds = ProxyErrorClassifier.get_cooldown_seconds(error_type)
                
                if (datetime.now() - proxy.opened_at).total_seconds() >= cooldown_seconds:
                    proxy.circuit_state = CircuitState.HALF_OPEN
                    logger.info(f"üîÑ –ü—Ä–æ–∫—Å–∏ '{proxy.name}' –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ HALF_OPEN –ø–æ—Å–ª–µ cooldown")
                    return True
            
            return False
        
        if proxy.circuit_state == CircuitState.HALF_OPEN:
            # –í –ø–æ–ª—É–æ—Ç–∫—Ä—ã—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–¥–Ω—É –ø—Ä–æ–±–Ω—É—é –∑–∞—è–≤–∫—É
            return True
        
        return False
    
    def record_success(self, proxy: ProxyConfig) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        proxy.circuit_state = CircuitState.CLOSED
        proxy.failure_count = 0
        proxy.opened_at = None
        proxy.last_success = datetime.now()
        proxy.requests_ok += 1
        proxy.requests_total += 1
        
        logger.info(f"‚úÖ –ü—Ä–æ–∫—Å–∏ '{proxy.name}' –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
    
    def record_failure(self, proxy: ProxyConfig, error_type: ProxyErrorType) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        proxy.failure_count += 1
        proxy.last_error = datetime.now()
        proxy.last_error_type = error_type
        proxy.requests_failed += 1
        proxy.requests_total += 1
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ OPEN –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ø–æ—Ä–æ–≥ –∏–ª–∏ –≤ HALF_OPEN —Ä–µ–∂–∏–º–µ
        if (proxy.circuit_state == CircuitState.HALF_OPEN or 
            proxy.failure_count >= self.failure_threshold):
            
            proxy.circuit_state = CircuitState.OPEN
            proxy.opened_at = datetime.now()
            cooldown = ProxyErrorClassifier.get_cooldown_seconds(error_type)
            
            logger.warning(
                f"‚õî –ü—Ä–æ–∫—Å–∏ '{proxy.name}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {cooldown}s "
                f"–ø–æ—Å–ª–µ {proxy.failure_count} –æ—à–∏–±–æ–∫ —Ç–∏–ø–∞ {error_type.value}"
            )


class ProxyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏ —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–µ–π–ª–æ–≤–µ—Ä–æ–º"""
    
    def __init__(self):
        self.proxies: List[ProxyConfig] = []
        self.circuit_breaker = ProxyCircuitBreaker()
        self.current_proxy_index = 0
        self._load_proxy_config()
        
        # –¢–∞–π–º–∏–Ω–≥–∏ –∏–∑ environment
        self.connect_timeout = int(os.getenv('OPENAI_PROXY_CONNECT_TIMEOUT', '5'))
        self.read_timeout = int(os.getenv('OPENAI_PROXY_READ_TIMEOUT', '30'))
        self.stream_timeout = int(os.getenv('OPENAI_PROXY_STREAM_TIMEOUT', '300'))
        
        logger.info(f"üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ProxyManager —Å {len(self.proxies)} –ø—Ä–æ–∫—Å–∏")
    
    def _load_proxy_config(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏ –∏–∑ environment variables"""
        
        # –ù–æ–≤—ã–π JSON —Ñ–æ—Ä–º–∞—Ç
        proxy_config_json = os.getenv('OPENAI_PROXY_CONFIG')
        if proxy_config_json:
            try:
                proxy_data = json.loads(proxy_config_json)
                for item in proxy_data:
                    proxy = ProxyConfig(
                        url=item['url'],
                        priority=item.get('priority', 1),
                        name=item.get('name', f'proxy_{len(self.proxies) + 1}')
                    )
                    self.proxies.append(proxy)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–º–µ–Ω—å—à–µ —á–∏—Å–ª–æ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                self.proxies.sort(key=lambda x: x.priority)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.proxies)} –ø—Ä–æ–∫—Å–∏ –∏–∑ OPENAI_PROXY_CONFIG")
                return
            
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ OPENAI_PROXY_CONFIG: {e}")
        
        # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        old_proxy_url = os.getenv('OPENAI_PROXY_URL')
        if old_proxy_url:
            proxy = ProxyConfig(
                url=old_proxy_url,
                priority=1,
                name='legacy_proxy'
            )
            self.proxies.append(proxy)
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω legacy OPENAI_PROXY_URL")
        else:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
    
    def get_available_proxy(self) -> Optional[ProxyConfig]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        
        if not self.proxies:
            return None
        
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        for proxy in self.proxies:
            if self.circuit_breaker.can_make_request(proxy):
                return proxy
        
        logger.warning("‚ö†Ô∏è –í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return None
    
    def record_proxy_success(self, proxy: ProxyConfig, response_time: float) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
        self.circuit_breaker.record_success(proxy)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        proxy.response_times.append(response_time)
        # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
        if len(proxy.response_times) > 100:
            proxy.response_times = proxy.response_times[-100:]
    
    def record_proxy_failure(self, proxy: ProxyConfig, error: Exception, 
                           response_code: Optional[int] = None) -> ProxyErrorType:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
        error_type = ProxyErrorClassifier.classify_error(error, response_code)
        self.circuit_breaker.record_failure(proxy, error_type)
        
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ '{proxy.name}': {error_type.value} - {error}")
        return error_type
    
    def should_retry_with_same_proxy(self, error_type: ProxyErrorType) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º –∂–µ –ø—Ä–æ–∫—Å–∏"""
        return ProxyErrorClassifier.should_retry(error_type)
    
    def should_switch_proxy(self, error_type: ProxyErrorType) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –ø—Ä–æ–∫—Å–∏"""
        return ProxyErrorClassifier.should_switch_proxy(error_type)
    
    def get_proxy_for_request(self, is_stream: bool = False) -> Tuple[Optional[str], Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –ø—Ä–æ–∫—Å–∏ –∏ httpx client kwargs –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        
        Returns:
            Tuple[proxy_url, client_kwargs]
        """
        proxy = self.get_available_proxy()
        if not proxy:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ –ø—Ä–æ–∫—Å–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
            timeout = self.stream_timeout if is_stream else self.read_timeout
            client_kwargs = {
                "timeout": httpx.Timeout(
                    connect=min(self.connect_timeout, 10),  # –ë—ã—Å—Ç—Ä–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
                    read=timeout,
                    write=self.connect_timeout,
                    pool=self.connect_timeout
                ),
                "trust_env": False,
                "follow_redirects": True,
                "limits": httpx.Limits(max_keepalive_connections=20, max_connections=100)
            }
            return None, client_kwargs
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π timeout –¥–ª—è –ø—Ä–æ–∫—Å–∏
        timeout = self.stream_timeout if is_stream else self.read_timeout
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏
        client_kwargs = {
            "proxy": proxy.url,
            "timeout": httpx.Timeout(
                connect=self.connect_timeout,
                read=timeout,
                write=self.connect_timeout,
                pool=self.connect_timeout
            ),
            "trust_env": False,
            "follow_redirects": True,
            "limits": httpx.Limits(max_keepalive_connections=10, max_connections=50),
            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–≤–∏—Å–∞–Ω–∏–µ –Ω–∞ DNS
            "transport": httpx.HTTPTransport(retries=0)
        }
        
        return proxy.url, client_kwargs
    
    def get_proxy_metrics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏"""
        metrics = {
            "proxies": [],
            "total_proxies": len(self.proxies),
            "available_proxies": sum(1 for p in self.proxies if self.circuit_breaker.can_make_request(p)),
            "all_proxies_down": not any(self.circuit_breaker.can_make_request(p) for p in self.proxies)
        }
        
        for proxy in self.proxies:
            proxy_metrics = {
                "name": proxy.name,
                "url_masked": self._mask_proxy_url(proxy.url),
                "priority": proxy.priority,
                "circuit_state": proxy.circuit_state.value,
                "requests_total": proxy.requests_total,
                "requests_ok": proxy.requests_ok,
                "requests_failed": proxy.requests_failed,
                "success_rate": proxy.get_success_rate(),
                "avg_response_time": proxy.get_avg_response_time(),
                "p95_response_time": proxy.get_p95_response_time(),
                "last_error_type": proxy.last_error_type.value if proxy.last_error_type else None,
                "last_error_time": proxy.last_error.isoformat() if proxy.last_error else None,
                "last_success_time": proxy.last_success.isoformat() if proxy.last_success else None
            }
            metrics["proxies"].append(proxy_metrics)
        
        return metrics
    
    def _mask_proxy_url(self, url: str) -> str:
        """–ú–∞—Å–∫–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –≤ URL –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if '@' in url:
            parts = url.split('@')
            if ':' in parts[0]:
                auth_part = parts[0].split(':')
                if len(auth_part) >= 3:  # protocol:user:pass
                    auth_part[-1] = '***'
                    parts[0] = ':'.join(auth_part)
            return '@'.join(parts)
        return url


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏
proxy_manager = ProxyManager()


def get_proxy_manager() -> ProxyManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏"""
    return proxy_manager