from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import func
from typing import List as TypingList, Optional
from datetime import datetime, timedelta
import json
import os
import logging
import jwt

from database import SessionLocal, models, schemas, crud, auth
from database.connection import get_db

logger = logging.getLogger(__name__)

router = APIRouter()

# get_db –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ database.connection

# Helper functions to avoid circular imports
def invalidate_assistant_cache(assistant_id: int):
    """Wrapper –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    try:
        from cache.redis_cache import chatai_cache
        chatai_cache.invalidate_assistant_cache(assistant_id)
    except ImportError:
        pass

def hot_reload_assistant_bots(assistant_id: int, db: Session):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ"""
    try:
        from main import hot_reload_assistant_bots as _hot_reload
        return _hot_reload(assistant_id, db)
    except ImportError:
        pass

def reload_assistant_bots(assistant_id: int, db: Session):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ"""
    try:
        from main import reload_assistant_bots as _reload
        return _reload(assistant_id, db)
    except ImportError:
        pass

# --- Assistant CRUD ---

@router.get("/assistants", response_model=TypingList[schemas.AssistantRead])
def get_my_assistants(db: Session = Depends(get_db), current_user: models.User = Depends(auth.get_current_user)):
    effective_user_id = auth.get_effective_user_id(current_user, db)
    return crud.get_assistants(db, effective_user_id)

@router.post("/assistants", response_model=schemas.AssistantRead)
def create_my_assistant(data: schemas.AssistantCreate, db: Session = Depends(get_db), current_user: models.User = Depends(auth.get_current_user)):
    assistant = crud.create_assistant(db, current_user.id, data)
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –±–æ—Ç—ã –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    reload_assistant_bots(assistant.id, db)
    
    return assistant

@router.patch("/assistants/{assistant_id}")
def update_my_assistant(assistant_id: int, data: dict, db: Session = Depends(get_db), current_user: models.User = Depends(auth.get_current_user)):
    from validators.input_validator import validate_assistant_data, ValidationError, create_validation_error_response
    
    try:
        print(f"[UPDATE_ASSISTANT] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
        print(f"[UPDATE_ASSISTANT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user.id}")
        print(f"[UPDATE_ASSISTANT] Assistant ID: {assistant_id}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            # –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è name –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
            temp_data = data.copy()
            if 'name' not in temp_data:
                temp_data['name'] = 'temp'  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            validated_data = validate_assistant_data(temp_data)
            if 'name' not in data:
                del validated_data['name']  # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        except ValidationError as e:
            raise create_validation_error_response(e)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        assistant = crud.get_assistant(db, assistant_id)
        if not assistant:
            print(f"[UPDATE_ASSISTANT] –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {assistant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise HTTPException(status_code=404, detail="Assistant not found")
        if assistant.user_id != current_user.id:
            print(f"[UPDATE_ASSISTANT] –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {assistant_id} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {assistant.user_id}, –∞ –Ω–µ {current_user.id}")
            raise HTTPException(status_code=404, detail="Assistant not found")
        
        print(f"[UPDATE_ASSISTANT] –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {assistant.name}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç AssistantUpdate —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        filtered_data = {k: v for k, v in validated_data.items() if k in ['name', 'ai_model', 'system_prompt', 'is_active']}
        print(f"[UPDATE_ASSISTANT] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {filtered_data}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã
        for field, value in filtered_data.items():
            if hasattr(assistant, field):
                setattr(assistant, field, value)
                print(f"[UPDATE_ASSISTANT] –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ {field}: {value}")
        
        assistant.updated_at = datetime.utcnow()
        db.commit()
        db.refresh(assistant)
        updated_assistant = assistant
        print(f"[UPDATE_ASSISTANT] –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {updated_assistant.name}")
        
        # üî• –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        invalidate_assistant_cache(assistant_id)
        print(f"[UPDATE_ASSISTANT] –ö—ç—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id} –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω")
        
        # üî• –ì–û–†–Ø–ß–ê–Ø –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        hot_reload_assistant_bots(assistant_id, db)
        
        return {
            "id": updated_assistant.id,
            "name": updated_assistant.name,
            "ai_model": updated_assistant.ai_model,
            "system_prompt": updated_assistant.system_prompt,
            "is_active": updated_assistant.is_active,
            "user_id": updated_assistant.user_id,
            "created_at": updated_assistant.created_at.isoformat() if updated_assistant.created_at else None,
            "updated_at": updated_assistant.updated_at.isoformat() if updated_assistant.updated_at else None
        }
    except Exception as e:
        print(f"[UPDATE_ASSISTANT] –û—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"[UPDATE_ASSISTANT] Traceback: {traceback.format_exc()}")
        raise

@router.delete("/assistants/{assistant_id}")
def delete_my_assistant(assistant_id: int, db: Session = Depends(get_db), current_user: models.User = Depends(auth.get_current_user)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if not auth.is_organization_owner(current_user, db):
        raise HTTPException(
            status_code=403, 
            detail="–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤"
        )
    
    effective_user_id = auth.get_effective_user_id(current_user, db)
    assistant = crud.get_assistant(db, assistant_id)
    if not assistant or assistant.user_id != effective_user_id:
        raise HTTPException(status_code=404, detail="Assistant not found")
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ –±–æ—Ç-–∏–Ω—Å—Ç–∞–Ω—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    bot_instances = db.query(models.BotInstance).filter(
        models.BotInstance.assistant_id == assistant_id,
        models.BotInstance.user_id == current_user.id
    ).all()
    
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–æ—Ç-–∏–Ω—Å—Ç–∞–Ω—Å—ã
    for bot_instance in bot_instances:
        print(f"[DELETE_ASSISTANT] –£–¥–∞–ª—è–µ–º –±–æ—Ç-–∏–Ω—Å—Ç–∞–Ω—Å {bot_instance.id} —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º {assistant_id}")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç —á–µ—Ä–µ–∑ –º—É–ª—å—Ç–∏-–±–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
        try:
            import requests
            response = requests.post(
                "http://127.0.0.1:3001/stop-bots",
                json={"bot_ids": [bot_instance.id]},
                timeout=5
            )
            print(f"[DELETE_ASSISTANT] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–æ—Ç {bot_instance.id}: {response.status_code}")
        except Exception as e:
            print(f"[DELETE_ASSISTANT] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_instance.id}: {e}")
        
        # –£–¥–∞–ª–∏—Ç—å –±–æ—Ç-–∏–Ω—Å—Ç–∞–Ω—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.delete(bot_instance)
    
    # –£–¥–∞–ª–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    crud.delete_assistant(db, assistant_id)
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    db.commit()
    
    print(f"[DELETE_ASSISTANT] –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {assistant_id} –∏ {len(bot_instances)} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ —É–¥–∞–ª–µ–Ω—ã")
    
    return {"ok": True}

# --- Assistant Settings ---

@router.get("/assistants/{assistant_id}/settings")
def get_assistant_settings(assistant_id: int, current_user: models.User = Depends(auth.get_current_user), db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    assistant = db.query(models.Assistant).filter(
        models.Assistant.id == assistant_id,
        models.Assistant.user_id == current_user.id
    ).first()
    
    if not assistant:
        raise HTTPException(status_code=404, detail="Assistant not found")
    
    return {
        "id": assistant.id,
        "name": assistant.name,
        "ai_model": assistant.ai_model,
        "system_prompt": assistant.system_prompt,
        "is_active": assistant.is_active
    }

@router.get("/assistants/{assistant_id}/embed-code")
def get_assistant_embed_code(
    assistant_id: int, 
    current_user: models.User = Depends(auth.get_current_user), 
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å embed –∫–æ–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    assistant = db.query(models.Assistant).filter(
        models.Assistant.id == assistant_id,
        models.Assistant.user_id == current_user.id
    ).first()
    
    if not assistant:
        raise HTTPException(status_code=404, detail="Assistant not found")
    
    from core.app_config import SITE_SECRET
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è URL
    from core.app_config import FRONTEND_URL
    
    payload = {
        'user_id': current_user.id,
        'assistant_id': assistant_id,
        'type': 'site'
        # –£–±–∏—Ä–∞–µ–º exp - —Ç–æ–∫–µ–Ω –±–µ—Å—Å—Ä–æ—á–Ω—ã–π –ø–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
    }
    site_token = jwt.encode(payload, SITE_SECRET, algorithm='HS256')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embed –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ script tag
    embed_code = f'<script src="{FRONTEND_URL}/widget.js?token={site_token}&theme=blue&type=floating&host={FRONTEND_URL}" async></script>'
    
    return {
        "embed_code": embed_code,
        "token": site_token,
        "assistant_id": assistant_id,
        "assistant_name": assistant.name
    }

@router.post("/assistants/{assistant_id}/widget-settings")
def save_assistant_widget_settings(
    assistant_id: int,
    settings: dict,
    current_user: models.User = Depends(auth.get_current_user),
    db: Session = Depends(get_db)
):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–∞ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    assistant = db.query(models.Assistant).filter(
        models.Assistant.id == assistant_id,
        models.Assistant.user_id == current_user.id
    ).first()
    
    if not assistant:
        raise HTTPException(status_code=404, detail="Assistant not found")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {
        "success": True,
        "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
        "settings": settings
    }

@router.post("/assistants/{assistant_id}/website-integration")
def toggle_website_integration(
    assistant_id: int,
    data: dict,
    current_user: models.User = Depends(auth.get_current_user),
    db: Session = Depends(get_db)
):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∞–π—Ç–æ–º –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    assistant = db.query(models.Assistant).filter(
        models.Assistant.id == assistant_id,
        models.Assistant.user_id == current_user.id
    ).first()
    
    if not assistant:
        raise HTTPException(status_code=404, detail="Assistant not found")
    
    enabled = data.get('enabled', False)
    assistant.website_integration_enabled = enabled
    db.commit()
    
    return {
        "success": True,
        "message": f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∞–π—Ç–æ–º {'–≤–∫–ª—é—á–µ–Ω–∞' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}",
        "website_integration_enabled": enabled
    }

@router.get("/assistants/{assistant_id}/widget-settings")
def get_assistant_widget_settings(
    assistant_id: int,
    current_user: models.User = Depends(auth.get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–∞ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    assistant = db.query(models.Assistant).filter(
        models.Assistant.id == assistant_id,
        models.Assistant.user_id == current_user.id
    ).first()
    
    if not assistant:
        raise HTTPException(status_code=404, detail="Assistant not found")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    default_settings = {
        "theme": "blue",
        "position": "bottom-right",
        "welcomeMessage": "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        "buttonText": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        "showAvatar": True,
        "showOnlineStatus": True,
        "buttonSize": 80,
        "borderRadius": 16
    }
    
    return {
        "settings": default_settings,
        "assistant_id": assistant_id
    }

@router.get("/assistants/{assistant_id}/knowledge")
def get_assistant_knowledge(assistant_id: int, current_user: models.User = Depends(auth.get_current_user), db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    assistant = db.query(models.Assistant).filter(
        models.Assistant.id == assistant_id,
        models.Assistant.user_id == current_user.id
    ).first()
    
    if not assistant:
        raise HTTPException(status_code=404, detail="Assistant not found")
    
    # –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û –∑–Ω–∞–Ω–∏—è, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫ –æ–±—â–∏–º –∑–Ω–∞–Ω–∏—è–º - –∫–∞–∂–¥—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
    knowledge_with_docs = db.query(
        models.UserKnowledge,
        models.Document
    ).join(
        models.Document, 
        models.UserKnowledge.doc_id == models.Document.id
    ).filter(
        models.UserKnowledge.user_id == current_user.id,
        models.UserKnowledge.assistant_id == assistant_id  # –¢–û–õ–¨–ö–û —ç—Ç–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    ).all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ –∑–Ω–∞–Ω–∏–π —ç—Ç–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    documents = []
    for entry, doc in knowledge_with_docs:
        doc_type = entry.doc_type or "–î–æ–∫—É–º–µ–Ω—Ç"
        
        if doc.filename.startswith('quick_fix_'):
            documents.append(entry.content)
        else:
            prefix = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞ '{doc_type}':\n"
            documents.append(prefix + entry.content)
    
    return {
        "assistant_id": assistant_id,
        "system_prompt": assistant.system_prompt,
        "documents": documents  # –ë—É–¥–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    }



# --- User Assistant Lookup (for bots) ---

@router.get("/user-telegram-assistant/{user_id}")
def get_user_telegram_assistant(user_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫ Telegram –±–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    bot_instance = db.query(models.BotInstance).filter(
        models.BotInstance.user_id == user_id,
        models.BotInstance.platform == 'telegram',
        models.BotInstance.is_active == True
    ).first()
    
    if not bot_instance:
        return None
        
    assistant = db.query(models.Assistant).filter(
        models.Assistant.id == bot_instance.assistant_id
    ).first()
    
    if not assistant:
        return None
        
    return {
        "id": assistant.id,
        "name": assistant.name,
        "system_prompt": assistant.system_prompt,
        "is_active": assistant.is_active
    }


@router.get("/assistants/stats")
def get_assistants_stats(db: Session = Depends(get_db), current_user: models.User = Depends(auth.get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    effective_user_id = auth.get_effective_user_id(current_user, db)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    assistants = crud.get_assistants(db, effective_user_id)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_assistants = len(assistants)
    active_assistants = len([a for a in assistants if a.is_active])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    from datetime import datetime, timedelta
    now = datetime.utcnow()
    month_ago = now - timedelta(days=30)
    
    total_messages = 0
    total_dialogs = 0
    assistant_stats = []
    
    for assistant in assistants:
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        messages_count = db.query(func.count(models.DialogMessage.id)).join(
            models.Dialog
        ).filter(
            models.Dialog.user_id == effective_user_id,
            models.Dialog.assistant_id == assistant.id,
            models.DialogMessage.sender == 'assistant',
            models.DialogMessage.timestamp >= month_ago
        ).scalar() or 0
        
        # –ü–æ–¥—Å—á–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        dialogs_count = db.query(func.count(models.Dialog.id)).filter(
            models.Dialog.user_id == effective_user_id,
            models.Dialog.assistant_id == assistant.id,
            models.Dialog.started_at >= month_ago
        ).scalar() or 0
        
        total_messages += messages_count
        total_dialogs += dialogs_count
        
        assistant_stats.append({
            "id": assistant.id,
            "name": assistant.name,
            "messages": messages_count,
            "dialogs": dialogs_count,
            "is_active": assistant.is_active
        })
    
    return {
        "global": {
            "totalAssistants": total_assistants,
            "activeAssistants": active_assistants,
            "totalMessages": total_messages,
            "totalDialogs": total_dialogs
        },
        "byAssistant": assistant_stats
    }