"""
API endpoints –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏ –º–µ—Ç—Ä–∏–∫
"""

from fastapi import APIRouter, HTTPException, Depends
from typing import Dict, Any, List
import logging
from datetime import datetime

from ai.proxy_manager import get_proxy_manager
from core.auth import get_current_admin

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/proxy", tags=["proxy-monitoring"])


@router.get("/metrics", response_model=Dict[str, Any])
async def get_proxy_metrics(admin_user = Depends(get_current_admin)):
    """
    –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    
    Returns:
        - total_proxies: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
        - available_proxies: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏  
        - all_proxies_down: –í—Å–µ –ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–∞–ª–µ—Ä—Ç)
        - proxies: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–∫—Å–∏
    """
    try:
        proxy_manager = get_proxy_manager()
        metrics = proxy_manager.get_proxy_metrics()
        
        return {
            "timestamp": datetime.utcnow().isoformat(),
            "status": "success",
            **metrics
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫")


@router.get("/health")
async def proxy_health_check():
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–∫—Å–∏ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ health checks –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
    """
    try:
        proxy_manager = get_proxy_manager()
        metrics = proxy_manager.get_proxy_metrics()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if metrics["all_proxies_down"]:
            status = "unhealthy"
            message = "–í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            http_status = 503  # Service Unavailable
        elif metrics["available_proxies"] < metrics["total_proxies"]:
            status = "degraded" 
            message = f"{metrics['available_proxies']}/{metrics['total_proxies']} –ø—Ä–æ–∫—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
            http_status = 200
        else:
            status = "healthy"
            message = f"–í—Å–µ {metrics['total_proxies']} –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞—é—Ç"
            http_status = 200
        
        response = {
            "status": status,
            "message": message,
            "timestamp": datetime.utcnow().isoformat(),
            "available_proxies": metrics["available_proxies"],
            "total_proxies": metrics["total_proxies"]
        }
        
        if status == "unhealthy":
            raise HTTPException(status_code=http_status, detail=response)
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ health check –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(
            status_code=500, 
            detail={
                "status": "error",
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏",
                "timestamp": datetime.utcnow().isoformat()
            }
        )


@router.get("/proxies/{proxy_name}/metrics")
async def get_single_proxy_metrics(proxy_name: str, admin_user = Depends(get_current_admin)):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
    try:
        proxy_manager = get_proxy_manager()
        metrics = proxy_manager.get_proxy_metrics()
        
        # –ò—â–µ–º –ø—Ä–æ–∫—Å–∏ –ø–æ –∏–º–µ–Ω–∏
        proxy_metrics = None
        for proxy in metrics["proxies"]:
            if proxy["name"] == proxy_name:
                proxy_metrics = proxy
                break
        
        if not proxy_metrics:
            raise HTTPException(status_code=404, detail=f"–ü—Ä–æ–∫—Å–∏ '{proxy_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {
            "timestamp": datetime.utcnow().isoformat(),
            "proxy": proxy_metrics
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∫—Å–∏ {proxy_name}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∫—Å–∏")


@router.post("/proxies/{proxy_name}/reset")
async def reset_proxy_circuit_breaker(proxy_name: str, admin_user = Depends(get_current_admin)):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å circuit breaker –¥–ª—è –ø—Ä–æ–∫—Å–∏"""
    try:
        proxy_manager = get_proxy_manager()
        
        # –ò—â–µ–º –ø—Ä–æ–∫—Å–∏ –ø–æ –∏–º–µ–Ω–∏
        target_proxy = None
        for proxy in proxy_manager.proxies:
            if proxy.name == proxy_name:
                target_proxy = proxy
                break
        
        if not target_proxy:
            raise HTTPException(status_code=404, detail=f"–ü—Ä–æ–∫—Å–∏ '{proxy_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º circuit breaker
        from ai.proxy_manager import CircuitState
        target_proxy.circuit_state = CircuitState.CLOSED
        target_proxy.failure_count = 0
        target_proxy.opened_at = None
        
        logger.info(f"üîÑ Circuit breaker –¥–ª—è –ø—Ä–æ–∫—Å–∏ '{proxy_name}' —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
        return {
            "status": "success",
            "message": f"Circuit breaker –¥–ª—è –ø—Ä–æ–∫—Å–∏ '{proxy_name}' —Å–±—Ä–æ—à–µ–Ω",
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ circuit breaker –¥–ª—è {proxy_name}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ circuit breaker")


@router.get("/alerts")
async def get_proxy_alerts():
    """
    –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –ø–æ –ø—Ä–æ–∫—Å–∏ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
    """
    try:
        proxy_manager = get_proxy_manager()
        metrics = proxy_manager.get_proxy_metrics()
        alerts = []
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ã–π –∞–ª–µ—Ä—Ç: –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        if metrics["all_proxies_down"]:
            alerts.append({
                "severity": "critical",
                "title": "–í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                "description": f"–í—Å–µ {metrics['total_proxies']} –ø—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã",
                "timestamp": datetime.utcnow().isoformat(),
                "tags": ["proxy", "outage", "critical"]
            })
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —á–∞—Å—Ç–∏—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        elif metrics["available_proxies"] < metrics["total_proxies"]:
            unavailable = metrics["total_proxies"] - metrics["available_proxies"]
            alerts.append({
                "severity": "warning", 
                "title": "–ü—Ä–æ–∫—Å–∏ —á–∞—Å—Ç–∏—á–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                "description": f"{unavailable} –∏–∑ {metrics['total_proxies']} –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                "timestamp": datetime.utcnow().isoformat(),
                "tags": ["proxy", "degraded"]
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
        for proxy in metrics["proxies"]:
            if proxy["circuit_state"] == "open":
                alerts.append({
                    "severity": "warning",
                    "title": f"–ü—Ä–æ–∫—Å–∏ '{proxy['name']}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                    "description": f"Circuit breaker –æ—Ç–∫—Ä—ã—Ç. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {proxy['last_error_type']}",
                    "timestamp": proxy["last_error_time"] or datetime.utcnow().isoformat(),
                    "tags": ["proxy", "circuit-breaker", proxy["name"]]
                })
            
            # –ù–∏–∑–∫–∏–π success rate
            if proxy["success_rate"] < 80 and proxy["requests_total"] > 10:
                alerts.append({
                    "severity": "warning",
                    "title": f"–ù–∏–∑–∫–∏–π success rate –ø—Ä–æ–∫—Å–∏ '{proxy['name']}'",
                    "description": f"Success rate: {proxy['success_rate']:.1f}%",
                    "timestamp": datetime.utcnow().isoformat(),
                    "tags": ["proxy", "performance", proxy["name"]]
                })
        
        return {
            "alerts": alerts,
            "total_alerts": len(alerts),
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤")


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Prometheus –º–µ—Ç—Ä–∏–∫ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
@router.get("/metrics/prometheus")
async def prometheus_metrics():
    """
    –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus
    """
    try:
        proxy_manager = get_proxy_manager()
        metrics = proxy_manager.get_proxy_metrics()
        
        prometheus_output = []
        
        # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        prometheus_output.append(f"# HELP proxy_total_count Total number of configured proxies")
        prometheus_output.append(f"# TYPE proxy_total_count gauge")
        prometheus_output.append(f'proxy_total_count {metrics["total_proxies"]}')
        
        prometheus_output.append(f"# HELP proxy_available_count Number of available proxies") 
        prometheus_output.append(f"# TYPE proxy_available_count gauge")
        prometheus_output.append(f'proxy_available_count {metrics["available_proxies"]}')
        
        prometheus_output.append(f"# HELP proxy_all_down All proxies down flag")
        prometheus_output.append(f"# TYPE proxy_all_down gauge") 
        prometheus_output.append(f'proxy_all_down {1 if metrics["all_proxies_down"] else 0}')
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–∫—Å–∏
        for proxy in metrics["proxies"]:
            labels = f'proxy_name="{proxy["name"]}"'
            
            prometheus_output.append(f"# HELP proxy_requests_total Total requests through proxy")
            prometheus_output.append(f"# TYPE proxy_requests_total counter")
            prometheus_output.append(f'proxy_requests_total{{{labels}}} {proxy["requests_total"]}')
            
            prometheus_output.append(f"# HELP proxy_requests_ok Successful requests through proxy")
            prometheus_output.append(f"# TYPE proxy_requests_ok counter") 
            prometheus_output.append(f'proxy_requests_ok{{{labels}}} {proxy["requests_ok"]}')
            
            prometheus_output.append(f"# HELP proxy_success_rate Success rate percentage")
            prometheus_output.append(f"# TYPE proxy_success_rate gauge")
            prometheus_output.append(f'proxy_success_rate{{{labels}}} {proxy["success_rate"]}')
            
            prometheus_output.append(f"# HELP proxy_response_time_p95 95th percentile response time")
            prometheus_output.append(f"# TYPE proxy_response_time_p95 gauge")
            prometheus_output.append(f'proxy_response_time_p95{{{labels}}} {proxy["p95_response_time"]}')
            
            circuit_state_value = {"closed": 0, "open": 1, "half_open": 0.5}.get(proxy["circuit_state"], 0)
            prometheus_output.append(f"# HELP proxy_circuit_open Circuit breaker open flag")
            prometheus_output.append(f"# TYPE proxy_circuit_open gauge")
            prometheus_output.append(f'proxy_circuit_open{{{labels}}} {circuit_state_value}')
        
        return "\n".join(prometheus_output) + "\n"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Prometheus –º–µ—Ç—Ä–∏–∫: {e}")
        return "# Error generating metrics\n"