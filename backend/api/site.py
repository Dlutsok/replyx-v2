from fastapi import APIRouter, HTTPException, Depends, Query, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse
from sqlalchemy.orm import Session, joinedload
from typing import Dict, List
import asyncio
import json
import jwt
import os
import logging
from datetime import datetime, timedelta

from database import models, schemas, auth, get_db
from ai import prompt_variations
from ai.ai_token_manager import ai_token_manager
# WebSocket removed - using SSE instead
# from services.websocket_manager import (...) - REMOVED
from services.sse_manager import push_sse_event
from services.handoff_service import HandoffService
from services.balance_service import BalanceService
from api.dialogs import broadcast_dialog_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

router = APIRouter()

# Migrated to SSE - removed WebSocket connections

# JWT settings for site tokens
from core.app_config import SITE_SECRET
# –¢–æ–∫–µ–Ω—ã —Ç–µ–ø–µ—Ä—å –±–µ—Å—Å—Ä–æ—á–Ω—ã–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
from core.site_auth import get_current_site_user, get_current_site_user_simple

# Helper functions
def is_user_blocked(user: models.User) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return False

def get_user_message_limit(user: models.User) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ª–∏–º–∏—Ç–æ–≤ –ø–æ —Ç–∞—Ä–∏—Ñ—É
    return 1000

@router.get('/site-token')
def get_site_token(current_user: models.User = Depends(auth.get_current_user)):
    """–ü–æ–ª—É—á–∞–µ—Ç site token –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    payload = {
        'user_id': current_user.id,
        'type': 'site'
        # –£–±–∏—Ä–∞–µ–º exp - —Ç–æ–∫–µ–Ω –±–µ—Å—Å—Ä–æ—á–Ω—ã–π
    }
    token = jwt.encode(payload, SITE_SECRET, algorithm='HS256')
    return {'site_token': token}

@router.post('/embed-code')
def generate_site_token(data: dict, current_user: models.User = Depends(auth.get_current_user), db: Session = Depends(get_db)):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç embed –∫–æ–¥ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    assistant_id = data.get('assistant_id')
    if not assistant_id:
        raise HTTPException(status_code=400, detail="assistant_id required")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    assistant = db.query(models.Assistant).filter(
        models.Assistant.id == assistant_id,
        models.Assistant.user_id == current_user.id
    ).first()
    
    if not assistant:
        raise HTTPException(status_code=404, detail="Assistant not found")
    
    # –°–æ–∑–¥–∞–µ–º embed –∫–æ–¥ —Å assistant_id (–±–µ—Å—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω)
    payload = {
        'user_id': current_user.id,
        'assistant_id': assistant_id,
        'type': 'site'
        # –£–±–∏—Ä–∞–µ–º exp - —Ç–æ–∫–µ–Ω –±–µ—Å—Å—Ä–æ—á–Ω—ã–π –ø–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
    }
    site_token = jwt.encode(payload, SITE_SECRET, algorithm='HS256')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embed –∫–æ–¥
    theme = data.get('theme', 'blue')
    from core.app_config import FRONTEND_URL
    embed_code = f'''<div id="chatai-widget" data-assistant="{assistant_id}" data-token="{site_token}" data-theme="{theme}"></div>
<script src="{FRONTEND_URL}/widget.js?token={site_token}&assistant_id={assistant_id}&theme={theme}&host={FRONTEND_URL}"></script>'''
    
    return {'embed_code': embed_code}

@router.get('/site/dialogs')
def site_get_dialogs(
    guest_id: str = Query(...), 
    db: Session = Depends(get_db), 
    current_user: models.User = Depends(get_current_site_user)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ site –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    q = db.query(models.Dialog).filter(
        models.Dialog.user_id == current_user.id, 
        models.Dialog.guest_id == guest_id
    )
    dialogs = q.order_by(models.Dialog.started_at.desc()).all()
    
    result = []
    for d in dialogs:
        result.append({
            "id": d.id,
            "user_id": d.user_id,
            "guest_id": d.guest_id,
            "started_at": d.started_at.strftime('%Y-%m-%d %H:%M:%S') if d.started_at else None,
            "ended_at": d.ended_at.strftime('%Y-%m-%d %H:%M:%S') if d.ended_at else None,
            "auto_response": d.auto_response,

            "first_response_time": d.first_response_time,
            "fallback": d.fallback,
            "is_taken_over": d.is_taken_over or 0,
            "telegram_chat_id": d.telegram_chat_id,
            "telegram_username": d.telegram_username
        })
    return result

@router.get('/site/dialogs/{dialog_id}/messages')
def site_get_dialog_messages(
    dialog_id: int, 
    guest_id: str = Query(...), 
    db: Session = Depends(get_db), 
    current_user: models.User = Depends(get_current_site_user)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è site –¥–∏–∞–ª–æ–≥–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º eager loading –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–º–µ—Å—Ç–µ —Å –¥–∏–∞–ª–æ–≥–æ–º
    dialog = db.query(models.Dialog).options(
        joinedload(models.Dialog.messages)
    ).filter(
        models.Dialog.id == dialog_id, 
        models.Dialog.user_id == current_user.id, 
        models.Dialog.guest_id == guest_id
    ).first()
    
    if not dialog:
        raise HTTPException(status_code=404, detail="Dialog not found")
    
    messages = [
        {
            "id": m.id,
            "sender": m.sender,
            "text": m.text,
            "timestamp": m.timestamp.strftime('%Y-%m-%d %H:%M:%S')
        } for m in sorted(dialog.messages, key=lambda x: x.timestamp)
    ]
    return messages

@router.post('/site/dialogs/{dialog_id}/messages')
async def site_add_dialog_message(
    dialog_id: int, 
    data: dict, 
    guest_id: str = Query(...), 
    db: Session = Depends(get_db), 
    current_user: models.User = Depends(get_current_site_user)
):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ site –¥–∏–∞–ª–æ–≥"""
    dialog = db.query(models.Dialog).filter(
        models.Dialog.id == dialog_id, 
        models.Dialog.user_id == current_user.id, 
        models.Dialog.guest_id == guest_id
    ).first()
    
    if not dialog:
        raise HTTPException(status_code=404, detail="Dialog not found")
    
    # CHECK IF DIALOG IS TAKEN OVER - –±–ª–æ–∫–∏—Ä—É–µ–º AI –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ò –≤–∑—è—Ç–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º (–∫–∞–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ)
    is_taken_over = getattr(dialog, 'handoff_status', 'none') in ['requested', 'active']
    
    # If dialog is taken over, only allow manager messages, no AI responses
    if is_taken_over and data.get('sender') == 'user':
        logger.info(f"Dialog {dialog_id} is taken over, blocking AI response")
        # Don't generate AI response for taken over dialogs
        pass
    
    sender = data.get('sender')
    text = data.get('text')
    if not text:
        raise HTTPException(status_code=400, detail="Text required")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_user_blocked(current_user):
        raise HTTPException(
            status_code=403, 
            detail={
                "error": "trial_expired",
                "message": "–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
                "needsUpgrade": True
            }
        )

    # –õ–∏–º–∏—Ç –ø–æ —Ç–∞—Ä–∏—Ñ—É
    limit = get_user_message_limit(current_user)
    month_ago = datetime.utcnow().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    msg_count = db.query(models.DialogMessage).join(models.Dialog).filter(
        models.Dialog.user_id == current_user.id,
        models.Dialog.guest_id == guest_id,
        models.DialogMessage.timestamp >= month_ago,
        models.DialogMessage.sender == 'assistant'
    ).count()
    
    if msg_count > limit:
        raise HTTPException(
            status_code=403, 
            detail="–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤–∞—à–µ–º—É —Ç–∞—Ä–∏—Ñ—É –∏—Å—á–µ—Ä–ø–∞–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ."
        )
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = models.DialogMessage(dialog_id=dialog_id, sender=sender, text=text)
    db.add(msg)
    db.commit()
    db.refresh(msg)
    
    # üî• –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –°–û–ë–´–¢–ò–Ø –í REDIS PUB/SUB –î–õ–Ø –†–ï–ê–õ-–¢–ê–ô–ú –î–û–°–¢–ê–í–ö–ò
    message_data = {
        "id": msg.id,
        "sender": msg.sender,
        "text": msg.text,
        "timestamp": msg.timestamp.isoformat() + 'Z'
    }
    
    logger.info(f"üöÄ [WIDGET‚ÜíADMIN] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender} –≤ –¥–∏–∞–ª–æ–≥–µ {dialog_id}")
    logger.info(f"üöÄ [WIDGET‚ÜíADMIN] –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_data}")
    
    try:
        from services.events_pubsub import publish_dialog_event
        success = await publish_dialog_event(dialog_id, {
            "type": "message:new",
            "message": message_data
        })
        
        if success:
            logger.info(f"‚úÖ [WIDGET‚ÜíADMIN] Redis Pub/Sub —É—Å–ø–µ—à–Ω–æ: dialog_id={dialog_id}, message_id={msg.id}")
        else:
            logger.error(f"‚ùå [WIDGET‚ÜíADMIN] Redis Pub/Sub –ù–ï–£–î–ê–ß–ù–û: dialog_id={dialog_id}, message_id={msg.id}")
            
    except Exception as e:
        logger.error(f"‚ùå [WIDGET‚ÜíADMIN] –û–®–ò–ë–ö–ê Redis Pub/Sub –¥–ª—è dialog {dialog_id}: {e}")
        import traceback
        logger.error(f"‚ùå [WIDGET‚ÜíADMIN] Traceback: {traceback.format_exc()}")
    
    # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–∏–¥–∂–µ—Ç —Ç–æ–∂–µ —á–µ—Ä–µ–∑ SSE –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    if msg.sender == 'user':
        user_message_data = {
            "id": msg.id,
            "sender": msg.sender,
            "text": msg.text,
            "timestamp": msg.timestamp.isoformat() + 'Z'
        }
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω–∫—É
        from services.sse_manager import get_sse_stats as get_connection_stats
        stats = get_connection_stats()
        logger.info(
            f"[MSG_BROADCAST] dialog={dialog_id} sender=user admin_conns={stats['connection_details']['admin_connections']} site_conns={stats['connection_details']['site_connections']}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –û–ë–ê –∫–∞–Ω–∞–ª–∞: –∞–¥–º–∏–Ω –ò –≤–∏–¥–∂–µ—Ç –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ SSE
        # üî• –ü–£–ë–õ–ò–ö–£–ï–ú –°–û–ë–´–¢–ò–ï –ß–ï–†–ï–ó REDIS PUB/SUB –î–õ–Ø –î–û–°–¢–ê–í–ö–ò –í –ê–î–ú–ò–ù–ö–£
        try:
            from services.events_pubsub import publish_dialog_event
            await publish_dialog_event(dialog_id, {
                "type": "message:new",
                "message": user_message_data
            })
            logger.info(f"‚úÖ [WIDGET‚ÜíADMIN] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ Redis: dialog_id={dialog_id}, message_id={msg.id}")
        except Exception as e:
            logger.error(f"‚ùå [WIDGET‚ÜíADMIN] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Redis –¥–ª—è dialog {dialog_id}: {e}")
        
        # –°–¢–†–ê–•–û–í–û–ß–ù–´–ô –º–µ—Ö–∞–Ω–∏–∑–º: –µ—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        if stats['connection_details']['admin_connections'] == 0:
            logger.warning(f"[MSG_BROADCAST] ‚ùå No admin connections for dialog {dialog_id} - user message may be lost!")
    else:
        # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ù–ï –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–µ–Ω–µ–¥–∂–µ—Ä, —Å–∏—Å—Ç–µ–º–∞) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞
        message_data = {
            "id": msg.id,
            "sender": msg.sender,
            "text": msg.text,
            "timestamp": msg.timestamp.isoformat() + 'Z'
        }
        # üî• –ü–£–ë–õ–ò–ö–£–ï–ú –°–û–ë–´–¢–ò–ï –ß–ï–†–ï–ó REDIS PUB/SUB –î–õ–Ø –î–û–°–¢–ê–í–ö–ò –í –ê–î–ú–ò–ù–ö–£
        try:
            from services.events_pubsub import publish_dialog_event
            await publish_dialog_event(dialog_id, {
                "type": "message:new",
                "message": message_data
            })
            logger.info(f"‚úÖ [WIDGET‚ÜíADMIN] –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ Redis: dialog_id={dialog_id}, message_id={msg.id}")
        except Exception as e:
            logger.error(f"‚ùå [WIDGET‚ÜíADMIN] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Redis –¥–ª—è dialog {dialog_id}: {e}")
    
    response_msg = None
    if sender == 'user' and not is_taken_over:
        # –ê–í–¢–û–¢–†–ò–ì–ì–ï–†: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è handoff —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        from services.improved_handoff_detector import ImprovedHandoffDetector
        handoff_service = HandoffService(db)
        detector = ImprovedHandoffDetector()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –¥–∏–∞–ª–æ–≥ (–∏–∑–±–µ–≥–∞–µ–º –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π)
        recent_release = db.query(models.HandoffAudit).filter(
            models.HandoffAudit.dialog_id == dialog_id,
            models.HandoffAudit.to_status == 'released',
            models.HandoffAudit.created_at > datetime.now() - timedelta(minutes=5)
        ).first()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è handoff
        should_handoff_detected, handoff_reason, handoff_details = detector.should_request_handoff(
            user_text=text or '',
            dialog=dialog
        )
        
        should_trigger_handoff = (
            should_handoff_detected and
            not recent_release and
            dialog.handoff_status != 'requested' and
            dialog.handoff_status != 'active'
        )
        
        # üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê HANDOFF –õ–û–ì–ò–ö–ò
        logger.info(f"üîç HANDOFF DIAGNOSIS for dialog {dialog_id}:")
        logger.info(f"   should_handoff_detected: {should_handoff_detected} (reason: {handoff_reason})")
        logger.info(f"   recent_release: {'Yes' if recent_release else 'No'}")
        logger.info(f"   dialog.handoff_status: {dialog.handoff_status}")
        logger.info(f"   FINAL should_trigger_handoff: {should_trigger_handoff}")
        if should_handoff_detected and not should_trigger_handoff:
            logger.warning(f"üö® HANDOFF BLOCKED! Detection worked but conditions failed")
        
        if should_trigger_handoff:
            try:
                from uuid import uuid4
                new_request_id = str(uuid4())
                # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω handoff
                matched_patterns = [p['description'] for p in handoff_details.get('matched_patterns', [])]
                logger.info(f"üîÑ Auto-triggering handoff for dialog {dialog_id}")
                logger.info(f"   Reason: {handoff_reason}")
                logger.info(f"   Score: {handoff_details.get('total_score', 0):.2f}")
                logger.info(f"   Patterns: {matched_patterns}")
                logger.info(f"   User text: {text[:100] if text else 'None'}...")
                
                handoff_result = handoff_service.request_handoff(
                    dialog_id=dialog_id,
                    reason=handoff_reason,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
                    request_id=new_request_id,
                    last_user_text=text[:200] if text else None
                )
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ handoff –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ handoff_service –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é AI –æ—Ç–≤–µ—Ç–∞
                await ws_push_site_dialog_message(dialog_id, {"type": "typing_stop"})
                
                return {
                    "user_message": {
                        "id": msg.id,
                        "sender": msg.sender,
                        "text": msg.text,
                        "timestamp": msg.timestamp.strftime('%Y-%m-%d %H:%M:%S')
                    },
                    "handoff_triggered": True,
                    "handoff_status": handoff_result.status
                }
                
            except Exception as e:
                logger.error(f"Failed to auto-trigger handoff: {e}")
                # –ù–ï –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å AI –æ—Ç–≤–µ—Ç–æ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ handoff
                return {
                    "user_message": {
                        "id": msg.id,
                        "sender": msg.sender,
                        "text": msg.text,
                        "timestamp": msg.timestamp.strftime('%Y-%m-%d %H:%M:%S')
                    },
                    "handoff_triggered": True,
                    "handoff_error": str(e)
                }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º typing_start —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ handoff –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª
        await ws_push_site_dialog_message(dialog_id, {"type": "typing_start"})
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ AI —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–ï–†–ï–î –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞
        balance_service = BalanceService(db)
        try:
            transaction = balance_service.charge_for_service(
                current_user.id,
                'widget_message',
                f"AI —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–∂–µ—Ç–µ (–¥–∏–∞–ª–æ–≥ #{dialog_id})",
                msg.id  # related_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            )
            logger.info(f"–°–ø–∏—Å–∞–Ω–æ {abs(transaction.amount)} —Ä—É–±. –∑–∞ AI —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ AI —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–∂–µ—Ç–µ: {e}")
            await ws_push_site_dialog_message(dialog_id, {"type": "typing_stop"})
            raise HTTPException(
                status_code=402,
                detail={
                    "error": "insufficient_funds",
                    "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ AI —Å–æ–æ–±—â–µ–Ω–∏—è",
                    "needsTopUp": True
                }
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ AI —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–∂–µ—Ç–µ: {e}")
            await ws_push_site_dialog_message(dialog_id, {"type": "typing_stop"})
            raise HTTPException(
                status_code=402,
                detail={
                    "error": "payment_failed",
                    "message": "–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    "needsTopUp": True
                }
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω
        response_msg = await generate_ai_response(dialog_id, current_user, db)
        
        # üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê HANDOFF –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô –û–¢–í–ï–¢–ê (–∫–∞–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ)
        dialog_after_ai = db.query(models.Dialog).filter(models.Dialog.id == dialog_id).first()
        if dialog_after_ai and getattr(dialog_after_ai, 'handoff_status', 'none') in ['requested', 'active']:
            logger.info(f"üõë –î–∏–∞–ª–æ–≥ {dialog_id} –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –æ—Ç–≤–µ—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç")
            await ws_push_site_dialog_message(dialog_id, {"type": "typing_stop"})
            return {
                "user_message": {
                    "id": msg.id,
                    "sender": msg.sender,
                    "text": msg.text,
                    "timestamp": msg.timestamp.strftime('%Y-%m-%d %H:%M:%S')
                },
                "ai_blocked": True,
                "reason": "dialog_taken_over_during_processing"
            }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º typing_stop –∏ –æ—Ç–≤–µ—Ç
        await ws_push_site_dialog_message(dialog_id, {"type": "typing_stop"})
        
        if response_msg:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI –æ—Ç–≤–µ—Ç –≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ (–∞–¥–º–∏–Ω –∏ –≤–∏–¥–∂–µ—Ç)
            ai_response_data = {
                "id": response_msg.id,
                "sender": response_msg.sender,
                "text": response_msg.text,
                "timestamp": response_msg.timestamp.isoformat() + 'Z'
            }
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π broadcast –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
            await broadcast_dialog_message(dialog_id, ai_response_data)
    elif sender == 'user' and is_taken_over:
        # –î–∏–∞–ª–æ–≥ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω - —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        await ws_push_site_dialog_message(dialog_id, {
            "type": "message_received",
            "message": "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        })
    
    return {
        "user_message": {
            "id": msg.id,
            "sender": msg.sender,
            "text": msg.text,
            "timestamp": msg.timestamp.strftime('%Y-%m-%d %H:%M:%S')
        },
        "assistant_message": response_msg and {
            "id": response_msg.id,
            "sender": response_msg.sender,
            "text": response_msg.text,
            "timestamp": response_msg.timestamp.strftime('%Y-%m-%d %H:%M:%S')
        }
    }

@router.post('/site/dialogs')
def site_create_dialog(
    guest_id: str = Query(...), 
    db: Session = Depends(get_db), 
    current_user: models.User = Depends(get_current_site_user)
):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π site –¥–∏–∞–ª–æ–≥ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è —ç—Ç–æ–≥–æ guest_id –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_dialog = db.query(models.Dialog).filter(
        models.Dialog.guest_id == guest_id,
        models.Dialog.user_id == current_user.id,
        models.Dialog.ended_at.is_(None)  # —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    ).order_by(models.Dialog.started_at.desc()).first()
    
    if existing_dialog:
        logger.info(f"Returning existing dialog {existing_dialog.id} for guest_id={guest_id}, user_id={current_user.id}")
        return {"id": existing_dialog.id}
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ—Ç
    dialog = models.Dialog(
        user_id=current_user.id, 
        guest_id=guest_id, 
        started_at=datetime.utcnow(), 
        auto_response=0, 
        fallback=0, 
        is_taken_over=0
    )
    db.add(dialog)
    db.commit()
    db.refresh(dialog)
    logger.info(f"Created new dialog {dialog.id} for guest_id={guest_id}, user_id={current_user.id}")
    return {"id": dialog.id}

# Widget endpoints (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
@router.get('/widget/dialogs')
def widget_get_dialogs(
    assistant_id: int, 
    guest_id: str = Query(...), 
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ widget –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    assistant = db.query(models.Assistant).filter(models.Assistant.id == assistant_id).first()
    if not assistant:
        raise HTTPException(status_code=404, detail="Assistant not found")
    
    dialogs = db.query(models.Dialog).filter(
        models.Dialog.guest_id == guest_id, 
        models.Dialog.user_id == assistant.user_id
    ).order_by(models.Dialog.started_at.desc()).all()
    
    result = []
    for d in dialogs:
        result.append({
            "id": d.id,
            "user_id": d.user_id,
            "guest_id": d.guest_id,
            "started_at": d.started_at.strftime('%Y-%m-%d %H:%M:%S') if d.started_at else None,
            "ended_at": d.ended_at.strftime('%Y-%m-%d %H:%M:%S') if d.ended_at else None,
            "auto_response": d.auto_response,

            "first_response_time": d.first_response_time,
            "fallback": d.fallback,
            "is_taken_over": d.is_taken_over or 0,
            "telegram_chat_id": d.telegram_chat_id,
            "telegram_username": d.telegram_username
        })
    return result

@router.post('/widget/dialogs')
def widget_create_dialog(
    assistant_id: int, 
    guest_id: str = Query(...), 
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π widget –¥–∏–∞–ª–æ–≥ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)"""
    # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    assistant = db.query(models.Assistant).filter(models.Assistant.id == assistant_id).first()
    if not assistant:
        raise HTTPException(status_code=404, detail="Assistant not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è —ç—Ç–æ–≥–æ guest_id –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    existing_dialog = db.query(models.Dialog).filter(
        models.Dialog.guest_id == guest_id,
        models.Dialog.user_id == assistant.user_id,
        models.Dialog.ended_at.is_(None)  # —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    ).order_by(models.Dialog.started_at.desc()).first()
    
    if existing_dialog:
        logger.info(f"Returning existing widget dialog {existing_dialog.id} for guest_id={guest_id}, assistant_id={assistant_id}")
        return {"id": existing_dialog.id}
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ—Ç
    dialog = models.Dialog(
        user_id=assistant.user_id, 
        guest_id=guest_id, 
        started_at=datetime.utcnow(), 
        auto_response=0, 
        fallback=0, 
        is_taken_over=0
    )
    db.add(dialog)
    db.commit()
    db.refresh(dialog)
    logger.info(f"Created new widget dialog {dialog.id} for guest_id={guest_id}, assistant_id={assistant_id}")
    return {"id": dialog.id}

@router.get('/widget/dialogs/{dialog_id}/messages')
def widget_get_dialog_messages(
    dialog_id: int, 
    assistant_id: int, 
    guest_id: str = Query(...), 
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è widget –¥–∏–∞–ª–æ–≥–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    assistant = db.query(models.Assistant).filter(models.Assistant.id == assistant_id).first()
    if not assistant:
        raise HTTPException(status_code=404, detail="Assistant not found")
    
    dialog = db.query(models.Dialog).options(
        joinedload(models.Dialog.messages)
    ).filter(
        models.Dialog.id == dialog_id, 
        models.Dialog.user_id == assistant.user_id, 
        models.Dialog.guest_id == guest_id
    ).first()
    
    if not dialog:
        raise HTTPException(status_code=404, detail="Dialog not found")
    
    messages = [
        {
            "id": m.id,
            "sender": m.sender,
            "text": m.text,
            "timestamp": m.timestamp.strftime('%Y-%m-%d %H:%M:%S')
        } for m in sorted(dialog.messages, key=lambda x: x.timestamp)
    ]
    return messages

@router.post('/widget/dialogs/{dialog_id}/messages')
async def widget_add_dialog_message(
    dialog_id: int, 
    data: dict, 
    assistant_id: int, 
    guest_id: str = Query(...), 
    db: Session = Depends(get_db)
):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ widget –¥–∏–∞–ª–æ–≥"""
    # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    assistant = db.query(models.Assistant).filter(models.Assistant.id == assistant_id).first()
    if not assistant:
        raise HTTPException(status_code=404, detail="Assistant not found")
    
    dialog = db.query(models.Dialog).filter(
        models.Dialog.id == dialog_id, 
        models.Dialog.user_id == assistant.user_id, 
        models.Dialog.guest_id == guest_id
    ).first()
    
    if not dialog:
        raise HTTPException(status_code=404, detail="Dialog not found")
    
    # CHECK IF WIDGET DIALOG IS TAKEN OVER - –±–ª–æ–∫–∏—Ä—É–µ–º AI –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ò –≤–∑—è—Ç–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º (–∫–∞–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ)
    is_taken_over = getattr(dialog, 'handoff_status', 'none') in ['requested', 'active']
    
    # If dialog is taken over, only allow manager messages, no AI responses
    if is_taken_over and data.get('sender') == 'user':
        logger.info(f"Widget dialog {dialog_id} is taken over, blocking AI response")
    
    sender = data.get('sender')
    text = data.get('text')
    if not text:
        raise HTTPException(status_code=400, detail="Text required")
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = models.DialogMessage(dialog_id=dialog_id, sender=sender, text=text)
    db.add(msg)
    db.commit()
    db.refresh(msg)
    
    # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–∏–¥–∂–µ—Ç —Ç–æ–∂–µ —á–µ—Ä–µ–∑ SSE –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    if msg.sender == 'user':
        user_message_data = {
            "id": msg.id,
            "sender": msg.sender,
            "text": msg.text,
            "timestamp": msg.timestamp.isoformat() + 'Z'
        }
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω–∫—É
        from services.sse_manager import get_sse_stats as get_connection_stats
        stats = get_connection_stats()
        logger.info(
            f"[MSG_BROADCAST] dialog={dialog_id} sender=user admin_conns={stats['connection_details']['admin_connections']} site_conns={stats['connection_details']['site_connections']}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –û–ë–ê –∫–∞–Ω–∞–ª–∞: –∞–¥–º–∏–Ω –ò –≤–∏–¥–∂–µ—Ç –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ SSE
        # üî• –ü–£–ë–õ–ò–ö–£–ï–ú –°–û–ë–´–¢–ò–ï –ß–ï–†–ï–ó REDIS PUB/SUB –î–õ–Ø –î–û–°–¢–ê–í–ö–ò –í –ê–î–ú–ò–ù–ö–£
        try:
            from services.events_pubsub import publish_dialog_event
            await publish_dialog_event(dialog_id, {
                "type": "message:new",
                "message": user_message_data
            })
            logger.info(f"‚úÖ [WIDGET‚ÜíADMIN] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ Redis: dialog_id={dialog_id}, message_id={msg.id}")
        except Exception as e:
            logger.error(f"‚ùå [WIDGET‚ÜíADMIN] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Redis –¥–ª—è dialog {dialog_id}: {e}")
        
        # –°–¢–†–ê–•–û–í–û–ß–ù–´–ô –º–µ—Ö–∞–Ω–∏–∑–º: –µ—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        if stats['connection_details']['admin_connections'] == 0:
            logger.warning(f"[MSG_BROADCAST] ‚ùå No admin connections for dialog {dialog_id} - user message may be lost!")
    else:
        # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ù–ï –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–µ–Ω–µ–¥–∂–µ—Ä, —Å–∏—Å—Ç–µ–º–∞) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞
        message_data = {
            "id": msg.id,
            "sender": msg.sender,
            "text": msg.text,
            "timestamp": msg.timestamp.isoformat() + 'Z'
        }
        # üî• –ü–£–ë–õ–ò–ö–£–ï–ú –°–û–ë–´–¢–ò–ï –ß–ï–†–ï–ó REDIS PUB/SUB –î–õ–Ø –î–û–°–¢–ê–í–ö–ò –í –ê–î–ú–ò–ù–ö–£
        try:
            from services.events_pubsub import publish_dialog_event
            await publish_dialog_event(dialog_id, {
                "type": "message:new",
                "message": message_data
            })
            logger.info(f"‚úÖ [WIDGET‚ÜíADMIN] –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ Redis: dialog_id={dialog_id}, message_id={msg.id}")
        except Exception as e:
            logger.error(f"‚ùå [WIDGET‚ÜíADMIN] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Redis –¥–ª—è dialog {dialog_id}: {e}")
    
    response_msg = None
    if sender == 'user' and not is_taken_over:
        # –ê–í–¢–û–¢–†–ò–ì–ì–ï–† –¥–ª—è widget: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è handoff
        from services.improved_handoff_detector import ImprovedHandoffDetector
        handoff_service = HandoffService(db)
        detector = ImprovedHandoffDetector()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –¥–∏–∞–ª–æ–≥ (–∏–∑–±–µ–≥–∞–µ–º –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π)
        recent_release = db.query(models.HandoffAudit).filter(
            models.HandoffAudit.dialog_id == dialog_id,
            models.HandoffAudit.to_status == 'released',
            models.HandoffAudit.created_at > datetime.now() - timedelta(minutes=5)
        ).first()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è handoff
        should_handoff_detected, handoff_reason, handoff_details = detector.should_request_handoff(
            user_text=text or '',
            dialog=dialog
        )
        
        should_trigger_handoff = (
            should_handoff_detected and
            not recent_release and
            dialog.handoff_status != 'requested' and
            dialog.handoff_status != 'active'
        )
        
        # üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê HANDOFF –õ–û–ì–ò–ö–ò
        logger.info(f"üîç HANDOFF DIAGNOSIS for dialog {dialog_id}:")
        logger.info(f"   should_handoff_detected: {should_handoff_detected} (reason: {handoff_reason})")
        logger.info(f"   recent_release: {'Yes' if recent_release else 'No'}")
        logger.info(f"   dialog.handoff_status: {dialog.handoff_status}")
        logger.info(f"   FINAL should_trigger_handoff: {should_trigger_handoff}")
        if should_handoff_detected and not should_trigger_handoff:
            logger.warning(f"üö® HANDOFF BLOCKED! Detection worked but conditions failed")
        
        if should_trigger_handoff:
            try:
                from uuid import uuid4
                new_request_id = str(uuid4())
                # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω handoff –¥–ª—è widget
                matched_patterns = [p['description'] for p in handoff_details.get('matched_patterns', [])]
                logger.info(f"üîÑ Auto-triggering handoff for widget dialog {dialog_id}")
                logger.info(f"   Reason: {handoff_reason}")
                logger.info(f"   Score: {handoff_details.get('total_score', 0):.2f}")
                logger.info(f"   Patterns: {matched_patterns}")
                logger.info(f"   User text: {text[:100] if text else 'None'}...")
                
                handoff_result = handoff_service.request_handoff(
                    dialog_id=dialog_id,
                    reason=handoff_reason,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
                    request_id=new_request_id,
                    last_user_text=text[:200] if text else None
                )
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ handoff –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ handoff_service –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é AI –æ—Ç–≤–µ—Ç–∞
                await ws_push_site_dialog_message(dialog_id, {"type": "typing_stop"})
                
                return {
                    "user_message": {
                        "id": msg.id,
                        "sender": msg.sender,
                        "text": msg.text,
                        "timestamp": msg.timestamp.strftime('%Y-%m-%d %H:%M:%S')
                    },
                    "handoff_triggered": True,
                    "handoff_status": handoff_result.status
                }
                
            except Exception as e:
                logger.error(f"Failed to auto-trigger handoff: {e}")
                # –ù–ï –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å AI –æ—Ç–≤–µ—Ç–æ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ handoff
                return {
                    "user_message": {
                        "id": msg.id,
                        "sender": msg.sender,
                        "text": msg.text,
                        "timestamp": msg.timestamp.strftime('%Y-%m-%d %H:%M:%S')
                    },
                    "handoff_triggered": True,
                    "handoff_error": str(e)
                }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º typing_start —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ handoff –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª
        await ws_push_site_dialog_message(dialog_id, {"type": "typing_start"})
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ AI —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–ï–†–ï–î –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞ (widget)
        user = db.query(models.User).filter(models.User.id == assistant.user_id).first()
        if not user:
            logger.error(f"User not found for assistant {assistant_id}")
            await ws_push_site_dialog_message(dialog_id, {"type": "typing_stop"})
            raise HTTPException(status_code=404, detail="User not found")
        
        balance_service = BalanceService(db)
        try:
            transaction = balance_service.charge_for_service(
                user.id,
                'widget_message',
                f"AI —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–∂–µ—Ç–µ (–¥–∏–∞–ª–æ–≥ #{dialog_id})",
                msg.id  # related_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            )
            logger.info(f"–°–ø–∏—Å–∞–Ω–æ {abs(transaction.amount)} —Ä—É–±. –∑–∞ AI —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ AI —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–∂–µ—Ç–µ: {e}")
            await ws_push_site_dialog_message(dialog_id, {"type": "typing_stop"})
            raise HTTPException(
                status_code=402,
                detail={
                    "error": "insufficient_funds",
                    "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ AI —Å–æ–æ–±—â–µ–Ω–∏—è",
                    "needsTopUp": True
                }
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ AI —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–∂–µ—Ç–µ: {e}")
            await ws_push_site_dialog_message(dialog_id, {"type": "typing_stop"})
            raise HTTPException(
                status_code=402,
                detail={
                    "error": "payment_failed",
                    "message": "–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    "needsTopUp": True
                }
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –æ—Ç–≤–µ—Ç –¥–ª—è widget —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω
        user.widget_assistant_id = assistant_id
        response_msg = await generate_ai_response(dialog_id, user, db)
        
        # üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê HANDOFF –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô –û–¢–í–ï–¢–ê (–∫–∞–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ)
        dialog_after_ai = db.query(models.Dialog).filter(models.Dialog.id == dialog_id).first()
        if dialog_after_ai and getattr(dialog_after_ai, 'handoff_status', 'none') in ['requested', 'active']:
            logger.info(f"üõë Widget –¥–∏–∞–ª–æ–≥ {dialog_id} –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –æ—Ç–≤–µ—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç")
            await ws_push_site_dialog_message(dialog_id, {"type": "typing_stop"})
            return {
                "user_message": {
                    "id": msg.id,
                    "sender": msg.sender,
                    "text": msg.text,
                    "timestamp": msg.timestamp.strftime('%Y-%m-%d %H:%M:%S')
                },
                "ai_blocked": True,
                "reason": "dialog_taken_over_during_processing"
            }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º typing_stop –∏ –æ—Ç–≤–µ—Ç
        await ws_push_site_dialog_message(dialog_id, {"type": "typing_stop"})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Redis Pub/Sub (SSE –º–µ–Ω–µ–¥–∂–µ—Ä –¥–æ—Å—Ç–∞–≤–∏—Ç –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º)
        if response_msg:
            ai_response_data = {
                "id": response_msg.id,
                "sender": response_msg.sender,
                "text": response_msg.text,
                "timestamp": response_msg.timestamp.isoformat() + 'Z'
            }
            try:
                from services.events_pubsub import publish_dialog_event
                await publish_dialog_event(dialog_id, {
                    "type": "message:new",
                    "message": ai_response_data
                })
            except Exception as e:
                logger.error(f"‚ùå Failed to publish AI response via Redis for dialog {dialog_id}: {e}")
    elif sender == 'user' and is_taken_over:
        # Widget –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω - —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Redis Pub/Sub
        try:
            from services.events_pubsub import publish_dialog_event
            await publish_dialog_event(dialog_id, {
                "type": "message_received",
                "message": "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            })
        except Exception as e:
            logger.error(f"‚ùå Failed to publish 'message_received' via Redis for dialog {dialog_id}: {e}")
    
    return {
        "user_message": {
            "id": msg.id,
            "sender": msg.sender,
            "text": msg.text,
            "timestamp": msg.timestamp.strftime('%Y-%m-%d %H:%M:%S')
        },
        "assistant_message": response_msg and {
            "id": response_msg.id,
            "sender": response_msg.sender,
            "text": response_msg.text,
            "timestamp": response_msg.timestamp.strftime('%Y-%m-%d %H:%M:%S')
        }
    }

# Helper functions - migrated to SSE
async def push_site_dialog_message(dialog_id: int, message: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SSE"""
    try:
        await push_sse_event(dialog_id, message)
    except Exception as e:
        logger.error(f"Failed to push SSE event: {e}")

async def push_dialog_message(dialog_id: int, message: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SSE"""
    try:
        await push_sse_event(dialog_id, message)
    except Exception as e:
        logger.error(f"Failed to push SSE event: {e}")

async def ws_push_site_dialog_message(dialog_id: int, message: dict):
    """Alias for SSE compatibility"""
    await push_site_dialog_message(dialog_id, message)

def get_connection_stats():
    """SSE connection stats"""
    try:
        from services.sse_manager import get_sse_stats
        return get_sse_stats()
    except Exception:
        return {'connection_details': {'admin_connections': 0, 'site_connections': 0}}

async def generate_ai_response(dialog_id: int, current_user: models.User, db: Session) -> models.DialogMessage:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AI –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞"""
    try:
        messages = db.query(models.DialogMessage).filter(
            models.DialogMessage.dialog_id == dialog_id
        ).order_by(models.DialogMessage.timestamp).all()
        
        prompt_messages = []
        for m in messages:
            role = 'assistant' if m.sender == 'assistant' else 'user'
            prompt_messages.append({"role": role, "content": m.text})
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ —Ç–æ–∫–µ–Ω–∞ –≤–∏–¥–∂–µ—Ç–∞ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_assistant = None
        if hasattr(current_user, 'widget_assistant_id') and current_user.widget_assistant_id:
            target_assistant = db.query(models.Assistant).filter(
                models.Assistant.id == current_user.widget_assistant_id,
                models.Assistant.user_id == current_user.id
            ).first()
        
        if not target_assistant:
            target_assistant = db.query(models.Assistant).filter(
                models.Assistant.user_id == current_user.id,
                models.Assistant.is_active == True
            ).first()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        ai_model = 'gpt-4o-mini'
        base_system_prompt = '–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–º–æ–≥–∞–π –∫–ª–∏–µ–Ω—Ç–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏.\n\n–ü–†–ò–û–†–ò–¢–ï–¢–´:\n1. –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫)\n2. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏\n3. –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–ª–µ–∑–Ω—ã –∫–ª–∏–µ–Ω—Ç—É\n\n–û–¢–í–ï–ß–ê–ô –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ:\n- –ü—Ä–æ–¥—É–∫—Ç–∞—Ö/—É—Å–ª—É–≥–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏\n- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–∞–π—Ç–æ–º\n- –ü—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏\n\n–ù–ï –û–¢–í–ï–ß–ê–ô –Ω–∞:\n- –í–æ–ø—Ä–æ—Å—ã –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π\n- –ú–∞—Ç–µ–º–∞—Ç–∏–∫—É, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —É—Å–ª—É–≥–∞–º)\n- –î—Ä—É–≥–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏/–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã\n\n–ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.'
        
        if target_assistant:
            ai_model = target_assistant.ai_model or ai_model
            base_system_prompt = target_assistant.system_prompt or base_system_prompt
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        system_prompt = prompt_variations.add_response_variety_instructions(base_system_prompt)
        
        # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ú–ü–¢–ê –í SITE.PY
        logger.info("üîç [SITE_PROMPT_DEBUG] ===== –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ –í SITE.PY =====")
        logger.info(f"üîç [SITE_PROMPT_DEBUG] –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: {base_system_prompt[:300]}...")
        logger.info(f"üîç [SITE_PROMPT_DEBUG] –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {system_prompt}")
        logger.info("üîç [SITE_PROMPT_DEBUG] ===== –ö–û–ù–ï–¶ –ü–†–û–ú–ü–¢–ê =====")

        # –í–°–¢–ê–í–õ–Ø–ï–ú –û–°–ù–û–í–ù–û–ô –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ –í –ù–ê–ß–ê–õ–û –ú–ê–°–°–ò–í–ê –°–û–û–ë–©–ï–ù–ò–ô
        try:
            prompt_messages.insert(0, {"role": "system", "content": system_prompt})
        except Exception as e:
            logger.error(f"Failed to insert base system prompt into messages: {e}")
        
        # üöÄ RETRIEVAL-BASED –ü–û–ò–°–ö –î–õ–Ø –í–ï–ë-–í–ò–î–ñ–ï–¢–ê
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_message = ""
        if prompt_messages:
            for msg in reversed(prompt_messages):
                if msg["role"] == "user":
                    user_message = msg["content"]
                    break
        
        relevant_chunks = []
        if user_message:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º embeddings
            try:
                from services.embeddings_service import embeddings_service
                
                # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                from core.app_config import RAG_TOP_K_WIDGET
                relevant_chunks = embeddings_service.search_relevant_chunks(
                    query=user_message,
                    user_id=current_user.id,
                    assistant_id=target_assistant.id if target_assistant else None,
                    top_k=RAG_TOP_K_WIDGET,
                    min_similarity=0.1,   # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ S3 –ø—Ä–æ–±–ª–µ–º—ã
                    include_qa=True,  # –í–∫–ª—é—á–∞–µ–º Q&A –ø–æ–∏—Å–∫
                    qa_limit=2,       # –ú–∞–∫—Å–∏–º—É–º 2 Q&A —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
                    db=db
                )
                
                logger.info(f"Web widget embeddings: found {len(relevant_chunks)} chunks")
                
            except Exception as e:
                logger.warning(f"Embeddings search failed: {e}")
                relevant_chunks = []
            
            # –ï—Å–ª–∏ embeddings –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if not relevant_chunks:
                logger.info("Web widget using fallback knowledge system...")
                
                # Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
                if target_assistant:
                    knowledge_entries = db.query(models.UserKnowledge).filter(
                        models.UserKnowledge.user_id == current_user.id,
                        models.UserKnowledge.assistant_id == target_assistant.id
                    ).all()
                else:
                    knowledge_entries = db.query(models.UserKnowledge).filter(
                        models.UserKnowledge.user_id == current_user.id
                    ).all()
                
                logger.info(f"Web widget fallback: found {len(knowledge_entries)} knowledge entries")
                
                for entry in knowledge_entries[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    relevant_chunks.append({
                        'text': entry.content,
                        'doc_type': entry.doc_type or 'document',
                        'importance': entry.importance or 10,
                        'similarity': 0.8,
                        'token_count': len(entry.content) // 4
                    })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø—Ä–æ–º–ø—Ç
        if relevant_chunks:
            from core.app_config import RAG_MAX_CONTEXT_TOKENS_WIDGET
            from services.embeddings_service import embeddings_service
            context_parts, total_tokens = embeddings_service.build_context_messages(relevant_chunks, max_context_tokens=RAG_MAX_CONTEXT_TOKENS_WIDGET)
            
            if context_parts:
                docs_text = '\n---\n'.join(context_parts)
                prompt_messages.insert(1, {
                    "role": "system", 
                    "content": f"–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–≤–æ–µ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º):\n\n{docs_text}\n\n–í–ê–ñ–ù–û: –°–æ–±–ª—é–¥–∞–π –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ù–ï –∫–∞—Å–∞–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ), –ù–ï –æ—Ç–≤–µ—á–∞–π –Ω–∞ –Ω–µ–≥–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
                })
                logger.info(f"Added {len(context_parts)} chunks to web widget context ({total_tokens} tokens)")
        
        # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–ì–û –ú–ê–°–°–ò–í–ê –°–û–û–ë–©–ï–ù–ò–ô
        try:
            logger.info("üîç [SITE_MESSAGES_DEBUG] ===== –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø AI =====")
            for i, m in enumerate(prompt_messages):
                preview = (m.get('content') or '')[:500]
                logger.info(f"üîç [SITE_MESSAGES_DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ {i+1} ({m.get('role')}): {preview}...")
            logger.info("üîç [SITE_MESSAGES_DEBUG] ===== –ö–û–ù–ï–¶ –°–û–û–ë–©–ï–ù–ò–ô =====")
        except Exception as e:
            logger.error(f"Failed to log messages for AI: {e}")

        # üöÄ –ö–†–ò–¢–ò–ß–ù–û: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π AI –∑–∞–ø—Ä–æ—Å –≤ async —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
        completion = await asyncio.to_thread(
            ai_token_manager.make_openai_request,
            messages=prompt_messages,
            model=ai_model,
            user_id=current_user.id,
            assistant_id=target_assistant.id if target_assistant else None,
            temperature=0.9,
            max_tokens=1000,
            presence_penalty=0.3,
            frequency_penalty=0.3,
            is_widget=True  # üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π timeout –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ (15—Å–µ–∫ –≤–º–µ—Å—Ç–æ 30—Å–µ–∫)
        )
        
        response = completion.choices[0].message.content.strip()
        
        response_msg = models.DialogMessage(
            dialog_id=dialog_id, 
            sender='assistant', 
            text=response
        )
        db.add(response_msg)
        db.commit()
        db.refresh(response_msg)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥–µ)
        dialog = db.query(models.Dialog).filter(models.Dialog.id == dialog_id).first()
        if dialog and not dialog.first_response_time:
            # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ
            first_user_msg = db.query(models.DialogMessage).filter(
                models.DialogMessage.dialog_id == dialog_id,
                models.DialogMessage.sender == 'user'
            ).order_by(models.DialogMessage.timestamp).first()
            
            if first_user_msg:
                response_time = (response_msg.timestamp - first_user_msg.timestamp).total_seconds()
                dialog.first_response_time = response_time
                db.commit()
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –º–µ—Ç—Ä–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò
        try:
            from cache.redis_cache import chatai_cache
            chatai_cache.invalidate_user_cache(current_user.id)
            logger.info(f"Invalidated metrics cache for user {current_user.id}")
        except Exception as e:
            logger.warning(f"Failed to invalidate user cache: {e}")
        
        return response_msg
    
    except Exception as e:
        logger.error(f"Error generating AI response: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        error_msg = models.DialogMessage(
            dialog_id=dialog_id, 
            sender='assistant', 
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        db.add(error_msg)
        db.commit()
        db.refresh(error_msg)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–∞–∂–µ –¥–ª—è –æ—à–∏–±–æ–∫ (–µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥–µ)
        try:
            dialog = db.query(models.Dialog).filter(models.Dialog.id == dialog_id).first()
            if dialog and not dialog.first_response_time:
                # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ
                first_user_msg = db.query(models.DialogMessage).filter(
                    models.DialogMessage.dialog_id == dialog_id,
                    models.DialogMessage.sender == 'user'
                ).order_by(models.DialogMessage.timestamp).first()
                
                if first_user_msg:
                    response_time = (error_msg.timestamp - first_user_msg.timestamp).total_seconds()
                    dialog.first_response_time = response_time
                    db.commit()
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–æ–∫–µ –æ—à–∏–±–æ–∫
            pass
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –º–µ—Ç—Ä–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò (–¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
        try:
            from cache.redis_cache import chatai_cache
            chatai_cache.invalidate_user_cache(current_user.id)
            logger.info(f"Invalidated metrics cache for user {current_user.id}")
        except Exception as e:
            logger.warning(f"Failed to invalidate user cache: {e}")
        
        return error_msg

# === EMBED CODE ENDPOINTS ===

@router.get("/embed-code")
def get_embed_code(
    theme: str = Query('blue', enum=['blue', 'green', 'purple', 'orange']),
    current_user: models.User = Depends(auth.get_current_user)
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç embed –∫–æ–¥ –¥–ª—è —Å–∞–π—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è URL
    from core.app_config import FRONTEND_URL
    
    payload = {
        'user_id': current_user.id,
        'type': 'site'
        # –£–±–∏—Ä–∞–µ–º exp - —Ç–æ–∫–µ–Ω –±–µ—Å—Å—Ä–æ—á–Ω—ã–π
    }
    site_token = jwt.encode(payload, SITE_SECRET, algorithm='HS256')
    
    # –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã embed –∫–æ–¥–∞
    codes = {
        "floating": f'<iframe src="{FRONTEND_URL}/chat-iframe?site_token={site_token}&theme={theme}" width="350" height="500" frameborder="0" style="position: fixed; bottom: 20px; right: 20px; z-index: 9999; border-radius: 12px; box-shadow: 0 8px 32px rgba(0,0,0,0.15);"></iframe>',
        "inline": f'<iframe src="{FRONTEND_URL}/chat-iframe?site_token={site_token}&theme={theme}" width="100%" height="600" frameborder="0" style="border-radius: 12px; box-shadow: 0 8px 32px rgba(0,0,0,0.15);"></iframe>',
        "mobile": f'<iframe src="{FRONTEND_URL}/chat-iframe?site_token={site_token}&theme={theme}" width="100%" height="100%" frameborder="0" style="position: fixed; top: 0; left: 0; z-index: 10000; display: none;" id="mobile-chat"></iframe>'
    }
    
    return {
        "embed_code": codes["floating"],
        "codes": codes,
        "theme": theme,
        "instructions": {
            "floating": "üöÄ –ü–ª–∞–≤–∞—é—â–∏–π —á–∞—Ç –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
            "inline": "üìÑ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
            "mobile": "üì± –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
        },
        "themes": {
            "blue": "üíô –°–∏–Ω—è—è —Ç–µ–º–∞ (–¥–µ–ª–æ–≤–∞—è)",
            "green": "üíö –ó–µ–ª–µ–Ω–∞—è —Ç–µ–º–∞ (—ç–∫–æ–ª–æ–≥–∏—á–Ω–∞—è)", 
            "purple": "üíú –§–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞ (–∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è)",
            "orange": "üß° –û—Ä–∞–Ω–∂–µ–≤–∞—è —Ç–µ–º–∞ (—ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è)"
        }
    }

@router.get("/chat-iframe", response_class=HTMLResponse)
def chat_iframe(user_id: int = Query(...)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML iframe –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è —á–∞—Ç–∞ –Ω–∞ —Å–∞–π—Ç"""
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</title>
      <style>
        body {{ margin:0; font-family:sans-serif; }}
        #chat {{ width:100%; height:100vh; border:none; }}
      </style>
    </head>
    <body>
      <div id="chat"></div>
      <script>
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —á–∞—Ç–∞ (WebSocket –∏–ª–∏ REST)
        // user_id: {user_id}
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fetch –∏–ª–∏ WebSocket –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å backend
        // –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º user_id
        document.getElementById('chat').innerText = '–í–∞—à user_id: {user_id}';
      </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html)

@router.post("/embed-code")
def generate_site_token(data: dict, current_user: models.User = Depends(auth.get_current_user), db: Session = Depends(get_db)):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç site token –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    
    assistant_id = data.get('assistant_id')
    if not assistant_id:
        raise HTTPException(status_code=400, detail="assistant_id required")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    assistant = db.query(models.Assistant).filter(
        models.Assistant.id == assistant_id,
        models.Assistant.user_id == current_user.id
    ).first()
    
    if not assistant:
        raise HTTPException(status_code=404, detail="Assistant not found")
    
    payload = {
        'user_id': current_user.id,
        'assistant_id': assistant_id,
        'type': 'site'
        # –£–±–∏—Ä–∞–µ–º exp - —Ç–æ–∫–µ–Ω –±–µ—Å—Å—Ä–æ—á–Ω—ã–π –ø–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
    }
    token = jwt.encode(payload, SITE_SECRET, algorithm='HS256')
    return {'site_token': token}