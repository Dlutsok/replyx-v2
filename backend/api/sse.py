"""
SSE (Server-Sent Events) API endpoints –¥–ª—è ReplyX
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç real-time –¥–æ—Å—Ç–∞–≤–∫—É —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ HTTP/2 streams
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ WebSocket infrastructure
"""
import asyncio
import json
import logging
import time
import uuid
from datetime import datetime
from typing import Dict, Any, Optional, Set

from fastapi import APIRouter, HTTPException, Depends, Query, Request, Header
from fastapi.responses import StreamingResponse
from sqlalchemy.orm import Session

from database import models, get_db
from core.site_auth import get_current_site_user, get_current_site_user_simple
from core.app_config import is_development
from services.sse_manager import sse_manager, validate_sse_auth, get_sse_stats
from database.models import Dialog, Assistant

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api", tags=["SSE"])

@router.get("/dialogs/{dialog_id}/events")
async def dialog_events_stream(
    dialog_id: int,
    request: Request,
    last_event_id: Optional[str] = Header(None, alias="Last-Event-ID"),
    token: Optional[str] = Query(None),
    site_token: Optional[str] = Query(None),
    assistant_id: Optional[int] = Query(None),
    guest_id: Optional[str] = Query(None),
    db: Session = Depends(get_db)
):
    """
    SSE stream –¥–ª—è —Å–æ–±—ã—Ç–∏–π –¥–∏–∞–ª–æ–≥–∞
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–∏ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
    - token: JWT —Ç–æ–∫–µ–Ω –¥–ª—è admin –ø–∞–Ω–µ–ª–∏
    - site_token: Site token –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    - assistant_id + guest_id: –ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
    
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π WebSocket –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
    """
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    client_ip = request.client.host
    origin = request.headers.get("origin")
    user_agent = request.headers.get("user-agent", "")
    
    logger.info(f"üîå [SSE API] Connection attempt for dialog {dialog_id}")
    logger.debug(f"üîå [SSE API] Client: {client_ip}, Origin: {origin}, Last-Event-ID: {last_event_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    dialog = db.query(Dialog).filter(Dialog.id == dialog_id).first()
    if not dialog:
        raise HTTPException(status_code=404, detail="Dialog not found")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π SSE manager
    is_valid, auth_type = await validate_sse_auth(
        dialog_id=dialog_id,
        token=token,
        site_token=site_token,
        assistant_id=assistant_id,
        origin=origin
    )
    
    if not is_valid:
        logger.warning(f"‚õî [SSE API] Authorization failed for dialog {dialog_id}: {auth_type}")
        raise HTTPException(status_code=403, detail=f"Authorization failed: {auth_type}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è widget —Ä–µ–∂–∏–º–∞
    if auth_type == "widget" and assistant_id:
        assistant = db.query(Assistant).filter(Assistant.id == assistant_id).first()
        if not assistant or not assistant.is_active:
            raise HTTPException(status_code=403, detail="Assistant not found or inactive")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–ª–æ–≥ —Å–≤—è–∑–∞–Ω —Å —ç—Ç–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        if dialog.assistant_id != assistant_id:
            raise HTTPException(status_code=403, detail="Dialog does not belong to this assistant")
    
    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    elif auth_type == "site" and site_token:
        try:
            current_user = get_current_site_user_simple(site_token, db)
            if not current_user:
                raise HTTPException(status_code=401, detail="Invalid site token")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥
            if dialog.user_id != current_user.id:
                raise HTTPException(status_code=403, detail="Dialog access denied")
        except Exception as e:
            logger.error(f"Site auth error: {e}")
            raise HTTPException(status_code=401, detail="Authentication failed")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞
    client_id = f"{auth_type}_{dialog_id}_{uuid.uuid4().hex[:8]}"
    
    logger.info(f"‚úÖ [SSE API] Authorization successful for dialog {dialog_id} ({auth_type})")
    logger.info(f"üîå [SSE API] Creating SSE stream for client {client_id}")
    
    async def event_stream():
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SSE —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π SSE Manager
        """
        try:
            # SSE headers –≤ –Ω–∞—á–∞–ª–µ –ø–æ—Ç–æ–∫–∞
            yield f"retry: 5000\n\n"  # Retry —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ
            
            # –°–æ–∑–¥–∞–µ–º SSE stream —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
            async for sse_event in sse_manager.create_sse_stream(
                dialog_id=dialog_id,
                client_id=client_id,
                last_event_id=last_event_id,
                origin=origin,
                user_agent=user_agent,
                auth_type=auth_type
            ):
                yield sse_event
                await asyncio.sleep(0.01)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                
        except asyncio.CancelledError:
            logger.info(f"üîå [SSE API] Client {client_id} disconnected")
        except Exception as e:
            logger.error(f"‚ùå [SSE API] Error in event stream for {client_id}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º error —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            yield f"event: error\ndata: {{\"error\": \"Stream error\"}}\n\n"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º StreamingResponse —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ SSE –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    return StreamingResponse(
        event_stream(),
        media_type="text/event-stream",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
            "X-Accel-Buffering": "no",  # –î–ª—è Nginx
            "Access-Control-Allow-Origin": origin if origin else "*",
            "Access-Control-Allow-Headers": "Last-Event-ID, Cache-Control",
            "Access-Control-Expose-Headers": "Content-Type",
        }
    )


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ endpoints –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

@router.get("/site/dialogs/{dialog_id}/events")
async def site_dialog_events_stream(
    dialog_id: int,
    request: Request,
    site_token: str = Query(...),
    last_event_id: Optional[str] = Header(None, alias="Last-Event-ID"),
    db: Session = Depends(get_db)
):
    """
    SSE stream –¥–ª—è site –≤–∏–¥–∂–µ—Ç–æ–≤ (—Å site_token)
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint'–∞
    """
    return await dialog_events_stream(
        dialog_id=dialog_id,
        request=request,
        last_event_id=last_event_id,
        token=None,
        site_token=site_token,
        assistant_id=None,
        guest_id=None,
        db=db
    )

@router.get("/widget/dialogs/{dialog_id}/events")
async def widget_dialog_events_stream(
    dialog_id: int,
    request: Request,
    assistant_id: int = Query(...),
    guest_id: str = Query(...),
    last_event_id: Optional[str] = Header(None, alias="Last-Event-ID"),
    db: Session = Depends(get_db)
):
    """
    SSE stream –¥–ª—è widget —Ä–µ–∂–∏–º–∞ (—Å assistant_id + guest_id)
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint'–∞
    """
    return await dialog_events_stream(
        dialog_id=dialog_id,
        request=request,
        last_event_id=last_event_id,
        token=None,
        site_token=None,
        assistant_id=assistant_id,
        guest_id=guest_id,
        db=db
    )

@router.get("/sse/health")
async def sse_health_check():
    """
    Health check –¥–ª—è SSE —Å–µ—Ä–≤–∏—Å–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    """
    try:
        stats = get_sse_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await sse_manager.redis.ping()
        redis_status = "healthy"
        
    except Exception as e:
        logger.error(f"‚ùå [SSE Health] Redis check failed: {e}")
        redis_status = f"error: {str(e)}"
    
    return {
        "service": "SSE Events",
        "status": "healthy" if redis_status == "healthy" else "degraded",
        "redis_status": redis_status,
        "timestamp": time.time(),
        **stats
    }

@router.get("/sse/stats")
async def sse_detailed_stats():
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SSE —Å–µ—Ä–≤–∏—Å–∞
    –¢–æ–ª—å–∫–æ –¥–ª—è development —Ä–µ–∂–∏–º–∞ –∏–ª–∏ admin –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    if not is_development:
        raise HTTPException(status_code=403, detail="Available only in development mode")
    
    stats = get_sse_stats()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    from services.sse_manager import sse_clients, sse_connections
    
    client_details = []
    for client_id, client in sse_clients.items():
        client_details.append({
            "client_id": client_id,
            "dialog_id": client.dialog_id,
            "auth_type": client.auth_type,
            "connected_at": client.connected_at,
            "connected_duration": time.time() - client.connected_at,
            "origin": client.origin,
            "last_event_id": client.last_event_id,
        })
    
    return {
        **stats,
        "connections_by_dialog": dict(sse_connections),
        "client_details": client_details,
        "redis_url": sse_manager.redis.connection_pool.connection_kwargs.get("host", "unknown") if sse_manager.redis else "not connected",
    }

@router.post("/sse/test-event")
async def send_test_event(
    dialog_id: int = Query(...),
    message: str = Query("Test SSE event"),
    db: Session = Depends(get_db)
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SSE
    –¢–æ–ª—å–∫–æ –¥–ª—è development —Ä–µ–∂–∏–º–∞
    """
    if not is_development:
        raise HTTPException(status_code=403, detail="Available only in development mode")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    dialog = db.query(Dialog).filter(Dialog.id == dialog_id).first()
    if not dialog:
        raise HTTPException(status_code=404, detail="Dialog not found")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    test_event = {
        "id": f"test_{int(time.time())}",
        "sender": "system",
        "text": message,
        "timestamp": time.strftime("%Y-%m-%dT%H:%M:%S.000Z"),
        "type": "test_event"
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ SSE –º–µ–Ω–µ–¥–∂–µ—Ä
    from services.sse_manager import push_sse_event, sse_connections
    await push_sse_event(dialog_id, test_event)
    
    logger.info(f"üì§ [SSE Test] Sent test event to dialog {dialog_id}: {message}")
    
    return {
        "status": "sent",
        "dialog_id": dialog_id,
        "event": test_event,
        "active_connections": len(sse_connections.get(dialog_id, [])),
    }

# CORS preflight –¥–ª—è SSE endpoints
@router.options("/dialogs/{dialog_id}/events")
@router.options("/site/dialogs/{dialog_id}/events")  
@router.options("/widget/dialogs/{dialog_id}/events")
async def sse_cors_preflight(request: Request):
    """
    CORS preflight –¥–ª—è SSE endpoints
    """
    origin = request.headers.get("origin")
    
    return {
        "status": "ok"
    }, {
        "Access-Control-Allow-Origin": origin if origin else "*",
        "Access-Control-Allow-Methods": "GET, OPTIONS",
        "Access-Control-Allow-Headers": "Last-Event-ID, Cache-Control, Authorization",
        "Access-Control-Max-Age": "3600",
    }