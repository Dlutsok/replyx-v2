from fastapi import APIRouter, Depends, HTTPException, status, Form, Request
from fastapi.responses import HTMLResponse, JSONResponse
from sqlalchemy.orm import Session
from database.connection import get_db
from database.models import User, Payment
from core.auth import get_current_user
from datetime import datetime
from pydantic import BaseModel
import uuid
import os
import logging
import hashlib
import hmac
import requests
import json


logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api/payments", tags=["payments"])

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¢-–ë–∞–Ω–∫
TINKOFF_TERMINAL_KEY = os.getenv('TINKOFF_TERMINAL_KEY', 'your_terminal_key_here')
TINKOFF_SECRET_KEY = os.getenv('TINKOFF_SECRET_KEY', 'your_secret_key_here')
TINKOFF_SANDBOX_MODE = os.getenv('TINKOFF_SANDBOX_MODE', 'true').lower() == 'true'
TINKOFF_MOCK_MODE = os.getenv('TINKOFF_MOCK_MODE', 'true').lower() == 'true'  # Mock —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
TINKOFF_API_URL = "https://rest-api-test.tinkoff.ru/v2/" if TINKOFF_SANDBOX_MODE else "https://securepay.tinkoff.ru/v2/"

def generate_order_id():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    return f"replyx_{int(datetime.utcnow().timestamp())}_{str(uuid.uuid4())[:8]}"

def calculate_signature(data: dict) -> str:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –¢-–ë–∞–Ω–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ –ø–æ–¥–ø–∏—Å–∏, –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ None
    filtered_data = {k: v for k, v in data.items() 
                    if k not in ['token', 'Token'] and v is not None and str(v).strip() != ''}
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∫–∞–∫ Password (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    filtered_data['Password'] = TINKOFF_SECRET_KEY
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
    sorted_keys = sorted(filtered_data.keys())
    concatenated_values = [str(filtered_data[key]) for key in sorted_keys]
    concatenated_string = ''.join(concatenated_values)
    
    logger.error(f"–ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–ø–æ –ø–æ—Ä—è–¥–∫—É): {concatenated_values}")
    logger.error(f"–°—Ç—Ä–æ–∫–∞ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {concatenated_string}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º SHA256 —Ö—ç—à
    return hashlib.sha256(concatenated_string.encode('utf-8')).hexdigest()

async def init_payment_tinkoff(order_id: str, amount: int, description: str, customer_key: str, success_url: str, fail_url: str):
    """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
    
    # –í–†–ï–ú–ï–ù–ù–´–ô MOCK –†–ï–ñ–ò–ú - –ø–æ–∫–∞ IP –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist –¢–∏–Ω—å–∫–æ—Ñ—Ñ
    if TINKOFF_MOCK_MODE:
        logger.info(f"üé≠ MOCK —Ä–µ–∂–∏–º: —ç–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ {order_id}")
        mock_payment_url = f"https://securepay.tinkoff.ru/new/mock_{order_id[:8]}"
        return mock_payment_url
    
    data = {
        'TerminalKey': TINKOFF_TERMINAL_KEY,
        'OrderId': order_id,
        'Amount': amount,
        'Currency': 'RUB',
        'Description': description,
        'CustomerKey': customer_key,
        'SuccessURL': success_url,
        'FailURL': fail_url,
        'Language': 'ru',
        'PayType': 'O'
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º NotificationURL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    notification_url = os.getenv('TINKOFF_NOTIFICATION_URL', '').strip()
    if notification_url and not notification_url.startswith('http://localhost'):
        data['NotificationURL'] = notification_url
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω (–ø–æ–¥–ø–∏—Å—å)
    token = calculate_signature(data)
    data['Token'] = token
    
    logger.error(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: {[k for k in sorted(data.keys()) if k != 'Token']}")
    logger.error(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
    logger.error(f"URL –∑–∞–ø—Ä–æ—Å–∞: {TINKOFF_API_URL}Init")
    
    try:
        response = requests.post(
            f"{TINKOFF_API_URL}Init",
            json=data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        logger.error(f"–ó–∞–ø—Ä–æ—Å –∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ Init: {data}")
        logger.error(f"–û—Ç–≤–µ—Ç –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {response.text}")
        
        if response.status_code == 200:
            result = response.json()
            if result.get('Success') and result.get('PaymentURL'):
                return result['PaymentURL']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {result}")
                raise Exception(f"–û—à–∏–±–∫–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {result.get('Message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}, {response.text}")
            raise Exception(f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {e}")
        raise Exception("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")

@router.post("/create-payment")
async def create_payment(
    amount: float = Form(..., ge=1, le=50000),
    description: str = Form(default="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ReplyX"),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –¢-–ë–∞–Ω–∫
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_id = generate_order_id()
        
        # URLs –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        # –í sandbox —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ URL, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        if TINKOFF_SANDBOX_MODE:
            success_url = os.getenv('TINKOFF_SUCCESS_URL', 'https://httpbin.org/status/200')
            fail_url = os.getenv('TINKOFF_FAIL_URL', 'https://httpbin.org/status/400')
        else:
            success_url = os.getenv('TINKOFF_SUCCESS_URL', 'http://localhost:3000/payment/success')
            fail_url = os.getenv('TINKOFF_FAIL_URL', 'http://localhost:3000/payment/error')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
        payment = Payment(
            user_id=current_user.id,
            order_id=order_id,
            amount=amount,
            status='pending',
            description=description,
            success_url=success_url,
            fail_url=fail_url
        )
        
        db.add(payment)
        db.commit()
        db.refresh(payment)
        
        # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        amount_kopecks = int(amount * 100)  # –¢-–ë–∞–Ω–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id} –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±.")
        logger.error(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Ä–º–∏–Ω–∞–ª: {TINKOFF_TERMINAL_KEY}")
        logger.error(f"Sandbox —Ä–µ–∂–∏–º: {TINKOFF_SANDBOX_MODE}")
        logger.error(f"API URL: {TINKOFF_API_URL}")
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        payment_url = await init_payment_tinkoff(
            order_id=order_id,
            amount=amount_kopecks,
            description=description,
            customer_key=str(current_user.id),
            success_url=success_url,
            fail_url=fail_url
        )
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω PaymentURL –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {payment_url}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        return JSONResponse(content={
            "success": True,
            "redirect_url": payment_url,
            "order_id": order_id
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å: {traceback.format_exc()}")
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ —Å–æ–∑–¥–∞–Ω, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º
        if 'payment' in locals():
            try:
                db.delete(payment)
                db.commit()
            except Exception as rollback_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
            
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}"
        )


@router.get("/status/{order_id}")
async def get_payment_status(
    order_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = db.query(Payment).filter(
        Payment.order_id == order_id,
        Payment.user_id == current_user.id
    ).first()
    
    if not payment:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    return {
        "order_id": payment.order_id,
        "amount": payment.amount,
        "status": payment.status,
        "created_at": payment.created_at,
        "completed_at": payment.completed_at
    }

@router.post("/complete-payment")
async def complete_payment(
    order_id: str = Form(...),
    success: bool = Form(...),
    payment_id: str = Form(None),
    error_message: str = Form(None),
    db: Session = Depends(get_db)
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ frontend –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –¢-–ë–∞–Ω–∫)
    """
    try:
        payment = db.query(Payment).filter(Payment.order_id == order_id).first()
        
        if not payment:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        if success:
            payment.status = 'success'
            payment.completed_at = datetime.utcnow()
            if payment_id:
                payment.tinkoff_payment_id = payment_id
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from services.balance_service import BalanceService
            balance_service = BalanceService(db)
            balance_service.add_balance(
                user_id=payment.user_id,
                amount=payment.amount,
                transaction_type='payment_topup',
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫ (–∑–∞–∫–∞–∑ {order_id})"
            )
            
            logger.info(f"–ü–ª–∞—Ç–µ–∂ {order_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {payment.amount} —Ä—É–±.")
        else:
            payment.status = 'failed'
            payment.completed_at = datetime.utcnow()
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ {order_id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: {error_message}")
        
        db.commit()
        
        return {
            "success": True,
            "message": "–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω",
            "payment_status": payment.status
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ {order_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"
        )

@router.get("/history")
async def get_payment_history(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    payments = db.query(Payment).filter(
        Payment.user_id == current_user.id
    ).order_by(Payment.created_at.desc()).limit(50).all()
    
    return [{
        "order_id": p.order_id,
        "amount": p.amount,
        "status": p.status,
        "description": p.description,
        "created_at": p.created_at,
        "completed_at": p.completed_at
    } for p in payments]