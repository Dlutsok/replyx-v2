from fastapi import APIRouter, Depends, HTTPException, status, Form, Request
from fastapi.responses import HTMLResponse, JSONResponse
from sqlalchemy.orm import Session
from database.connection import get_db
from database.models import User, Payment
from core.auth import get_current_user
from datetime import datetime
from pydantic import BaseModel
import uuid
import os
import logging
import hashlib
import hmac
import requests
import json


logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api/payments", tags=["payments"])

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¢-–ë–∞–Ω–∫ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
TINKOFF_TERMINAL_KEY = os.getenv('TINKOFF_TERMINAL_KEY', 'your_terminal_key_here')
TINKOFF_SECRET_KEY = os.getenv('TINKOFF_SECRET_KEY', 'your_secret_key_here')
TINKOFF_SANDBOX_MODE = os.getenv('TINKOFF_SANDBOX_MODE', 'true').lower() == 'true'
TINKOFF_MOCK_MODE = os.getenv('TINKOFF_MOCK_MODE', 'false').lower() == 'true'  # Mock —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω

# API URLs
TINKOFF_SANDBOX_API_URL = os.getenv('TINKOFF_SANDBOX_API_URL', 'https://rest-api-test.tinkoff.ru/v2/')
TINKOFF_PRODUCTION_API_URL = os.getenv('TINKOFF_PRODUCTION_API_URL', 'https://securepay.tinkoff.ru/v2/')
TINKOFF_API_URL = TINKOFF_SANDBOX_API_URL if TINKOFF_SANDBOX_MODE else TINKOFF_PRODUCTION_API_URL

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TINKOFF_REQUEST_TIMEOUT = int(os.getenv('TINKOFF_REQUEST_TIMEOUT', '30'))
TINKOFF_DEBUG_LOGGING = os.getenv('TINKOFF_DEBUG_LOGGING', 'false').lower() == 'true'

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
def validate_tinkoff_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
    errors = []
    
    if TINKOFF_TERMINAL_KEY == 'your_terminal_key_here' or not TINKOFF_TERMINAL_KEY:
        errors.append("TINKOFF_TERMINAL_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
    if TINKOFF_SECRET_KEY == 'your_secret_key_here' or not TINKOFF_SECRET_KEY:
        errors.append("TINKOFF_SECRET_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
    if not TINKOFF_SANDBOX_MODE and not TINKOFF_MOCK_MODE:
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ URLs
        success_url = os.getenv('TINKOFF_SUCCESS_URL', '')
        fail_url = os.getenv('TINKOFF_FAIL_URL', '')
        
        if not success_url or success_url.startswith('http://localhost'):
            errors.append("TINKOFF_SUCCESS_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
            
        if not fail_url or fail_url.startswith('http://localhost'):
            errors.append("TINKOFF_FAIL_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    
    if errors and not TINKOFF_MOCK_MODE:
        logger.error("–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ:")
        for error in errors:
            logger.error(f"  - {error}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é .env.tinkoff.example")
        
    return len(errors) == 0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
_config_valid = validate_tinkoff_config()

def generate_order_id():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    return f"replyx_{int(datetime.utcnow().timestamp())}_{str(uuid.uuid4())[:8]}"

def calculate_signature(data: dict) -> str:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –¢-–ë–∞–Ω–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ –ø–æ–¥–ø–∏—Å–∏, –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ None
    filtered_data = {k: v for k, v in data.items() 
                    if k not in ['token', 'Token'] and v is not None and str(v).strip() != ''}
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∫–∞–∫ Password (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    filtered_data['Password'] = TINKOFF_SECRET_KEY
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
    sorted_keys = sorted(filtered_data.keys())
    concatenated_values = [str(filtered_data[key]) for key in sorted_keys]
    concatenated_string = ''.join(concatenated_values)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
    safe_values = [str(filtered_data[key]) for key in sorted_keys if key != 'Password']
    logger.debug(f"–ö–ª—é—á–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–∫—Ä–æ–º–µ Password): {[k for k in sorted_keys if k != 'Password']}")
    logger.debug(f"–î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {len(concatenated_string)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –í—ã—á–∏—Å–ª—è–µ–º SHA256 —Ö—ç—à
    return hashlib.sha256(concatenated_string.encode('utf-8')).hexdigest()

async def init_payment_tinkoff(order_id: str, amount: int, description: str, customer_key: str, success_url: str, fail_url: str, email: str = None, phone: str = None, name: str = None):
    """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
    
    # –í–†–ï–ú–ï–ù–ù–´–ô MOCK –†–ï–ñ–ò–ú - –ø–æ–∫–∞ IP –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist –¢–∏–Ω—å–∫–æ—Ñ—Ñ
    if TINKOFF_MOCK_MODE:
        logger.info(f"üé≠ MOCK —Ä–µ–∂–∏–º: —ç–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ {order_id}")
        mock_payment_url = f"https://securepay.tinkoff.ru/new/mock_{order_id[:8]}"
        return mock_payment_url
    
    data = {
        'TerminalKey': TINKOFF_TERMINAL_KEY,
        'OrderId': order_id,
        'Amount': amount,
        'Description': description,
        'CustomerKey': customer_key,
        'SuccessURL': success_url,
        'FailURL': fail_url,
        'Language': 'ru',
        'PayType': 'O'
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–∞ (54-–§–ó), –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    if email:
        data['EMAIL'] = email
    if phone:
        data['PHONE'] = phone
    # –ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Receipt, –Ω–æ —ç—Ç–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    # –î–ª—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞ –¥–æ–±–∞–≤–∏–º —Ç–æ–ª—å–∫–æ email –∏ phone
    
    # –î–æ–±–∞–≤–ª—è–µ–º NotificationURL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    notification_url = os.getenv('TINKOFF_NOTIFICATION_URL', '').strip()
    if notification_url and not notification_url.startswith('http://localhost'):
        data['NotificationURL'] = notification_url
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω (–ø–æ–¥–ø–∏—Å—å)
    token = calculate_signature(data)
    data['Token'] = token
    
    logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ {order_id} –Ω–∞ —Å—É–º–º—É {amount} –∫–æ–ø–µ–µ–∫")
    logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: {len([k for k in data.keys() if k != 'Token'])}")
    logger.debug(f"URL –∑–∞–ø—Ä–æ—Å–∞: {TINKOFF_API_URL}Init")
    
    try:
        response = requests.post(
            f"{TINKOFF_API_URL}Init",
            json=data,
            headers={'Content-Type': 'application/json'},
            timeout=TINKOFF_REQUEST_TIMEOUT
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ Init –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ (—Å—Ç–∞—Ç—É—Å {response.status_code})")
        if response.status_code != 200:
            logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {response.text}")
        
        if response.status_code == 200:
            result = response.json()
            if result.get('Success') and result.get('PaymentURL'):
                return result['PaymentURL']
            else:
                error_code = result.get('ErrorCode', 'UNKNOWN_ERROR')
                error_message = result.get('Message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
                logger.error(f"–û—à–∏–±–∫–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ {order_id}:")
                logger.error(f"  –ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}")
                logger.error(f"  –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
                logger.error(f"  –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
                
                # –ü–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_messages = {
                    'INCORRECT_PAYMENT_OPERATION': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞',
                    'OPERATION_DENIED': '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º',
                    'TERMINAL_NOT_FOUND': '–¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    'TERMINAL_BLOCKED': '–¢–µ—Ä–º–∏–Ω–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                    'OPERATION_NOT_SUPPORTED': '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
                    'AMOUNT_TOO_LOW': '–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞',
                    'AMOUNT_TOO_HIGH': '–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞',
                    'INCORRECT_MERCHANT': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞–Ω—Ç–∞'
                }
                
                user_message = user_messages.get(error_code, error_message)
                raise Exception(f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {user_message} (–∫–æ–¥: {error_code})")
        else:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ API:")
            logger.error(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
            logger.error(f"  –û—Ç–≤–µ—Ç: {response.text}")
            logger.error(f"  URL: {TINKOFF_API_URL}Init")
            
            if response.status_code == 401:
                raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
            elif response.status_code == 403:
                raise Exception("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
            elif response.status_code >= 500:
                raise Exception("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π (–∫–æ–¥ {response.status_code})")
            
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {e}")
        raise Exception("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")

@router.post("/create-payment")
async def create_payment(
    amount: float = Form(..., ge=1, le=50000),
    description: str = Form(default="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ReplyX"),
    email: str = Form(None),  # Email –¥–ª—è —á–µ–∫–∞
    phone: str = Form(None),  # –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —á–µ–∫–∞
    name: str = Form(None),   # –ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –¢-–ë–∞–Ω–∫
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_id = generate_order_id()
        
        # URLs –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        # –í sandbox —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ URL, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        if TINKOFF_SANDBOX_MODE:
            success_url = os.getenv('TINKOFF_SUCCESS_URL', 'https://httpbin.org/status/200')
            fail_url = os.getenv('TINKOFF_FAIL_URL', 'https://httpbin.org/status/400')
        else:
            success_url = os.getenv('TINKOFF_SUCCESS_URL', 'http://localhost:3000/payment/success')
            fail_url = os.getenv('TINKOFF_FAIL_URL', 'http://localhost:3000/payment/error')

        # –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º order_id –≤ SuccessURL/FailURL, —á—Ç–æ–±—ã –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ –±—ã–ª –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
        try:
            from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse
            def append_order_param(url: str, order: str) -> str:
                parsed = urlparse(url)
                qs = dict(parse_qsl(parsed.query))
                qs['order'] = order
                new_query = urlencode(qs)
                return urlunparse(parsed._replace(query=new_query))
            success_url = append_order_param(success_url, order_id)
            fail_url = append_order_param(fail_url, order_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å order –ø–∞—Ä–∞–º–µ—Ç—Ä –∫ URL: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
        payment = Payment(
            user_id=current_user.id,
            order_id=order_id,
            amount=amount,
            status='pending',
            description=description,
            success_url=success_url,
            fail_url=fail_url,
            customer_email=email,
            customer_phone=phone,
            customer_name=name
        )
        
        db.add(payment)
        db.commit()
        db.refresh(payment)
        
        # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        amount_kopecks = int(amount * 100)  # –¢-–ë–∞–Ω–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id} –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±.")
        logger.info(f"–¢–µ—Ä–º–∏–Ω–∞–ª: {TINKOFF_TERMINAL_KEY[:8]}***")
        logger.info(f"Sandbox —Ä–µ–∂–∏–º: {TINKOFF_SANDBOX_MODE}")
        logger.debug(f"API URL: {TINKOFF_API_URL}")
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        payment_url = await init_payment_tinkoff(
            order_id=order_id,
            amount=amount_kopecks,
            description=description,
            customer_key=str(current_user.id),
            success_url=success_url,
            fail_url=fail_url,
            email=email,
            phone=phone,
            name=name
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
        payment.payment_url = payment_url
        db.commit()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω PaymentURL –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {payment_url}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        return JSONResponse(content={
            "success": True,
            "redirect_url": payment_url,
            "order_id": order_id
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å: {traceback.format_exc()}")
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
        if 'payment' in locals():
            try:
                payment.status = 'failed'
                payment.error_message = str(e)
                payment.completed_at = datetime.utcnow()
                db.commit()
                logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment.order_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ failed —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
            except Exception as update_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {update_error}")
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                try:
                    db.delete(payment)
                    db.commit()
                except Exception as rollback_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –¥–ª—è HTTP –æ—Ç–≤–µ—Ç–∞
        error_message = str(e)
        if "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" in error_message.lower():
            status_code = status.HTTP_401_UNAUTHORIZED
        elif "–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" in error_message.lower():
            status_code = status.HTTP_403_FORBIDDEN  
        elif "—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è" in error_message.lower() or "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã" in error_message.lower():
            status_code = status.HTTP_503_SERVICE_UNAVAILABLE
        else:
            status_code = status.HTTP_400_BAD_REQUEST
            
        raise HTTPException(
            status_code=status_code,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {error_message}"
        )


@router.get("/status/{order_id}")
async def get_payment_status(
    order_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = db.query(Payment).filter(
        Payment.order_id == order_id,
        Payment.user_id == current_user.id
    ).first()
    
    if not payment:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    return {
        "order_id": payment.order_id,
        "amount": payment.amount,
        "status": payment.status,
        "created_at": payment.created_at,
        "completed_at": payment.completed_at
    }

@router.post("/complete-payment")
async def complete_payment(
    order_id: str = Form(...),
    success: bool = Form(...),
    payment_id: str = Form(None),
    error_message: str = Form(None),
    db: Session = Depends(get_db)
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ frontend –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –¢-–ë–∞–Ω–∫)
    """
    try:
        payment = db.query(Payment).filter(Payment.order_id == order_id).first()
        
        if not payment:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        if success:
            payment.status = 'success'
            payment.completed_at = datetime.utcnow()
            if payment_id:
                payment.tinkoff_payment_id = payment_id
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from services.balance_service import BalanceService
            balance_service = BalanceService(db)
            balance_service.add_balance(
                user_id=payment.user_id,
                amount=payment.amount,
                transaction_type='payment_topup',
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫ (–∑–∞–∫–∞–∑ {order_id})"
            )
            
            logger.info(f"–ü–ª–∞—Ç–µ–∂ {order_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {payment.amount} —Ä—É–±.")
        else:
            payment.status = 'failed'
            payment.completed_at = datetime.utcnow()
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ {order_id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: {error_message}")
        
        db.commit()
        
        return {
            "success": True,
            "message": "–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω",
            "payment_status": payment.status
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ {order_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"
        )

@router.post("/tinkoff-notification")
async def tinkoff_notification(
    request: Request,
    db: Session = Depends(get_db)
):
    """
    Webhook endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        client_ip = request.headers.get('x-forwarded-for', request.client.host if request.client else 'unknown')
        logger.info(f"Webhook –æ—Ç –¢-–ë–∞–Ω–∫ —Å IP: {client_ip}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º JSON –∏ form-data)
        content_type = request.headers.get('content-type', '')
        if 'application/json' in content_type:
            notification_data = await request.json()
        else:
            form_data = await request.form()
            notification_data = dict(form_data)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ: OrderId={notification_data.get('OrderId')}, Status={notification_data.get('Status')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['OrderId', 'Status', 'PaymentId', 'Token']
        for field in required_fields:
            if field not in notification_data:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ {field} –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"Missing required field: {field}"
                )
        
        order_id = notification_data['OrderId']
        payment_status = notification_data['Status']
        payment_id = notification_data['PaymentId']
        received_token = notification_data['Token']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (—Ç–æ–∫–µ–Ω) –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        expected_token = calculate_signature(notification_data)
        if str(received_token).lower() != str(expected_token).lower():
            logger.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid signature"
            )
        
        # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
        payment = db.query(Payment).filter(Payment.order_id == order_id).first()
        if not payment:
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Payment not found"
            )
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –Ω–∞ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
        status_mapping = {
            'NEW': 'pending',
            'FORM_SHOWED': 'pending', 
            'AUTHORIZING': 'pending',
            'AUTHORIZED': 'success',
            'CONFIRMED': 'success',
            'PARTIAL_REFUNDED': 'partial_refund',
            'REFUNDED': 'refunded',
            'REJECTED': 'failed',
            'CANCELED': 'canceled',
            'DEADLINE_EXPIRED': 'expired',
            'FAILED': 'failed',
            'REVERSED': 'reversed',
            'PARTIAL_REVERSED': 'partial_reversed',
            '3DS_CHECKING': 'pending',
            '3DS_CHECKED': 'pending',
            'ATTEMPTS_EXPIRED': 'expired'
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        old_status = payment.status
        new_status = status_mapping.get(payment_status, 'unknown')
        
        payment.status = new_status
        payment.tinkoff_status = payment_status  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        payment.tinkoff_payment_id = payment_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'ErrorCode' in notification_data:
            payment.error_code = notification_data['ErrorCode']
        if 'Message' in notification_data:
            payment.error_message = notification_data['Message']
        if 'Pan' in notification_data:
            payment.card_mask = notification_data['Pan']
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω - –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        if new_status == 'success' and old_status != 'success':
            payment.completed_at = datetime.utcnow()
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from services.balance_service import BalanceService
            balance_service = BalanceService(db)
            balance_service.add_balance(
                user_id=payment.user_id,
                amount=payment.amount,
                transaction_type='payment_topup',
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫ (–∑–∞–∫–∞–∑ {order_id})"
            )
            
            logger.info(f"–ü–ª–∞—Ç–µ–∂ {order_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ webhook, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {payment.amount} —Ä—É–±.")
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω/–æ—Ç–º–µ–Ω–µ–Ω - –æ—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        elif new_status in ['failed', 'canceled', 'expired'] and old_status not in ['failed', 'canceled', 'expired']:
            payment.completed_at = datetime.utcnow()
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {payment_status}")
        
        db.commit()
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {old_status} ‚Üí {new_status}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º OK –¥–ª—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        return {"Status": "OK"}
        
    except HTTPException:
        # –ü–µ—Ä–µ–ø—Ä–æ–±—Ä–æ—Å HTTPException –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal server error"
        )

@router.get("/history")
async def get_payment_history(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    payments = db.query(Payment).filter(
        Payment.user_id == current_user.id
    ).order_by(Payment.created_at.desc()).limit(50).all()
    
    return [{
        "order_id": p.order_id,
        "amount": p.amount,
        "status": p.status,
        "description": p.description,
        "created_at": p.created_at,
        "completed_at": p.completed_at
    } for p in payments]