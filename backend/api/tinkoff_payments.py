from fastapi import APIRouter, Depends, HTTPException, status, Form, Request
from fastapi.responses import HTMLResponse, JSONResponse
from sqlalchemy.orm import Session
from database.connection import get_db
from database.models import User, Payment
from core.auth import get_current_user
from validators.rate_limiter import rate_limit_api, rate_limit_by_ip
from datetime import datetime, timedelta
import uuid
import os
import logging
import hashlib
import requests
import json
import ipaddress
from typing import List


logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api/payments", tags=["payments"])

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¢-–ë–∞–Ω–∫ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
TINKOFF_TERMINAL_KEY = os.getenv('TINKOFF_TERMINAL_KEY', 'your_terminal_key_here')
TINKOFF_SECRET_KEY = os.getenv('TINKOFF_SECRET_KEY', 'your_secret_key_here')
TINKOFF_SANDBOX_MODE = os.getenv('TINKOFF_SANDBOX_MODE', 'true').lower() == 'true'
TINKOFF_MOCK_MODE = os.getenv('TINKOFF_MOCK_MODE', 'false').lower() == 'true'  # Mock —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω

# Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —á–µ–∫–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è PROD —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏)
TINKOFF_EMAIL_COMPANY = os.getenv('TINKOFF_EMAIL_COMPANY', '').strip()

# API URLs - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Tinkoff
TINKOFF_TEST_API_URL = os.getenv('TINKOFF_TEST_API_URL', 'https://rest-api-test.tinkoff.ru/v2/')
TINKOFF_PRODUCTION_API_URL = os.getenv('TINKOFF_PRODUCTION_API_URL', 'https://securepay.tinkoff.ru/v2/')

def _choose_api_base(terminal_key: str, sandbox_flag: bool) -> str:
    """
    –ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ URL:
    - –µ—Å–ª–∏ –∫–ª—é—á –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ DEMO ‚Äî –≤—Å–µ–≥–¥–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—É—Ä
    - –∏–Ω–∞—á–µ ‚Äî –ø—Ä–æ–¥–∞–∫—à–Ω
    —Ñ–ª–∞–≥ sandbox –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è ¬´–ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞¬ª
    """
    if (terminal_key or "").endswith("DEMO") or sandbox_flag:
        return TINKOFF_TEST_API_URL.rstrip('/') + '/'
    return TINKOFF_PRODUCTION_API_URL.rstrip('/') + '/'

TINKOFF_API_URL = _choose_api_base(TINKOFF_TERMINAL_KEY, TINKOFF_SANDBOX_MODE)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TINKOFF_REQUEST_TIMEOUT = int(os.getenv('TINKOFF_REQUEST_TIMEOUT', '30'))

def mask_terminal_key(terminal_key: str) -> str:
    """–ú–∞—Å–∫–∏—Ä—É–µ—Ç TerminalKey –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not terminal_key or len(terminal_key) <= 8:
        return terminal_key
    return f"{terminal_key[:8]}***"

def _mask_signature(signature: str) -> str:
    """–ú–∞—Å–∫–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return f"{signature[:8]}...{signature[-6:]}" if isinstance(signature, str) and len(signature) > 14 else "***–°–ö–†–´–¢–ê***"

# IP –∞–¥—Ä–µ—Å–∞ T-Bank –¥–ª—è webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
TINKOFF_WEBHOOK_IPS = [
    '185.71.76.0/27',  # –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω T-Bank (–ø—Ä–æ–¥–∞–∫—à–Ω)
    '185.71.77.0/27',  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω T-Bank (–ø—Ä–æ–¥–∞–∫—à–Ω)
    '77.75.153.0/25',  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–ø—Ä–æ–¥–∞–∫—à–Ω)
    '91.194.226.0/23', # –ù–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω 2024+ (–ø—Ä–æ–¥–∞–∫—à–Ω)
    '91.218.132.0/24', # –ù–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω T-Bank (–æ–±–Ω–∞—Ä—É–∂–µ–Ω 11.09.2025 –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ)
    '212.49.24.206/32', # –¢–µ—Å—Ç–æ–≤—ã–π IP T-Bank (–æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –ª–æ–≥–∞—Ö webhook'–æ–≤)
    '212.233.80.7/32',  # –ü—Ä–æ–¥–∞–∫—à–Ω IP T-Bank (–æ–±–Ω–∞—Ä—É–∂–µ–Ω 10.09.2025)
]

def extract_client_ip(forwarded_for_header: str, fallback_ip: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π IP –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ X-Forwarded-For –∑–∞–≥–æ–ª–æ–≤–∫–∞
    X-Forwarded-For –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–ø–æ—á–∫—É: "client, proxy1, proxy2"
    –ù–∞–º –Ω—É–∂–µ–Ω –ø–µ—Ä–≤—ã–π IP –≤ —Ü–µ–ø–æ—á–∫–µ
    """
    if not forwarded_for_header:
        return fallback_ip
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞ (–¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π)
    first_ip = forwarded_for_header.split(',')[0].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π IP
    try:
        ipaddress.ip_address(first_ip)
        return first_ip
    except ValueError:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –≤ X-Forwarded-For: '{first_ip}', –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: '{fallback_ip}'")
        return fallback_ip

def is_tinkoff_ip(client_ip: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ IP –∫ T-Bank whitelist"""
    if not client_ip or client_ip in ['unknown', 'localhost', '127.0.0.1']:
        # –í development —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ IP
        if os.getenv('ENVIRONMENT', 'development') == 'development':
            logger.warning(f"üöß DEV mode: —Ä–∞–∑—Ä–µ—à–∞—é IP {client_ip} –¥–ª—è webhook")
            return True
        return False
    
    try:
        client_addr = ipaddress.ip_address(client_ip)
        for cidr in TINKOFF_WEBHOOK_IPS:
            if client_addr in ipaddress.ip_network(cidr):
                logger.info(f"‚úÖ IP {client_ip} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç T-Bank")
                return True
        
        logger.warning(f"‚ùå IP {client_ip} –ù–ï –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç T-Bank whitelist")
        return False
        
    except ValueError:
        logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –∞–¥—Ä–µ—Å: {client_ip}")
        return False
TINKOFF_DEBUG_LOGGING = os.getenv('TINKOFF_DEBUG_LOGGING', 'false').lower() == 'true'

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
def validate_tinkoff_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
    errors = []
    warnings = []
    
    if TINKOFF_TERMINAL_KEY == 'your_terminal_key_here' or not TINKOFF_TERMINAL_KEY:
        errors.append("TINKOFF_TERMINAL_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
    if TINKOFF_SECRET_KEY == 'your_secret_key_here' or not TINKOFF_SECRET_KEY:
        errors.append("TINKOFF_SECRET_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
    # EmailCompany –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º T-Bank
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ URL
    is_demo_key = (TINKOFF_TERMINAL_KEY or "").endswith("DEMO")
    is_test_url = TINKOFF_API_URL.startswith("https://rest-api-test.")
    
    if is_demo_key and not is_test_url:
        warnings.append("DEMO —Ç–µ—Ä–º–∏–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –ø—Ä–æ–¥–∞–∫—à–Ω URL - –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
    elif not is_demo_key and is_test_url:
        warnings.append("–ë–æ–µ–≤–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º URL - –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
        
    if not TINKOFF_SANDBOX_MODE and not TINKOFF_MOCK_MODE:
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ URLs
        success_url = os.getenv('TINKOFF_SUCCESS_URL', '')
        fail_url = os.getenv('TINKOFF_FAIL_URL', '')
        
        if not success_url or success_url.startswith('http://localhost'):
            errors.append("TINKOFF_SUCCESS_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
            
        if not fail_url or fail_url.startswith('http://localhost'):
            errors.append("TINKOFF_FAIL_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    
    if errors and not TINKOFF_MOCK_MODE:
        logger.error("–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ:")
        for error in errors:
            logger.error(f"  - {error}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é .env.tinkoff.example")
    
    if warnings:
        for warning in warnings:
            logger.warning(f"‚ö†Ô∏è {warning}")
        
    return len(errors) == 0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
_config_valid = validate_tinkoff_config()

# –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
if TINKOFF_API_URL.startswith("https://rest-api-test."):
    logger.info("üß™ –†–µ–∂–∏–º: SANDBOX (DEMO —Ç–µ—Ä–º–∏–Ω–∞–ª, —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—É—Ä)")
else:
    logger.info("üöÄ –†–µ–∂–∏–º: PROD (–±–æ–µ–≤–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª, –±–æ–µ–≤–æ–π –∫–æ–Ω—Ç—É—Ä)")
logger.info(f"   Terminal: {mask_terminal_key(TINKOFF_TERMINAL_KEY)}")
logger.info(f"   API URL: {TINKOFF_API_URL}")

def generate_order_id():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    return f"replyx_{int(datetime.utcnow().timestamp())}_{str(uuid.uuid4())[:8]}"

def normalize_phone(phone: str) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É E.164 (+7XXXXXXXXXX)
    –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Å—Å–æ–π
    """
    if not phone:
        return phone
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    digits_only = ''.join(filter(str.isdigit, phone))
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX
    if digits_only.startswith('8') and len(digits_only) == 11:
        return f"+7{digits_only[1:]}"
    elif digits_only.startswith('7') and len(digits_only) == 11:
        return f"+{digits_only}"
    elif len(digits_only) == 10:
        return f"+7{digits_only}"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
    return phone

def tinkoff_normalize_value(value):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢-–ë–∞–Ω–∫"""
    if isinstance(value, bool):
        return 'true' if value else 'false'  # –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    return str(value)

def calculate_signature(data: dict, exclude_customer_fields: bool = True) -> str:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –¢-–ë–∞–Ω–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        exclude_customer_fields: –ò—Å–∫–ª—é—á–∞—Ç—å –ª–∏ Email/Phone/Name –∏–∑ –ø–æ–¥–ø–∏—Å–∏ 
                               (True –¥–ª—è Init, False –¥–ª—è Customer –º–µ—Ç–æ–¥–æ–≤)
    """
    # –ë–∞–∑–æ–≤—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
    signature_excluded_fields = ['token', 'Token', 'Receipt', 'DATA']
    
    # –î–ª—è Init –∏—Å–∫–ª—é—á–∞–µ–º Email/Phone/Name (–æ–Ω–∏ –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –ø–æ–¥–ø–∏—Å–∏)
    # –î–ª—è Customer –º–µ—Ç–æ–¥–æ–≤ –≤–∫–ª—é—á–∞–µ–º –∏—Ö –≤ –ø–æ–¥–ø–∏—Å—å
    if exclude_customer_fields:
        signature_excluded_fields.extend(['Email', 'Phone', 'Name'])
    
    items = [(k, v) for k, v in data.items() 
             if k not in signature_excluded_fields and v is not None and str(v).strip() != '']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∫–∞–∫ Password (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¢-–ë–∞–Ω–∫)
    items.append(('Password', TINKOFF_SECRET_KEY))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º (ASCII —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)
    items.sort(key=lambda kv: kv[0])
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
    normalized_values = [tinkoff_normalize_value(v) for _, v in items]
    concatenated_string = ''.join(normalized_values)
    
    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
    if TINKOFF_DEBUG_LOGGING:
        safe_items = [(k, tinkoff_normalize_value(v)) for k, v in items if k != 'Password']
        safe_keys = [k for k, _ in safe_items]
        safe_values = [v for _, v in safe_items]
        logger.info(f"   üîê –ü–û–î–ü–ò–°–¨ (DEBUG):")
        logger.info(f"   –ü–æ–ª—è –í –ø–æ–¥–ø–∏—Å–∏: {safe_keys}")
        logger.info(f"   –ü–æ–ª—è –ò–°–ö–õ–Æ–ß–ï–ù–´: {signature_excluded_fields}")
        logger.info(f"   –ò—Å–∫–ª—é—á–∞–µ–º Email/Phone/Name: {exclude_customer_fields} (true=Init/false=Customer)")
        logger.info(f"   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {safe_values}")
        logger.info(f"   –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: {len(concatenated_string)} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        logger.debug(f"   üîê –ü–æ–¥–ø–∏—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞, –ø–æ–ª—è –≤ –ø–æ–¥–ø–∏—Å–∏: {len(items)-1}, –¥–ª–∏–Ω–∞: {len(concatenated_string)} —Å–∏–º–≤–æ–ª–æ–≤")
    # NOTE: –°—Ç—Ä–æ–∫—É –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º - —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    
    # –í—ã—á–∏—Å–ª—è–µ–º SHA256 —Ö—ç—à
    return hashlib.sha256(concatenated_string.encode('utf-8')).hexdigest()

def _tinkoff_call(method: str, payload: dict) -> requests.Response:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –∫ T-Bank API —Å –ø–æ–¥–ø–∏—Å—å—é
    """
    body = {**payload, "TerminalKey": TINKOFF_TERMINAL_KEY}
    
    # –î–ª—è Customer –º–µ—Ç–æ–¥–æ–≤ –≤–∫–ª—é—á–∞–µ–º Email/Phone/Name –≤ –ø–æ–¥–ø–∏—Å—å
    is_customer_method = method in {"AddCustomer", "UpdateCustomer", "GetCustomer"}
    body["Token"] = calculate_signature(body, exclude_customer_fields=not is_customer_method)
    
    logger.debug(f"üåê T-Bank API –≤—ã–∑–æ–≤: {method}")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ payload –±–µ–∑ Token –∏ —Å –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º TerminalKey
    safe_payload = {k: v for k, v in body.items() if k != 'Token'}
    if "TerminalKey" in safe_payload:
        safe_payload["TerminalKey"] = mask_terminal_key(str(safe_payload["TerminalKey"]))
    logger.debug(f"   Payload: {json.dumps(safe_payload, ensure_ascii=False)}")
    logger.debug(f"   Customer fields in signature: {is_customer_method}")
    
    return requests.post(
        f"{TINKOFF_API_URL}{method}", 
        json=body, 
        timeout=TINKOFF_REQUEST_TIMEOUT,
        headers={
            'Content-Type': 'application/json',
            'X-Request-ID': f"cust-{payload.get('CustomerKey', 'unknown')}"  # –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ customer –≤—ã–∑–æ–≤–æ–≤
        }
    )

def sync_customer_to_tinkoff(user_id: int, email: str = None, phone: str = None):
    """
    Best-effort —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å T-Bank –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∫ CustomerKey.
    –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å email –≤ –õ–ö –º–µ—Ä—á–∞–Ω—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —ç—Ç–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
    """
    try:
        payload = {"CustomerKey": str(user_id)}
        
        # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –ø–æ–ª—è (—É—á–∞—Å—Ç–≤—É—é—Ç –≤ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Customer –º–µ—Ç–æ–¥–æ–≤)
        if email:
            payload["Email"] = email  # –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è T-Bank
            payload["CustomerEmail"] = email  # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            
        if phone:
            normalized_phone = normalize_phone(phone)
            payload["Phone"] = normalized_phone  # –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è T-Bank
            payload["CustomerPhone"] = normalized_phone  # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        method = "AddCustomer"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ–º
        try:
            response = _tinkoff_call("GetCustomer", {"CustomerKey": str(user_id)})
            if response.status_code == 200:
                result = response.json()
                if result.get("Success"):
                    method = "UpdateCustomer"
                    logger.info(f"üîÑ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å {user_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å")
                else:
                    logger.info(f"‚ûï –ü–æ–∫—É–ø–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
            else:
                logger.info(f"‚ûï –û—à–∏–±–∫–∞ GetCustomer {response.status_code}, —Å–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.info(f"‚ûï –ò—Å–∫–ª—é—á–µ–Ω–∏–µ GetCustomer ({e}), —Å–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {user_id}")
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º Add/UpdateCustomer
        response = _tinkoff_call(method, payload)
        
        if response.status_code == 200:
            result = response.json()
            if result.get("Success"):
                logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {user_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å T-Bank ({method})")
                return True
            else:
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç T-Bank
                code = result.get("ErrorCode")
                msg = result.get("Message")
                logger.warning(f"‚ö†Ô∏è T-Bank –æ—Ç–∫–ª–æ–Ω–∏–ª {method} –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {user_id}:")
                logger.warning(f"   ErrorCode={code} Message={msg}")
                logger.warning(f"   –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(result, ensure_ascii=False)}")
                
                # Fallback: –µ—Å–ª–∏ UpdateCustomer –Ω–µ –ø—Ä–æ—à–µ–ª, –ø—Ä–æ–±—É–µ–º AddCustomer
                if method == "UpdateCustomer":
                    logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º AddCustomer –∫–∞–∫ fallback –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {user_id}")
                    response = _tinkoff_call("AddCustomer", payload)
                    if response.status_code == 200:
                        result = response.json()
                        if result.get("Success"):
                            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ fallback AddCustomer")
                            return True
                        else:
                            fallback_code = result.get("ErrorCode")
                            fallback_msg = result.get("Message")
                            logger.warning(f"‚ö†Ô∏è Fallback AddCustomer —Ç–æ–∂–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω:")
                            logger.warning(f"   ErrorCode={fallback_code} Message={fallback_msg}")
        else:
            logger.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ {method}: {response.status_code} - {response.text}")
            
    except Exception as e:
        logger.info(f"‚ÑπÔ∏è Customer sync best-effort exception: {e}")
        
    return False

def verify_webhook_signature(data: dict, received_token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook'–∞ –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    try:
        logger.info(f"üîê –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ò (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é calculate_signature —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        expected_token = calculate_signature(data)
        
        logger.info(f"   –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –¢-–ë–∞–Ω–∫: {_mask_signature(received_token)}")
        logger.info(f"   –û–∂–∏–¥–∞–ª–æ—Å—å (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ): {_mask_signature(expected_token)}")
        
        if str(received_token).lower() == str(expected_token).lower():
            logger.info("‚úÖ –ü–æ–¥–ø–∏—Å—å webhook'–∞ —Å–æ–≤–ø–∞–ª–∞!")
            return True
        else:
            logger.error(f"‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–ª–∞!")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∏ webhook'–∞: {e}")
        return False

async def init_payment_tinkoff(order_id: str, amount: int, description: str, customer_key: str, success_url: str, fail_url: str, email: str = None, phone: str = None, name: str = None):
    """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
    
    # –í–†–ï–ú–ï–ù–ù–´–ô MOCK –†–ï–ñ–ò–ú - –ø–æ–∫–∞ IP –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist –¢–∏–Ω—å–∫–æ—Ñ—Ñ
    if TINKOFF_MOCK_MODE:
        logger.info(f"üé≠ MOCK —Ä–µ–∂–∏–º: —ç–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ {order_id}")
        mock_payment_url = f"https://securepay.tinkoff.ru/new/mock_{order_id[:8]}"
        return mock_payment_url
    
    data = {
        'TerminalKey': TINKOFF_TERMINAL_KEY,
        'OrderId': order_id,
        'Amount': amount,
        'Description': description,
        'CustomerKey': customer_key,
        'SuccessURL': success_url,
        'FailURL': fail_url,
        'Language': 'ru',
        'PayType': 'O'
    }
    
    # üë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ö–£–ü–ê–¢–ï–õ–ï –î–õ–Ø –õ–ö TINKOFF MERCHANT
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –ø–æ–ª—è + –æ–±—ä–µ–∫—Ç DATA –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    customer_data = {}
    
    if email:
        # –í–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –ø–æ–ª–µ Email - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∑–∞–º–µ—Ç–Ω–æ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞–∫–∞–∑–∞
        data['Email'] = email
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ DATA –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ 
        customer_data['Email'] = email
        # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–ª—é—á –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–∏—Ç—Ä–∏–Ω –õ–ö T-Bank
        customer_data['CustomerEmail'] = email
        logger.info(f"üë§ Email –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å + DATA.Email + DATA.CustomerEmail): '{email}'")
    
    if phone:
        normalized_phone = normalize_phone(phone)
        data['Phone'] = normalized_phone
        customer_data['Phone'] = normalized_phone
        if normalized_phone != phone:
            logger.info(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω: '{phone}' ‚Üí '{normalized_phone}'")
        logger.info(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å + DATA): '{normalized_phone}'")
        
    if name:
        data['Name'] = name
        customer_data['Name'] = name
        logger.info(f"üë§ –ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–æ (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å + DATA): '{name}'")
    
    # –î–æ–±–∞–≤–ª—è–µ–º OperationInitiatorType –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π CIT/MIT –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    customer_data['OperationInitiatorType'] = '0'  # CIT CNC - —Ä–∞–∑–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç DATA (–≤—Å–µ–≥–¥–∞, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç OperationInitiatorType)
    data['DATA'] = customer_data
    logger.info(f"üìã –û–±—ä–µ–∫—Ç DATA —Å–æ–∑–¥–∞–Ω: {customer_data}")
    logger.info(f"üí≥ OperationInitiatorType: 0 (CIT CNC - –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è T-Pay/–°–ë–ü)")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç Receipt –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∫–∞—Å—Å—ã (54-–§–ó)
    receipt_contact = None
    receipt_contact_type = None
    
    if email:
        receipt_contact = email
        receipt_contact_type = "Email"
    elif phone:
        receipt_contact = normalize_phone(phone)  
        receipt_contact_type = "Phone"
    
    if receipt_contact:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞
        receipt = {
            'FfdVersion': '1.2',  # –§–§–î 1.2 –¥–ª—è T-Pay/–°–ë–ü —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            'Email': email,  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç - Email
            'Taxation': 'usn_income',  # –£–°–ù –¥–æ—Ö–æ–¥—ã (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ò–ü/–û–û–û)
            'Items': [{
                'Name': description,
                'Price': amount,  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                'Quantity': 1,
                'Amount': amount,  # –û–±—â–∞—è —Å—É–º–º–∞ = —Ü–µ–Ω–∞ * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                'Tax': 'none',  # –ë–µ–∑ –ù–î–° (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É—Å–ª—É–≥ –Ω–∞ –£–°–ù)
                'PaymentMethod': 'full_payment',  # –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–¥–ª—è –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã)
                'PaymentObject': 'service',  # –£—Å–ª—É–≥–∞
                'MeasurementUnit': 'pc'  # üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è –§–§–î 1.2: –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (—à—Ç—É–∫–∏)
            }],
            'Payments': {
                'Electronic': amount  # üî¥ –ö–†–ò–¢–ò–ß–ù–û: —Å—É–º–º–∞ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ = Amount –∏–∑ Init
            }
        }
        
        # üìß –û–¢–ü–†–ê–í–ö–ê –ß–ï–ö–û–í: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º T-Bank
        # EmailCompany –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º - –ø—É—Å—Ç—å —á–µ–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∞–º Tinkoff
        # –≠—Ç–æ –Ω–∞–¥–µ–∂–Ω–µ–µ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SPF/DKIM –Ω–∞ –Ω–∞—à–µ–º –¥–æ–º–µ–Ω–µ
        logger.info(f"üìß –ß–µ–∫–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ T-Bank (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º)")
        
        data['Receipt'] = receipt
        logger.info(f"üìÑ ‚úÖ –°–û–ó–î–ê–ù RECEIPT –î–õ–Ø –ö–ê–°–°–û–í–û–ì–û –ß–ï–ö–ê (–§–§–î 1.2):")
        logger.info(f"   üìß Email –≤ Receipt: '{email}' (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ Email)")
        logger.info(f"   üí∞ –°—É–º–º–∞: {amount} –∫–æ–ø–µ–µ–∫")
        logger.info(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: '{description}'")
        logger.info(f"   üè™ –ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ: usn_income")
        logger.info(f"   üí≥ Payments.Electronic: {amount} –∫–æ–ø–µ–µ–∫ (= Amount)")
        logger.info(f"   üí∞ PaymentMethod: full_payment (–ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç)")
        logger.info(f"   üì¶ PaymentObject: service (—É—Å–ª—É–≥–∞)")
        logger.info(f"   üìè MeasurementUnit: pc (—à—Ç—É–∫–∏)")
        logger.info(f"   üìÑ FfdVersion: 1.2 (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        logger.info(f"   üìß –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: T-Bank (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º)")
    else:
        logger.warning(f"‚ö†Ô∏è ‚ùå –ù–ï–¢ –ö–û–ù–¢–ê–ö–¢–û–í –î–õ–Ø RECEIPT - –ö–ê–°–°–û–í–´–ô –ß–ï–ö –ù–ï –ë–£–î–ï–¢ –°–§–û–†–ú–ò–†–û–í–ê–ù!")
        logger.warning(f"   üìß Email: '{email}' | üìû Phone: '{phone}'")
    
    # –î–æ–±–∞–≤–ª—è–µ–º NotificationURL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    notification_url = os.getenv('TINKOFF_NOTIFICATION_URL', '').strip()
    if notification_url and not notification_url.startswith('http://localhost'):
        data['NotificationURL'] = notification_url
    
    # üìß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–ù–û–ì–û –û–ë–™–ï–ö–¢–ê –î–ê–ù–ù–´–• –î–õ–Ø TINKOFF
    logger.info(f"üì§ –ü–û–õ–ù–´–ô –û–ë–™–ï–ö–¢ –î–ê–ù–ù–´–• –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –í TINKOFF:")
    logger.info(f"   ‚ÑπÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Ç—Ä–µ—Ö –º–µ—Å—Ç–∞—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")
    logger.info(f"      1. –í–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (Email/Phone/Name) - –∑–∞–º–µ—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ")
    logger.info(f"      2. 'DATA.Email/CustomerEmail' - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ –¥–ª—è –õ–ö –º–µ—Ä—á–∞–Ω—Ç–∞") 
    logger.info(f"      3. 'Receipt' - –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Å–æ–≤–æ–≥–æ —á–µ–∫–∞")
    logger.info(f"   üîÑ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è CustomerKey —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è")
    logger.info(f"   ‚ö†Ô∏è Email –≤ –õ–ö –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ T-Wallet),")
    logger.info(f"      –Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —á–µ–∫–µ –∏ –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö")
    logger.info(f"   üåê API URL: {TINKOFF_API_URL}")
    for key, value in data.items():
        if key == 'Receipt':
            logger.info(f"   üìÑ {key}: {value}")
        elif key == 'DATA':
            logger.info(f"   üë§ {key}: {value}")
        elif key in ['Email', 'Phone', 'Name']:
            logger.info(f"   üë§ {key}: {value}")
        elif key == 'TerminalKey':
            logger.info(f"   üîë {key}: {mask_terminal_key(str(value))}")
        elif key == 'Token':
            logger.info(f"   üîê {key}: ***–°–ö–†–´–¢***")
        else:
            logger.info(f"   üîë {key}: {value}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω (–ø–æ–¥–ø–∏—Å—å)
    logger.info(f"üîê –°–û–ó–î–ê–ù–ò–ï –ü–û–î–ü–ò–°–ò INIT –¥–ª—è {order_id}:")
    logger.info(f"   –í—Å–µ –ø–æ–ª—è –¥–ª—è Init: {sorted([k for k in data.keys()])}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –ø–æ–¥–ø–∏—Å–∏ (–¥–ª—è Init –∏—Å–∫–ª—é—á–∞–µ–º Email/Phone/Name)
    signature_excluded_fields_local = ['Receipt', 'DATA', 'Email', 'Phone', 'Name', 'Token']
    signature_fields = [k for k in data.keys() if k not in signature_excluded_fields_local]
    excluded_fields_present = [k for k in data.keys() if k in signature_excluded_fields_local]
    logger.info(f"   –ü–æ–ª—è –í–ö–õ–Æ–ß–ï–ù–´ –≤ –ø–æ–¥–ø–∏—Å—å Init: {sorted(signature_fields)}")
    logger.info(f"   –ü–æ–ª—è –ò–°–ö–õ–Æ–ß–ï–ù–´ –∏–∑ –ø–æ–¥–ø–∏—Å–∏ Init: {excluded_fields_present}")
    logger.info(f"   ‚ÑπÔ∏è –î–ª—è Customer –º–µ—Ç–æ–¥–æ–≤ Email/Phone/Name –≤–∫–ª—é—á–∞—é—Ç—Å—è –≤ –ø–æ–¥–ø–∏—Å—å")
    
    token = calculate_signature(data)
    data['Token'] = token
    
    logger.info(f"   –ü–æ–¥–ø–∏—Å—å Init: ***–°–ö–†–´–¢–ê***")
    logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ {order_id} –Ω–∞ —Å—É–º–º—É {amount} –∫–æ–ø–µ–µ–∫")
    
    try:
        # üì§ –õ–û–ì–ò–†–£–ï–ú –ü–û–õ–ù–´–ô JSON –ó–ê–ü–†–û–° –ö TINKOFF (–ë–ï–ó–û–ü–ê–°–ù–û)
        logger.info(f"üåê –û–¢–ü–†–ê–í–õ–Ø–ï–ú HTTP –ó–ê–ü–†–û–° –ö TINKOFF:")
        logger.info(f"   URL: {TINKOFF_API_URL}Init")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–∞–º–ø –±–µ–∑ Token –∏ —Å –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º TerminalKey
        safe_data = {**data}
        safe_data.pop("Token", None)
        if "TerminalKey" in safe_data:
            safe_data["TerminalKey"] = mask_terminal_key(str(safe_data["TerminalKey"]))
        logger.info(f"   JSON –¥–∞–Ω–Ω—ã–µ: {json.dumps(safe_data, ensure_ascii=False, indent=2)}")
        
        response = requests.post(
            f"{TINKOFF_API_URL}Init",
            json=data,
            headers={
                'Content-Type': 'application/json',
                'X-Request-ID': order_id  # –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            },
            timeout=TINKOFF_REQUEST_TIMEOUT
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ Init –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ (—Å—Ç–∞—Ç—É—Å {response.status_code})")
        
        # üì• –õ–û–ì–ò–†–£–ï–ú –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ –û–¢ TINKOFF
        try:
            response_json = response.json()
            logger.info(f"üåê –û–¢–í–ï–¢ –û–¢ TINKOFF:")
            logger.info(f"   JSON –æ—Ç–≤–µ—Ç: {json.dumps(response_json, ensure_ascii=False, indent=2)}")
        except:
            logger.info(f"üåê –û–¢–í–ï–¢ –û–¢ TINKOFF (–Ω–µ JSON): {response.text}")
        
        if response.status_code != 200:
            logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {response.text}")
        
        if response.status_code == 200:
            result = response.json()
            if result.get('Success') and result.get('PaymentURL'):
                logger.info(f"–ü–æ–ª—É—á–µ–Ω PaymentURL –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {result['PaymentURL']}")
                return result['PaymentURL']
            else:
                error_code = result.get('ErrorCode', 'UNKNOWN_ERROR')
                error_message = result.get('Message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
                logger.error(f"–û—à–∏–±–∫–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ {order_id}:")
                logger.error(f"  –ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}")
                logger.error(f"  –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
                logger.error(f"  –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
                
                # –ü–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_messages = {
                    'INCORRECT_PAYMENT_OPERATION': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞',
                    'OPERATION_DENIED': '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º',
                    'TERMINAL_NOT_FOUND': '–¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    'TERMINAL_BLOCKED': '–¢–µ—Ä–º–∏–Ω–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                    'OPERATION_NOT_SUPPORTED': '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
                    'AMOUNT_TOO_LOW': '–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞',
                    'AMOUNT_TOO_HIGH': '–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞',
                    'INCORRECT_MERCHANT': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞–Ω—Ç–∞'
                }
                
                user_message = user_messages.get(error_code, error_message)
                raise Exception(f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {user_message} (–∫–æ–¥: {error_code})")
        else:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ API:")
            logger.error(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
            logger.error(f"  –û—Ç–≤–µ—Ç: {response.text}")
            logger.error(f"  URL: {TINKOFF_API_URL}Init")
            
            if response.status_code == 401:
                raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
            elif response.status_code == 403:
                raise Exception("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
            elif response.status_code >= 500:
                raise Exception("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π (–∫–æ–¥ {response.status_code})")
            
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {e}")
        raise Exception("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")

@router.post("/create-payment")
@rate_limit_api(limit=10, window=300)  # üîí –ú–∞–∫—Å–∏–º—É–º 10 –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def create_payment(
    amount: float = Form(..., ge=1, le=50000),
    description: str = Form(default="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ReplyX"),
    email: str = Form(None),  # Email –¥–ª—è —á–µ–∫–∞
    phone: str = Form(None),  # –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —á–µ–∫–∞
    name: str = Form(None),   # –ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –¢-–ë–∞–Ω–∫
    """
    try:
        # üìß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê EMAIL –î–õ–Ø –ß–ï–ö–ê
        logger.info(f"üîç –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê - –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê EMAIL:")
        logger.info(f"   üìß Email –∏–∑ —Ñ–æ—Ä–º—ã: '{email}' (—Ç–∏–ø: {type(email)})")
        logger.info(f"   üë§ Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: '{current_user.email}' (—Ç–∏–ø: {type(current_user.email)})")
        logger.info(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Ñ–æ—Ä–º—ã: '{phone}' (—Ç–∏–ø: {type(phone)})")
        logger.info(f"   üë§ –ò–º—è –∏–∑ —Ñ–æ—Ä–º—ã: '{name}' (—Ç–∏–ø: {type(name)})")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_id = generate_order_id()
        
        # URLs –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        # –í sandbox —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ URL, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        if TINKOFF_SANDBOX_MODE:
            success_url = os.getenv('TINKOFF_SUCCESS_URL', 'https://httpbin.org/status/200')
            fail_url = os.getenv('TINKOFF_FAIL_URL', 'https://httpbin.org/status/400')
        else:
            success_url = os.getenv('TINKOFF_SUCCESS_URL', 'http://localhost:3000/payment/success')
            fail_url = os.getenv('TINKOFF_FAIL_URL', 'http://localhost:3000/payment/error')

        # –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º order_id –≤ SuccessURL/FailURL, —á—Ç–æ–±—ã –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ –±—ã–ª –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
        try:
            from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse
            def append_order_param(url: str, order: str) -> str:
                parsed = urlparse(url)
                qs = dict(parse_qsl(parsed.query))
                qs['order'] = order
                new_query = urlencode(qs)
                return urlunparse(parsed._replace(query=new_query))
            success_url = append_order_param(success_url, order_id)
            fail_url = append_order_param(fail_url, order_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å order –ø–∞—Ä–∞–º–µ—Ç—Ä –∫ URL: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
        payment = Payment(
            user_id=current_user.id,
            order_id=order_id,
            amount=amount,
            status='pending',
            description=description,
            success_url=success_url,
            fail_url=fail_url,
            customer_email=email,
            customer_phone=phone,
            customer_name=name
        )
        
        db.add(payment)
        db.commit()
        db.refresh(payment)
        
        # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        amount_kopecks = int(round(amount * 100))  # –¢-–ë–∞–Ω–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–æ–∫—Ä—É–≥–ª—è–µ–º, –Ω–µ —É—Å–µ–∫–∞–µ–º)
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id} –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±.")
        logger.info(f"–¢–µ—Ä–º–∏–Ω–∞–ª: {mask_terminal_key(TINKOFF_TERMINAL_KEY)}")
        logger.info(f"Sandbox —Ä–µ–∂–∏–º: {TINKOFF_SANDBOX_MODE}")
        logger.info(f"API URL: {TINKOFF_API_URL}")
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ
        user_email = email or current_user.email
        
        # üîÑ –°–û–•–†–ê–ù–Ø–ï–ú –†–ï–ê–õ–¨–ù–´–ô EMAIL, –ö–û–¢–û–†–´–ô –£–ô–î–ï–¢ –í INIT
        # –ß—Ç–æ–±—ã –≤ webhook/complete_payment –º—ã –≤–∏–¥–µ–ª–∏ —Ç–æ—Ç –∂–µ email –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        payment.customer_email = user_email
        db.commit()
        
        # üìß –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê EMAIL
        logger.info(f"üìß –ò–¢–û–ì–û–í–´–ô EMAIL –î–õ–Ø –ß–ï–ö–ê: '{user_email}' (—Ç–∏–ø: {type(user_email)})")
        if user_email:
            logger.info(f"‚úÖ Email –Ω–∞–π–¥–µ–Ω! –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω Receipt –¥–ª—è Tinkoff")
        else:
            logger.warning(f"‚ùå Email –ù–ï –ù–ê–ô–î–ï–ù! –ß–µ–∫ –ù–ï –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!")
        
        payment_url = await init_payment_tinkoff(
            order_id=order_id,
            amount=amount_kopecks,
            description=description,
            customer_key=str(current_user.id),
            success_url=success_url,
            fail_url=fail_url,
            email=user_email,  # –ü–µ—Ä–µ–¥–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Receipt
            phone=phone,
            name=name
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
        payment.payment_url = payment_url
        db.commit()
        
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        return JSONResponse(content={
            "success": True,
            "redirect_url": payment_url,
            "order_id": order_id
        })
        
    except requests.exceptions.Timeout:
        logger.error(f"Timeout –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ {order_id}")
        if 'payment' in locals():
            payment.status = 'failed'
            payment.error_message = 'Timeout –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞'
            db.commit()
        raise HTTPException(
            status_code=status.HTTP_408_REQUEST_TIMEOUT,
            detail="–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    except requests.exceptions.ConnectionError:
        logger.error(f"Connection error –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ {order_id}")
        if 'payment' in locals():
            payment.status = 'failed'
            payment.error_message = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ'
            db.commit()
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ {order_id}: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å: {traceback.format_exc()}")
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
        if 'payment' in locals():
            try:
                payment.status = 'failed'
                payment.error_message = str(e)
                payment.completed_at = datetime.utcnow()
                db.commit()
                logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment.order_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ failed —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
            except Exception as update_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {update_error}")
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                try:
                    db.delete(payment)
                    db.commit()
                except Exception as rollback_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –¥–ª—è HTTP –æ—Ç–≤–µ—Ç–∞
        error_message = str(e)
        if "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" in error_message.lower():
            status_code = status.HTTP_401_UNAUTHORIZED
        elif "–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" in error_message.lower():
            status_code = status.HTTP_403_FORBIDDEN  
        elif "—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è" in error_message.lower() or "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã" in error_message.lower():
            status_code = status.HTTP_503_SERVICE_UNAVAILABLE
        else:
            status_code = status.HTTP_400_BAD_REQUEST
            
        raise HTTPException(
            status_code=status_code,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {error_message}"
        )


@router.get("/status/{order_id}")
async def get_payment_status(
    order_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = db.query(Payment).filter(
        Payment.order_id == order_id,
        Payment.user_id == current_user.id
    ).first()
    
    if not payment:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    return {
        "order_id": payment.order_id,
        "amount": payment.amount,
        "status": payment.status,
        "created_at": payment.created_at,
        "completed_at": payment.completed_at
    }

@router.post("/complete-payment")
async def complete_payment(
    order_id: str = Form(...),
    success: bool = Form(...),
    payment_id: str = Form(None),
    error_message: str = Form(None),
    db: Session = Depends(get_db)
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ frontend –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –¢-–ë–∞–Ω–∫)
    """
    try:
        payment = db.query(Payment).filter(Payment.order_id == order_id).first()
        
        if not payment:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        if success:
            # üîí –ó–ê–©–ò–¢–ê –û–¢ –î–í–û–ô–ù–û–ì–û –¢–û–ü–ê–ü–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ —É—Å–ø–µ—à–Ω—ã–π
            if payment.status == 'success':
                logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {order_id} —É–∂–µ –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–ø–∞–ø")
                return {
                    "success": True,
                    "message": "–ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
                    "payment_status": payment.status
                }
            
            payment.status = 'success'
            payment.completed_at = datetime.utcnow()
            if payment_id:
                payment.tinkoff_payment_id = payment_id
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from services.balance_service import BalanceService
            balance_service = BalanceService(db)
            balance_service.top_up_balance(
                user_id=payment.user_id,
                amount=float(payment.amount),
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫ (–∑–∞–∫–∞–∑ {order_id})"
            )
            
            # üéØ –†–ï–ó–ï–†–í–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–†–û–§–ò–õ–Ø –ü–û–ö–£–ü–ê–¢–ï–õ–Ø (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ webhook –Ω–µ –¥–æ—à–µ–ª)
            # –ï—Å–ª–∏ ngrok —É–ø–∞–ª –∏–ª–∏ webhook –Ω–µ –¥–æ—à–µ–ª, –∫–æ–Ω—Ç–∞–∫—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ "–ø—Ä–∏–ª–∏–ø–Ω–µ—Ç" –∫ CustomerKey
            # –î—É–±–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∫–∞–∫ fallback –¥–ª—è frontend-–ø—É—Ç–∏ –æ–ø–ª–∞—Ç—ã
            sync_customer_to_tinkoff(
                user_id=payment.user_id,
                email=payment.customer_email,
                phone=payment.customer_phone
            )
            
            logger.info(f"–ü–ª–∞—Ç–µ–∂ {order_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {payment.amount} —Ä—É–±.")
        else:
            payment.status = 'failed'
            payment.completed_at = datetime.utcnow()
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ {order_id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: {error_message}")
        
        db.commit()
        
        return {
            "success": True,
            "message": "–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω",
            "payment_status": payment.status
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ {order_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"
        )

@router.post("/tinkoff-notification")
@rate_limit_by_ip(limit=100, window=3600)  # üîí –ú–∞–∫—Å–∏–º—É–º 100 webhook –≤ —á–∞—Å —Å –æ–¥–Ω–æ–≥–æ IP
async def tinkoff_notification(
    request: Request,
    db: Session = Depends(get_db)
):
    """
    Webhook endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º IP 
        forwarded_for = request.headers.get('x-forwarded-for', '')
        fallback_ip = request.client.host if request.client else 'unknown'
        client_ip = extract_client_ip(forwarded_for, fallback_ip)
        logger.info(f"Webhook –æ—Ç –¢-–ë–∞–Ω–∫ —Å IP: {client_ip}")
        if forwarded_for:
            logger.info(f"X-Forwarded-For: {forwarded_for} ‚Üí –≤—ã–±—Ä–∞–Ω: {client_ip}")
        
        # üîí –ú–Ø–ì–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê IP T-BANK (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
        if not is_tinkoff_ip(client_ip):
            logger.warning(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Webhook —Å IP {client_ip} –Ω–µ –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ whitelist T-Bank")
            logger.warning(f"üîê –ü–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        else:
            logger.info(f"‚úÖ Webhook —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ IP T-Bank: {client_ip}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º JSON –∏ form-data)
        content_type = request.headers.get('content-type', '')
        if 'application/json' in content_type:
            notification_data = await request.json()
        else:
            form_data = await request.form()
            notification_data = dict(form_data)
        
        logger.info(f"üì® –ü–û–õ–£–ß–ï–ù WEBHOOK –û–¢ T-BANK:")
        logger.info(f"   OrderId: {notification_data.get('OrderId')}")
        logger.info(f"   Status: {notification_data.get('Status')}")
        logger.info(f"   PaymentId: {notification_data.get('PaymentId')}")
        logger.info(f"   IP: {client_ip}")
        logger.info(f"   Content-Type: {content_type}")
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–ø–∏—Å–∏
        logger.info(f"üîç WEBHOOK –ê–ù–ê–õ–ò–ó –æ—Ç IP {client_ip}:")
        logger.info(f"   Content-Type: {content_type}")
        safe_data = {k: v for k, v in notification_data.items() if k not in ['Token', 'Password']}
        logger.info(f"   –í—Å–µ –ø–æ–ª—è webhook'–∞: {safe_data}")
        logger.info(f"   –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π: {sorted(list(notification_data.keys()))}")
        logger.info(f"   –ü–æ–ª—É—á–µ–Ω Token: {'***–°–ö–†–´–¢***' if notification_data.get('Token') else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['OrderId', 'Status', 'PaymentId', 'Token']
        for field in required_fields:
            if field not in notification_data:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ {field} –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"Missing required field: {field}"
                )
        
        order_id = notification_data['OrderId']
        payment_status = notification_data['Status']
        payment_id = notification_data['PaymentId']
        received_token = notification_data['Token']
        
        # üîê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ò (–æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞)
        logger.info(f"üîê –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ò –¥–ª—è {order_id}")
        logger.info(f"üîê –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å –æ—Ç T-Bank: {_mask_signature(received_token)}")
        
        if not verify_webhook_signature(notification_data, received_token):
            logger.error(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook –¥–ª—è {order_id}")
            logger.error(f"‚ùå –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å: {_mask_signature(received_token)}")
            logger.error(f"‚ùå IP –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {client_ip}")
            logger.error(f"‚ùå –í—Å–µ –¥–∞–Ω–Ω—ã–µ webhook: {notification_data}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid webhook signature - security violation"
            )
        
        logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å—å webhook'–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
        payment = db.query(Payment).filter(Payment.order_id == order_id).first()
        if not payment:
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Payment not found"
            )
        
        # üîí –ó–ê–©–ò–¢–ê –û–¢ –ü–û–í–¢–û–†–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò WEBHOOK
        if payment.webhook_processed_at:
            logger.info(f"‚ö†Ô∏è Webhook –¥–ª—è {order_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω {payment.webhook_processed_at}")
            return {"Status": "OK"}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è T-Bank
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –Ω–∞ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
        # NOTE: –¥–ª—è PayType='O' (–æ–¥–Ω–æ—Å—Ç–∞–¥–∏–π–Ω—ã–π) AUTHORIZED = —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
        # –î–ª—è –¥–≤—É—Ö—Å—Ç–∞–¥–∏–π–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π AUTHORIZED = 'pending' (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
        status_mapping = {
            'NEW': 'pending',
            'FORM_SHOWED': 'pending', 
            'AUTHORIZING': 'pending',
            'AUTHORIZED': 'success',  # –æ–¥–Ω–æ—Å—Ç–∞–¥–∏–π–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω
            'CONFIRMED': 'success',
            'PARTIAL_REFUNDED': 'partial_refund',
            'REFUNDED': 'refunded',
            'REJECTED': 'failed',
            'CANCELED': 'canceled',
            'DEADLINE_EXPIRED': 'expired',
            'FAILED': 'failed',
            'REVERSED': 'reversed',
            'PARTIAL_REVERSED': 'partial_reversed',
            '3DS_CHECKING': 'pending',
            '3DS_CHECKED': 'pending',
            'ATTEMPTS_EXPIRED': 'expired'
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        old_status = payment.status
        new_status = status_mapping.get(payment_status, 'unknown')
        
        payment.status = new_status
        payment.tinkoff_status = payment_status  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        payment.tinkoff_payment_id = payment_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'ErrorCode' in notification_data:
            payment.error_code = notification_data['ErrorCode']
        if 'Message' in notification_data:
            payment.error_message = notification_data['Message']
        if 'Pan' in notification_data:
            payment.card_mask = notification_data['Pan']
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω - –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        if new_status == 'success' and old_status != 'success':
            payment.completed_at = datetime.utcnow()
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from services.balance_service import BalanceService
            balance_service = BalanceService(db)
            balance_service.top_up_balance(
                user_id=payment.user_id,
                amount=float(payment.amount),
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫ (–∑–∞–∫–∞–∑ {order_id})"
            )
            
            logger.info(f"üéâ –ü–õ–ê–¢–ï–ñ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù:")
            logger.info(f"   OrderId: {order_id}")
            logger.info(f"   –°—É–º–º–∞: {payment.amount} —Ä—É–±.")
            logger.info(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment.user_id}")
            logger.info(f"   PaymentId: {payment_id}")
            logger.info(f"   üè¶ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {payment.amount} —Ä—É–±.")
            
            # üéØ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –ü–†–û–§–ò–õ–¨ –ü–û–ö–£–ü–ê–¢–ï–õ–Ø –í T-BANK (best-effort)
            # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å email –≤ –õ–ö –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ —ç—Ç–æ–≥–æ CustomerKey
            # ‚ö†Ô∏è –í–ê–ñ–ù–û: –¥–ª—è —É–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ email –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –∑–∞–¥–Ω–∏–º —á–∏—Å–ª–æ–º
            # –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞–∫–∞–∑–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è T-Wallet), –Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —á–µ–∫–µ –∏ 
            # –ø–æ—è–≤–∏—Ç—Å—è –≤ –õ–ö –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö —Å —Ç–µ–º –∂–µ CustomerKey
            sync_customer_to_tinkoff(
                user_id=payment.user_id,
                email=payment.customer_email,
                phone=payment.customer_phone
            )
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω/–æ—Ç–º–µ–Ω–µ–Ω - –æ—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        elif new_status in ['failed', 'canceled', 'expired'] and old_status not in ['failed', 'canceled', 'expired']:
            payment.completed_at = datetime.utcnow()
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {payment_status}")
        
        # üîí –û–¢–ú–ï–ß–ê–ï–ú WEBHOOK –ö–ê–ö –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ô
        payment.webhook_processed_at = datetime.utcnow()
        
        db.commit()
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {old_status} ‚Üí {new_status}")
        logger.info(f"üîí Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º OK –¥–ª—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        return {"Status": "OK"}
        
    except HTTPException:
        # –ü–µ—Ä–µ–ø—Ä–æ–±—Ä–æ—Å HTTPException –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal server error"
        )

@router.get("/history")
async def get_payment_history(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    payments = db.query(Payment).filter(
        Payment.user_id == current_user.id
    ).order_by(Payment.created_at.desc()).limit(50).all()
    
    return [{
        "order_id": p.order_id,
        "amount": p.amount,
        "status": p.status,
        "description": p.description,
        "created_at": p.created_at,
        "completed_at": p.completed_at,
        "payment_id": p.tinkoff_payment_id
    } for p in payments]

@router.post("/cancel/{order_id}")
async def cancel_payment(
    order_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–û—Ç–º–µ–Ω–∞/–≤–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Tinkoff Cancel API"""
    try:
        # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
        payment = db.query(Payment).filter(
            Payment.order_id == order_id,
            Payment.user_id == current_user.id
        ).first()
        
        if not payment:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        if not payment.tinkoff_payment_id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–£ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ—Ç PaymentId –æ—Ç Tinkoff"
            )
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è Cancel –∑–∞–ø—Ä–æ—Å–∞
        cancel_data = {
            'TerminalKey': TINKOFF_TERMINAL_KEY,
            'PaymentId': payment.tinkoff_payment_id
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
        token = calculate_signature(cancel_data)
        cancel_data['Token'] = token
        
        logger.info(f"üîÑ –û–¢–ú–ï–ù–ê –ü–õ–ê–¢–ï–ñ–ê {order_id} (PaymentId: {payment.tinkoff_payment_id})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å Cancel –∫ Tinkoff
        response = requests.post(
            f"{TINKOFF_API_URL}Cancel",
            json=cancel_data,
            headers={'Content-Type': 'application/json'},
            timeout=TINKOFF_REQUEST_TIMEOUT
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω Cancel –∑–∞–ø—Ä–æ—Å –¥–ª—è {order_id} (—Å—Ç–∞—Ç—É—Å {response.status_code})")
        
        if response.status_code == 200:
            result = response.json()
            if result.get('Success'):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                payment.status = 'canceled'
                payment.completed_at = datetime.utcnow()
                db.commit()
                
                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
                
                return {
                    "success": True,
                    "message": "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω",
                    "order_id": order_id,
                    "payment_id": payment.tinkoff_payment_id,
                    "status": "canceled"
                }
            else:
                error_code = result.get('ErrorCode', 'UNKNOWN')
                error_message = result.get('Message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ {order_id}: {error_code} - {error_message}")
                
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {error_message}"
                )
        else:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ {order_id}: {response.status_code}")
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ {order_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        )


# ==========================================
# PRODUCTION MONITORING & HEALTH CHECKS
# ==========================================

@router.get("/health")
async def payment_system_health(db: Session = Depends(get_db)):
    """Health check –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        recent_payments = db.query(Payment).filter(
            Payment.created_at >= datetime.utcnow() - timedelta(hours=24)
        ).count()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        successful_payments = db.query(Payment).filter(
            Payment.created_at >= datetime.utcnow() - timedelta(hours=24),
            Payment.status == 'success'
        ).count()
        
        success_rate = (successful_payments / recent_payments * 100) if recent_payments > 0 else 100
        
        health_status = {
            "status": "healthy" if success_rate >= 80 else "degraded",
            "tinkoff_api": "connected",
            "database": "connected", 
            "payments_24h": recent_payments,
            "success_rate": round(success_rate, 2),
            "timestamp": datetime.utcnow().isoformat()
        }
        
        return health_status
        
    except Exception as e:
        logger.error(f"Health check error: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }


@router.get("/metrics")
async def payment_metrics(db: Session = Depends(get_db)):
    """–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        now = datetime.utcnow()
        day_ago = now - timedelta(hours=24)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞
        total_payments = db.query(Payment).filter(Payment.created_at >= day_ago).count()
        successful_payments = db.query(Payment).filter(
            Payment.created_at >= day_ago, 
            Payment.status == 'success'
        ).count()
        failed_payments = db.query(Payment).filter(
            Payment.created_at >= day_ago,
            Payment.status == 'failed'
        ).count()
        pending_payments = db.query(Payment).filter(
            Payment.created_at >= day_ago,
            Payment.status == 'pending'
        ).count()
        
        # –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
        from sqlalchemy import func
        avg_amount = db.query(func.avg(Payment.amount)).filter(
            Payment.created_at >= day_ago,
            Payment.status == 'success'
        ).scalar() or 0
        
        return {
            "payments_24h": {
                "total": total_payments,
                "successful": successful_payments,
                "failed": failed_payments, 
                "pending": pending_payments,
                "success_rate": round((successful_payments / total_payments * 100) if total_payments > 0 else 0, 2)
            },
            "average_amount": round(float(avg_amount), 2),
            "timestamp": now.isoformat()
        }
        
    except Exception as e:
        logger.error(f"Metrics error: {e}")
        return {"error": str(e), "timestamp": datetime.utcnow().isoformat()}