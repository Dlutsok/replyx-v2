from fastapi import APIRouter, Depends, HTTPException, Query, Body, BackgroundTasks
from sqlalchemy.orm import Session
from sqlalchemy import func, or_
from typing import List, Optional
from datetime import datetime, timezone
import json
import logging
from pydantic import BaseModel

from database import SessionLocal, models, schemas, crud, auth
from database.connection import get_db
from validators.rate_limiter import rate_limit_api
from cache.redis_cache import cache
from validators.input_validator import (
    validate_user_profile_data, 
    ValidationError, create_validation_error_response
)

logger = logging.getLogger(__name__)

router = APIRouter()

# get_db –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ database.connection

# --- Admin User Management ---

# GET /admin/users endpoint –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ api/admin.py –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

@router.post("/admin/users", response_model=schemas.UserRead)
@rate_limit_api(limit=20, window=60)  # 20 —Å–æ–∑–¥–∞–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º–∏–Ω—É—Ç—É
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db), current_user: models.User = Depends(auth.get_current_admin)):
    db_user = crud.create_user(db, user)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    if hasattr(user, 'ai_token') and user.ai_token:
        crud.set_openai_token(db, db_user.id, user.ai_token)
    
    if hasattr(user, 'telegram_token') and user.telegram_token:
        crud.set_telegram_token(db, db_user.id, user.telegram_token)
    
    return db_user

@router.patch("/admin/users/{user_id}", response_model=schemas.UserRead)
def update_user(user_id: int, user_update: schemas.UserUpdate, db: Session = Depends(get_db), current_user: models.User = Depends(auth.get_current_admin)):
    print(f"[ENDPOINT] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"[ENDPOINT] –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {user_update.dict()}")
    print(f"[ENDPOINT] –¢–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω: {current_user.email}")
    result = crud.update_user(db, user_id, user_update)
    if not result:
        print(f"[ENDPOINT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=404, detail="User not found")
    print(f"[ENDPOINT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    return result

@router.delete("/admin/users/{user_id}")
@rate_limit_api(limit=10, window=60)  # 10 —É–¥–∞–ª–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
def delete_user_endpoint(user_id: int, db: Session = Depends(get_db), current_user: models.User = Depends(auth.get_current_admin)):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = crud.get_user(db, user_id)
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    user_email = user.email
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    user_bot_instances = db.query(models.BotInstance).filter(models.BotInstance.user_id == user_id).all()
    
    try:
        # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        import requests
        for bot_instance in user_bot_instances:
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å
                requests.post(f'http://localhost:3001/workers/{bot_instance.id}/stop', timeout=5)
                print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–æ—Ç {bot_instance.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_instance.id}: {e}")
        
        # 2. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ crud.py
        # –û–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        success = crud.delete_user(db, user_id)
        
        if not success:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–æ–º
        try:
            requests.post('http://localhost:3001/workers/sync', timeout=10)
            print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user_email}) –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        
        return {"ok": True, "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã"}
        
    except HTTPException:
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        raise
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@router.get("/admin/users/detailed")
def get_detailed_users(
    page: int = Query(1, ge=1),
    limit: int = Query(50, ge=1, le=100),
    search: str = Query(None),
    status: str = Query(None),
    db: Session = Depends(get_db), 
    current_user: models.User = Depends(auth.get_current_admin)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (TTL: 2 –º–∏–Ω—É—Ç—ã –¥–ª—è admin –¥–∞–Ω–Ω—ã—Ö)
    cache_params = {
        "page": page,
        "limit": limit,
        "search": search or "none",
        "status": status or "none"
    }
    cached_result = cache.get("admin_users_detailed", **cache_params)
    
    if cached_result:
        logger.debug("üöÄ CACHE HIT: Admin users detailed")
        return cached_result
    
    logger.debug("üîç CACHE MISS: –ó–∞–≥—Ä—É–∂–∞–µ–º admin users detailed")
    
    query = db.query(models.User)
    
    # –§–∏–ª—å—Ç—Ä—ã
    if search:
        query = query.filter(
            or_(
                models.User.email.ilike(f"%{search}%"),
                models.User.first_name.ilike(f"%{search}%")
            )
        )
    
    if status:
        query = query.filter(models.User.status == status)
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    total = query.count()
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    offset = (page - 1) * limit
    users = query.offset(offset).limit(limit).all()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï N+1: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    user_ids = [user.id for user in users]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    dialogs_stats = db.query(
        models.Dialog.user_id,
        func.count(models.Dialog.id).label('total_dialogs'),
        func.max(models.Dialog.started_at).label('last_activity')
    ).filter(
        models.Dialog.user_id.in_(user_ids)
    ).group_by(models.Dialog.user_id).all()
    
    dialogs_dict = {stat.user_id: (stat.total_dialogs, stat.last_activity) for stat in dialogs_stats}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    messages_stats = db.query(
        models.Dialog.user_id,
        func.count(models.DialogMessage.id).label('total_messages')
    ).join(models.DialogMessage).filter(
        models.Dialog.user_id.in_(user_ids)
    ).group_by(models.Dialog.user_id).all()
    
    messages_dict = {stat.user_id: stat.total_messages for stat in messages_stats}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    assistants_stats = db.query(
        models.Assistant.user_id,
        func.count(models.Assistant.id).label('total_assistants')
    ).filter(
        models.Assistant.user_id.in_(user_ids)
    ).group_by(models.Assistant.user_id).all()
    
    assistants_dict = {stat.user_id: stat.total_assistants for stat in assistants_stats}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    documents_stats = db.query(
        models.Document.user_id,
        func.count(models.Document.id).label('total_documents')
    ).filter(
        models.Document.user_id.in_(user_ids)
    ).group_by(models.Document.user_id).all()
    
    documents_dict = {stat.user_id: stat.total_documents for stat in documents_stats}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    detailed_users = []
    for user in users:
        total_dialogs, last_activity = dialogs_dict.get(user.id, (0, None))
        total_messages = messages_dict.get(user.id, 0)
        total_assistants = assistants_dict.get(user.id, 0)
        total_documents = documents_dict.get(user.id, 0)
        
        detailed_users.append({
            "id": user.id,
            "email": user.email,
            "first_name": user.first_name,
            "role": user.role,
            "status": user.status,
            "created_at": user.created_at,
            "is_email_confirmed": user.is_email_confirmed,
            "stats": {
                "totalDialogs": total_dialogs,
                "totalMessages": total_messages,
                "totalAssistants": total_assistants,
                "totalDocuments": total_documents,
                "lastActivity": last_activity
            }
        })
    
    result = {
        "users": detailed_users,
        "pagination": {
            "page": page,
            "limit": limit,
            "total": total,
            "pages": (total + limit - 1) // limit
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è admin –¥–∞–Ω–Ω—ã—Ö
    cache.set("admin_users_detailed", result, 120, **cache_params)
    
    return result

# --- User Profile Management ---

@router.post("/update-activity")
def update_user_activity(current_user: models.User = Depends(auth.get_current_user), db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –õ–ö"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = db.query(models.User).filter(models.User.id == current_user.id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    old_activity = user.last_activity
    new_activity = datetime.now(timezone.utc)
    user.last_activity = new_activity
    db.commit()
    logger.debug(f"User activity updated: {user.id}")
    return {"status": "ok", "timestamp": user.last_activity.isoformat()}

@router.get("/me")
def get_me(current_user: models.User = Depends(auth.get_current_user), db: Session = Depends(get_db)):
    print(f"[GET_ME] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.id} - –≤–æ–∑–≤—Ä–∞—â–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from services.balance_service import BalanceService
    balance_service = BalanceService(db)
    user_balance = balance_service.get_balance(current_user.id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response_data = {
        "id": current_user.id,
        "email": current_user.email,
        "role": current_user.role,
        "status": current_user.status,
        "created_at": current_user.created_at.isoformat(),
        "first_name": getattr(current_user, 'first_name', None) or "",
        "is_employee": False,
        "balance": user_balance
    }
    
    return response_data

@router.patch("/me")
def update_me(data: dict = Body(...), current_user: models.User = Depends(auth.get_current_user), db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.debug(f"User {current_user.id} updating profile")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        validated_data = validate_user_profile_data(data)
    except ValidationError as e:
        raise create_validation_error_response(e)
    
    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    allowed_fields = ['first_name']
    
    updated = False
    for field, value in validated_data.items():
        if field in allowed_fields and hasattr(current_user, field):
            setattr(current_user, field, value)
            updated = True
            logger.debug(f"Updated field {field} for user {current_user.id}")
    
    if updated:
        db.commit()
        db.refresh(current_user)
        logger.info(f"Profile updated for user {current_user.id}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    response_data = {
        "id": current_user.id,
        "email": current_user.email,
        "role": current_user.role,
        "status": current_user.status,
        "created_at": current_user.created_at.isoformat(),
        "first_name": getattr(current_user, 'first_name', None) or ""
    }
    
    return response_data

@router.get("/me/rate-limits")
def get_my_rate_limits(
    current_user: models.User = Depends(auth.get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–∏—Ö rate limits"""
    from validators.rate_limiter import rate_limiter
    
    try:
        user_stats = rate_limiter.get_user_stats(current_user.id)
        return {
            "user_id": current_user.id,
            "rate_limits": user_stats,
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        return {
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }

# --- User Onboarding ---

class OnboardingStatusUpdate(BaseModel):
    step: Optional[int] = None
    completed: Optional[bool] = None
    skipped: Optional[bool] = None

class TutorialTipSave(BaseModel):
    tip_id: str

@router.get("/users/onboarding/status")
def get_onboarding_status(
    current_user: models.User = Depends(auth.get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –ë–î
        user = db.query(models.User).filter(models.User.id == current_user.id).first()
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {
            "onboarding_completed": user.onboarding_completed,
            "onboarding_step": user.onboarding_step,
            "onboarding_started_at": user.onboarding_started_at,
            "onboarding_completed_at": user.onboarding_completed_at,
            "onboarding_skipped": user.onboarding_skipped,
            "first_bot_created": user.first_bot_created,
            "first_message_sent": user.first_message_sent,
            "tutorial_tips_shown": json.loads(user.tutorial_tips_shown or "[]"),
            "should_show_onboarding": not user.onboarding_completed and not user.onboarding_skipped
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞")

@router.post("/users/onboarding/start")
def start_onboarding(
    current_user: models.User = Depends(auth.get_current_user),
    db: Session = Depends(get_db)
):
    """–ù–∞—á–∞—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"""
    try:
        current_user.onboarding_started_at = datetime.utcnow()
        current_user.onboarding_step = 1
        current_user.onboarding_completed = False
        current_user.onboarding_skipped = False
        
        db.commit()
        db.refresh(current_user)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.id} –Ω–∞—á–∞–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥")
        
        return {
            "message": "–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –Ω–∞—á–∞—Ç",
            "onboarding_step": current_user.onboarding_step,
            "started_at": current_user.onboarding_started_at
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞")

@router.post("/users/onboarding/update-step")
def update_onboarding_step(
    data: OnboardingStatusUpdate,
    current_user: models.User = Depends(auth.get_current_user),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —à–∞–≥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    try:
        if data.step is not None:
            current_user.onboarding_step = data.step
            
        if data.completed is not None:
            current_user.onboarding_completed = data.completed
            if data.completed:
                current_user.onboarding_completed_at = datetime.utcnow()
                
        if data.skipped is not None:
            current_user.onboarding_skipped = data.skipped
        
        db.commit()
        db.refresh(current_user)
        
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}: step={data.step}, completed={data.completed}, skipped={data.skipped}")
        
        return {
            "message": "–°—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω",
            "onboarding_step": current_user.onboarding_step,
            "onboarding_completed": current_user.onboarding_completed,
            "onboarding_skipped": current_user.onboarding_skipped
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–≥–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞")

@router.post("/users/onboarding/complete")
def complete_onboarding(
    current_user: models.User = Depends(auth.get_current_user),
    db: Session = Depends(get_db)
):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"""
    try:
        current_user.onboarding_completed = True
        current_user.onboarding_completed_at = datetime.utcnow()
        current_user.onboarding_step = 5  # –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥
        current_user.first_bot_created = True  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
        
        db.commit()
        db.refresh(current_user)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥")
        
        return {
            "message": "–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω",
            "completed_at": current_user.onboarding_completed_at,
            "first_bot_created": current_user.first_bot_created
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞")

@router.post("/users/onboarding/skip")
def skip_onboarding(
    current_user: models.User = Depends(auth.get_current_user),
    db: Session = Depends(get_db)
):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"""
    try:
        current_user.onboarding_skipped = True
        current_user.onboarding_completed = True  # –°—á–∏—Ç–∞–µ–º "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º" —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        current_user.onboarding_completed_at = datetime.utcnow()
        
        db.commit()
        db.refresh(current_user)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥")
        
        return {
            "message": "–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω",
            "skipped": True,
            "completed_at": current_user.onboarding_completed_at
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞")

@router.post("/users/onboarding/save-tip")
def save_tutorial_tip(
    data: TutorialTipSave,
    current_user: models.User = Depends(auth.get_current_user),
    db: Session = Depends(get_db)
):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ"""
    try:
        shown_tips = json.loads(current_user.tutorial_tips_shown or "[]")
        
        if data.tip_id not in shown_tips:
            shown_tips.append(data.tip_id)
            current_user.tutorial_tips_shown = json.dumps(shown_tips)
            
            db.commit()
            db.refresh(current_user)
            
        return {
            "message": "–ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
            "shown_tips": shown_tips
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏")

@router.post("/users/onboarding/mark-first-message")
def mark_first_message_sent(
    current_user: models.User = Depends(auth.get_current_user),
    db: Session = Depends(get_db)
):
    """–û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        current_user.first_message_sent = True
        
        db.commit()
        db.refresh(current_user)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        return {
            "message": "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ",
            "first_message_sent": True
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.post("/users/onboarding/mark-bot-created")
def mark_bot_created(
    current_user: models.User = Depends(auth.get_current_user),
    db: Session = Depends(get_db)
):
    """–û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        user = db.query(models.User).filter(models.User.id == current_user.id).first()
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        user.first_bot_created = True
        
        db.commit()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–æ–∑–¥–∞–ª –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞")
        
        return {
            "message": "–ü–µ—Ä–≤—ã–π –±–æ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–π",
            "first_bot_created": True
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞")