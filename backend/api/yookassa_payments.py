from fastapi import APIRouter, Depends, HTTPException, status, Form, Request
from fastapi.responses import HTMLResponse, JSONResponse
from sqlalchemy.orm import Session
from database.connection import get_db
from database.models import User, Payment, UserBalance, BalanceTransaction
from database import models
from core.auth import get_current_user
from validators.rate_limiter import rate_limit_api, rate_limit_by_ip
from datetime import datetime, timedelta
import uuid
import os
import logging
import hashlib
import requests
import json
import base64
from typing import List, Optional


logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api/payments", tags=["payments"])

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ÆKassa
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID', 'your_shop_id_here')
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY', 'your_secret_key_here')
YOOKASSA_TEST_MODE = os.getenv('YOOKASSA_TEST_MODE', 'true').lower() == 'true'

# API URLs
YOOKASSA_API_URL = 'https://api.yookassa.ru/v3/'

# URLs –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
YOOKASSA_SUCCESS_URL = os.getenv('YOOKASSA_SUCCESS_URL', 'https://replyx.ru/payment/success')
YOOKASSA_FAIL_URL = os.getenv('YOOKASSA_FAIL_URL', 'https://replyx.ru/payment/error')

def mask_shop_id(shop_id: str) -> str:
    """–ú–∞—Å–∫–∏—Ä—É–µ—Ç Shop ID –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not shop_id or len(shop_id) <= 6:
        return shop_id
    return f"{shop_id[:3]}***{shop_id[-3:]}"

def generate_idempotence_key() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ÆKassa"""
    return str(uuid.uuid4())

def get_basic_auth_header() -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Basic Auth –¥–ª—è –ÆKassa API"""
    credentials = f"{YOOKASSA_SHOP_ID}:{YOOKASSA_SECRET_KEY}"
    encoded_credentials = base64.b64encode(credentials.encode()).decode()
    return f"Basic {encoded_credentials}"

def log_yookassa_mode():
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ÆKassa"""
    mode = "TEST" if YOOKASSA_TEST_MODE else "PROD"
    logger.info(f"üöÄ –†–µ–∂–∏–º –ÆKassa: {mode}")
    logger.info(f"   Shop ID: {mask_shop_id(YOOKASSA_SHOP_ID)}")
    logger.info(f"   API URL: {YOOKASSA_API_URL}")

# –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
log_yookassa_mode()

@router.post("/create-payment")
@rate_limit_api(limit=10, window=60)  # 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
async def create_payment(
    request: Request,
    amount: float = Form(..., gt=0, description="–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ä—É–±–ª—è—Ö"),
    email: str = Form(None, description="Email –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è —á–µ–∫–∞"),
    phone: str = Form(None, description="–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"),
    name: str = Form(None, description="–ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"),
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa API
    
    Args:
        amount: –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50)
        email: Email –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        phone: –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) 
        name: –ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
    """
    try:
        logger.info(f"üîç –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê –ÆKASSA - –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
        logger.info(f"   üìß Email –∏–∑ —Ñ–æ—Ä–º—ã: '{email}' (—Ç–∏–ø: {type(email)})")
        logger.info(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Ñ–æ—Ä–º—ã: '{phone}' (—Ç–∏–ø: {type(phone)})")
        logger.info(f"   üë§ –ò–º—è –∏–∑ —Ñ–æ—Ä–º—ã: '{name}' (—Ç–∏–ø: {type(name)})")
        
        user = current_user  # current_user —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º User
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        logger.info(f"   üë§ Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: '{user.email}' (—Ç–∏–ø: {type(user.email)})")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∏–∑ —Ñ–æ—Ä–º—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –∏–Ω–∞—á–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        final_email = email or user.email
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π order_id
        order_id = f"replyx_{int(datetime.now().timestamp())}_{uuid.uuid4().hex[:8]}"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
        payment = Payment(
            user_id=user.id,
            order_id=order_id,
            amount=amount,
            currency="RUB",
            status="pending",
            payment_method="yookassa",
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ReplyX –Ω–∞ {amount} —Ä—É–±.",
            # –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            customer_email=final_email,
            customer_phone=phone,
            customer_name=name,
            created_at=datetime.utcnow()
        )
        
        db.add(payment)
        db.commit()
        db.refresh(payment)
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±.")
        log_yookassa_mode()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ÆKassa API
        idempotence_key = generate_idempotence_key()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        success_url = f"{YOOKASSA_SUCCESS_URL}?order={order_id}"
        
        yookassa_data = {
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "capture": True,  # –û–¥–Ω–æ—Å—Ç–∞–¥–∏–π–Ω–∞—è –æ–ø–ª–∞—Ç–∞
            "confirmation": {
                "type": "redirect",
                "return_url": success_url
            },
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ReplyX –Ω–∞ {amount} —Ä—É–±.",
            "metadata": {
                "order_id": order_id,
                "user_id": str(user.id)
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if final_email or phone or name:
            customer_data = {}
            if final_email:
                customer_data["email"] = final_email
            if phone:
                customer_data["phone"] = phone
            if name:
                customer_data["full_name"] = name
                
            if customer_data:
                yookassa_data["customer"] = customer_data
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å email
        if final_email:
            yookassa_data["receipt"] = {
                "customer": {
                    "email": final_email
                },
                "items": [
                    {
                        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ReplyX –Ω–∞ {amount} —Ä—É–±.",
                        "amount": {
                            "value": f"{amount:.2f}",
                            "currency": "RUB"
                        },
                        "quantity": "1",
                        "vat_code": 1,  # –ù–î–° –Ω–µ –æ–±–ª–∞–≥–∞–µ—Ç—Å—è
                        "payment_subject": "service",  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è YooKassa
                        "payment_mode": "full_payment"  # –ü–æ–ª–Ω–∞—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
                    }
                ]
            }
            logger.info(f"üìÑ ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —á–µ–∫ –¥–ª—è email: {final_email}")
        
        logger.info("üì§ –û–¢–ü–†–ê–í–õ–Ø–ï–ú HTTP –ó–ê–ü–†–û–° –ö –ÆKASSA:")
        logger.info(f"   URL: {YOOKASSA_API_URL}payments")
        logger.info(f"   Idempotence-Key: {idempotence_key}")
        logger.info(f"   JSON –¥–∞–Ω–Ω—ã–µ: {json.dumps(yookassa_data, indent=2, ensure_ascii=False)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ÆKassa
        headers = {
            'Authorization': get_basic_auth_header(),
            'Idempotence-Key': idempotence_key,
            'Content-Type': 'application/json'
        }
        
        response = requests.post(
            f"{YOOKASSA_API_URL}payments",
            json=yookassa_data,
            headers=headers,
            timeout=30
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ –ÆKassa –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ÆKassa (—Å—Ç–∞—Ç—É—Å {response.status_code})")
        
        if response.status_code == 200:
            response_data = response.json()
            logger.info("üåê –û–¢–í–ï–¢ –û–¢ –ÆKASSA:")
            logger.info(f"   JSON –æ—Ç–≤–µ—Ç: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç –ÆKassa
            payment.yookassa_payment_id = response_data.get('id')
            payment.yookassa_status = response_data.get('status')
            db.commit()
            
            payment_url = response_data.get('confirmation', {}).get('confirmation_url')
            if payment_url:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω PaymentURL –æ—Ç –ÆKassa: {payment_url}")
                return JSONResponse(
                    status_code=200,
                    content={
                        "success": True,
                        "redirect_url": payment_url,  # –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–∂–∏–¥–∞–µ—Ç redirect_url
                        "payment_url": payment_url,   # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        "order_id": order_id,
                        "payment_id": response_data.get('id'),
                        "amount": amount,
                        "currency": "RUB"
                    }
                )
            else:
                logger.error("–ÆKassa –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ confirmation_url")
                raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã")
        else:
            error_data = response.json() if response.headers.get('content-type', '').startswith('application/json') else response.text
            logger.error(f"–û—à–∏–±–∫–∞ –ÆKassa API: {response.status_code} - {error_data}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            payment.status = "failed"
            payment.yookassa_status = "failed"
            db.commit()
            
            raise HTTPException(
                status_code=500, 
                detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {error_data}"
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.post("/yookassa-webhook")
@rate_limit_by_ip(limit=100, window=3600)  # 100 webhook –≤ —á–∞—Å —Å –æ–¥–Ω–æ–≥–æ IP
async def yookassa_webhook(
    request: Request,
    db: Session = Depends(get_db)
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆKassa
    
    –ÆKassa –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º IP –∫–ª–∏–µ–Ω—Ç–∞  
        client_ip = request.client.host
        forwarded_for = request.headers.get('X-Forwarded-For')
        if forwarded_for:
            client_ip = forwarded_for.split(',')[0].strip()
            
        logger.info(f"üì® –ü–û–õ–£–ß–ï–ù WEBHOOK –û–¢ –ÆKASSA —Å IP: {client_ip}")
        
        # –ß–∏—Ç–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        webhook_data = await request.json()
        
        logger.info(f"üîç WEBHOOK –î–ê–ù–ù–´–ï –æ—Ç –ÆKassa:")
        logger.info(f"   –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {webhook_data.get('event')}")
        logger.info(f"   –í—Å–µ –ø–æ–ª—è: {list(webhook_data.keys())}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        payment_data = webhook_data.get('object', {})
        yookassa_payment_id = payment_data.get('id')
        payment_status = payment_data.get('status')
        paid = payment_data.get('paid', False)
        
        logger.info(f"   Payment ID: {yookassa_payment_id}")
        logger.info(f"   Status: {payment_status}")
        logger.info(f"   Paid: {paid}")
        
        if not yookassa_payment_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–ª–∞—Ç–µ–∂–∞ –≤ webhook")
            return JSONResponse(status_code=400, content={"error": "Missing payment ID"})
        
        # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
        payment = db.query(Payment).filter(
            Payment.yookassa_payment_id == yookassa_payment_id
        ).first()
        
        if not payment:
            logger.error(f"–ü–ª–∞—Ç–µ–∂ —Å –ÆKassa ID {yookassa_payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return JSONResponse(status_code=404, content={"error": "Payment not found"})
            
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂: {payment.order_id} (—Å—É–º–º–∞: {payment.amount} —Ä—É–±.)")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        old_status = payment.status
        payment.yookassa_status = payment_status
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –ÆKassa –≤ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
        status_mapping = {
            'pending': 'pending',
            'waiting_for_capture': 'processing', 
            'succeeded': 'completed',
            'canceled': 'cancelled'
        }
        
        new_status = status_mapping.get(payment_status, payment_status)
        payment.status = new_status
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        if payment_status == 'succeeded' and paid and old_status != 'completed':
            user = db.query(User).filter(User.id == payment.user_id).first()
            if user:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞
                user_balance = db.query(UserBalance).filter(UserBalance.user_id == user.id).first()
                if not user_balance:
                    user_balance = UserBalance(user_id=user.id, balance=0.00)
                    db.add(user_balance)
                    db.flush()
                
                old_balance = float(user_balance.balance or 0)
                new_balance = old_balance + float(payment.amount)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                user_balance.balance = new_balance
                user_balance.total_topped_up = float(user_balance.total_topped_up or 0) + float(payment.amount)
                user_balance.updated_at = datetime.utcnow()
                
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                transaction = BalanceTransaction(
                    user_id=user.id,
                    amount=float(payment.amount),
                    transaction_type='topup',
                    description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ÆKassa: {payment.order_id}",
                    balance_before=old_balance,
                    balance_after=new_balance,
                    related_id=payment.id,
                    created_at=datetime.utcnow()
                )
                db.add(transaction)
                
                logger.info(f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {old_balance} + {payment.amount} = {new_balance} —Ä—É–±.")
            else:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {payment.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
        
        payment.updated_at = datetime.utcnow()
        db.commit()
        
        logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment.order_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {old_status} ‚Üí {new_status}")
        
        return JSONResponse(
            status_code=200, 
            content={"status": "ok", "message": "Webhook processed successfully"}
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ÆKassa webhook: {str(e)}", exc_info=True)
        return JSONResponse(status_code=500, content={"error": "Internal server error"})


@router.get("/payment-status/{order_id}")
@rate_limit_api(limit=30, window=60)
async def get_payment_status(
    order_id: str,
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ order_id"""
    try:
        payment = db.query(Payment).filter(
            Payment.order_id == order_id,
            Payment.user_id == current_user.id
        ).first()
        
        if not payment:
            raise HTTPException(status_code=404, detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        return JSONResponse(
            status_code=200,
            content={
                "order_id": payment.order_id,
                "status": payment.status,
                "yookassa_status": payment.yookassa_status,
                "amount": float(payment.amount),
                "currency": payment.currency,
                "created_at": payment.created_at.isoformat(),
                "description": payment.description
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {order_id}: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")