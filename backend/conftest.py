"""
–ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ç—Ä–∞—Ç —Ç–æ–∫–µ–Ω–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ—Ç —Ñ–µ–π–∫–æ–≤—ã–π LLM —Ä–µ–∂–∏–º –≤–æ –≤—Å–µ—Ö —Ç–µ—Å—Ç–∞—Ö
"""

import os
import pytest
import logging

logger = logging.getLogger(__name__)


@pytest.fixture(autouse=True, scope="session")
def force_test_environment():
    """
    –ö–†–ò–¢–ò–ß–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∞—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ –≤–æ –≤—Å–µ—Ö —Ç–µ—Å—Ç–∞—Ö
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    original_env = {}
    
    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ç—Ä–∞—Ç —Ç–æ–∫–µ–Ω–æ–≤
    test_env_vars = {
        "ENVIRONMENT": "test",
        "LLM_PROVIDER": "fake", 
        "FAKE_LLM_MODE": "echo",
        "BLOCK_EXTERNAL_IO": "true",
        "IS_TEST_ENV": "true",
        "SECRET_KEY": "dummy_secret_key_for_tests_only",
        "OPENAI_API_KEY": "dummy",
        "REPLYX_PROXY_DISABLED": "1"
    }
    
    for key, value in test_env_vars.items():
        original_env[key] = os.environ.get(key)
        os.environ[key] = value
        
    logger.info("üîí Test environment enforced - all external LLM calls blocked")
    logger.info(f"üîí Environment variables: {test_env_vars}")
    
    yield
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    for key, original_value in original_env.items():
        if original_value is None:
            os.environ.pop(key, None)
        else:
            os.environ[key] = original_value


@pytest.fixture(autouse=True, scope="function")  
def verify_no_real_llm():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ –∫–∞–∂–¥–æ–º —Ç–µ—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ FakeLLM
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    """
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥–æ–º —Ç–µ—Å—Ç–µ
    critical_vars = {
        "ENVIRONMENT": "test",
        "LLM_PROVIDER": "fake", 
        "FAKE_LLM_MODE": "echo",
        "BLOCK_EXTERNAL_IO": "true",
        "IS_TEST_ENV": "true",
        "SECRET_KEY": "dummy_secret_key_for_tests_only",
        "OPENAI_API_KEY": "dummy",
        "REPLYX_PROXY_DISABLED": "1"
    }
    
    for key, value in critical_vars.items():
        os.environ[key] = value
    
    # –ü–µ—Ä–µ–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import importlib
    import services.ws_config
    import services.llm_client
    importlib.reload(services.ws_config)
    importlib.reload(services.llm_client)
    
    from services.llm_client import get_llm, FakeLLM
    from services.ws_config import IS_TEST_ENV, BLOCK_EXTERNAL_IO, LLM_PROVIDER, ENVIRONMENT
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    assert ENVIRONMENT == "test", f"ENVIRONMENT must be 'test' in tests, got: {ENVIRONMENT}"
    assert IS_TEST_ENV, f"IS_TEST_ENV must be True in tests, got: {IS_TEST_ENV}"
    assert BLOCK_EXTERNAL_IO, f"BLOCK_EXTERNAL_IO must be True in tests, got: {BLOCK_EXTERNAL_IO}"
    assert LLM_PROVIDER == "fake", f"LLM_PROVIDER must be 'fake' in tests, got: {LLM_PROVIDER}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ get_llm() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ FakeLLM
    llm = get_llm()
    assert llm.__class__.__name__ == "FakeLLM", f"Expected FakeLLM, got: {type(llm)}"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å dry_run=False (–¥–æ–ª–∂–µ–Ω –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–µ—Ä–Ω—É—Ç—å FakeLLM)
    llm_no_dry = get_llm(dry_run=False)
    assert llm_no_dry.__class__.__name__ == "FakeLLM", f"Even with dry_run=False, expected FakeLLM in tests, got: {type(llm_no_dry)}"
    
    yield
    
    logger.debug("‚úÖ Test completed without real LLM usage")


# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤

@pytest.fixture
def fake_llm():
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç FakeLLM –∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    from services.llm_client import FakeLLM
    return FakeLLM(mode="echo")


@pytest.fixture  
def mock_ai_messages():
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI"""
    return [
        {"role": "system", "content": "You are a helpful assistant"}, 
        {"role": "user", "content": "Hello, how are you?"}
    ]


@pytest.fixture
def dry_run_headers():
    """HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è dry-run —Ä–µ–∂–∏–º–∞"""
    return {"X-Dry-Run": "1", "Content-Type": "application/json"}


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è pytest

def pytest_configure(config):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã"""
    config.addinivalue_line(
        "markers", 
        "live_ai: mark test to use real AI providers (requires explicit opt-in)"
    )
    config.addinivalue_line(
        "markers",
        "external_io: mark test as requiring external network access"
    )


@pytest.fixture
def live_ai_test(request):
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
    –¢—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ @pytest.mark.live_ai
    """
    if not request.node.get_closest_marker("live_ai"):
        pytest.skip("Test requires @pytest.mark.live_ai marker")
        
    # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –≤—ã–∑–æ–≤—ã –¢–û–õ–¨–ö–û –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    original_block = os.environ.get("BLOCK_EXTERNAL_IO")
    os.environ["BLOCK_EXTERNAL_IO"] = "false"
    
    logger.warning("‚ö†Ô∏è LIVE AI TEST: Real tokens may be spent!")
    
    yield
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É
    if original_block:
        os.environ["BLOCK_EXTERNAL_IO"] = original_block
        
        
# –•—É–∫ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤

def pytest_sessionfinish(session, exitstatus):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üîí Test session completed with token spending protection active")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ —Å live_ai –º–∞—Ä–∫–µ—Ä–æ–º
    live_ai_tests = []
    for item in session.items:
        if item.get_closest_marker("live_ai"):
            live_ai_tests.append(item.name)
            
    if live_ai_tests:
        logger.warning(f"‚ö†Ô∏è {len(live_ai_tests)} tests marked for live AI usage: {live_ai_tests}")
    else:
        logger.info("‚úÖ No tests used real AI providers - zero tokens spent")
        

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

class NoTokensError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º–æ–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ —Ç–µ—Å—Ç–∞—Ö"""
    pass


def ensure_no_tokens_spent():
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —è–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ os.environ –Ω–∞–ø—Ä—è–º—É—é, —Ç.–∫. –∏–º–ø–æ—Ä—Ç—ã –∫–µ—à–∏—Ä—É—é—Ç—Å—è
    is_test_env = os.getenv('ENVIRONMENT', 'development').lower() in {'test', 'ci'} or os.getenv('IS_TEST_ENV', 'false').lower() == 'true'
    block_external_io = os.getenv('BLOCK_EXTERNAL_IO', 'false').lower() == 'true'
    
    if not is_test_env or not block_external_io:
        raise NoTokensError(
            "Token spending protection is not active! "
            f"IS_TEST_ENV={is_test_env}, BLOCK_EXTERNAL_IO={block_external_io}"
        )