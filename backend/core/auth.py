from datetime import datetime, timedelta, timezone
from jose import JWTError, jwt
from passlib.context import CryptContext
from fastapi import Depends, HTTPException, status, Request
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from sqlalchemy import and_
from database import models, crud
from database.connection import get_db
import os
import secrets
import re

# üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: SECRET_KEY –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SECRET_KEY = os.getenv("SECRET_KEY", secrets.token_urlsafe(32))
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/login")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def validate_password_strength(password: str) -> dict:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–∏–ª—É –ø–∞—Ä–æ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {"valid": bool, "message": str}
    """
    if len(password) < 8:
        return {"valid": False, "message": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"}
    
    if len(password) > 128:
        return {"valid": False, "message": "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 128 —Å–∏–º–≤–æ–ª–æ–≤)"}
    
    if not re.search(r"[a-zA-Z]", password):
        return {"valid": False, "message": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É"}
    
    if not re.search(r"[0-9]", password):
        return {"valid": False, "message": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É"}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∞–±—ã–µ –ø–∞—Ä–æ–ª–∏
    weak_passwords = [
        "password", "12345678", "qwerty123", "admin123", "letmein123", 
        "password123", "123456789", "welcome123"
    ]
    
    if password.lower() in weak_passwords:
        return {"valid": False, "message": "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π"}
    
    return {"valid": True, "message": "–ü–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"}

def validate_email_format(email: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞"""
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(email_pattern, email) is not None

def sanitize_input(input_string: str, max_length: int = 255) -> str:
    """–û—á–∏—â–∞–µ—Ç –≤—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not input_string:
        return ""
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    sanitized = input_string[:max_length]
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    sanitized = re.sub(r'[<>"\']', '', sanitized)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    sanitized = sanitized.strip()
    
    return sanitized

def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

# get_db –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ database.connection

def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_identifier = payload.get("sub")
        email = payload.get("email")
        
        if user_identifier is None:
            raise credentials_exception
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ
        exp = payload.get("exp")
        if exp is None:
            raise credentials_exception
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        current_time = datetime.now(timezone.utc)
        token_exp_time = datetime.fromtimestamp(exp, timezone.utc)
        
        if current_time > token_exp_time:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫",
                headers={"WWW-Authenticate": "Bearer"},
            )
        
    except JWTError as e:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    user = None
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ ID
        user_id = int(user_identifier)
        user = db.query(models.User).filter(
            models.User.id == user_id,
            models.User.status == "active"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
        ).first()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Ç–æ–∫–µ–Ω–µ
        if user and email and user.email != email:
            raise credentials_exception
            
    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, —Ç–æ –∏—â–µ–º –ø–æ email
        if email:
            user = db.query(models.User).filter(
                models.User.email == email,
                models.User.status == "active"
            ).first()
    
    if user is None:
        raise credentials_exception
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if hasattr(user, 'status') and user.status == 'blocked':
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        )
    
    return user

def get_user_from_token(token: str, db: Session):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Depends (–¥–ª—è WebSocket)"""
    if not token:
        return None
        
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_identifier = payload.get("sub")
        email = payload.get("email")
        
        if user_identifier is None:
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        exp = payload.get("exp")
        if exp is None:
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫
        current_timestamp = datetime.now(timezone.utc).timestamp()
        if current_timestamp > exp:
            return None
            
    except JWTError:
        return None
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = None
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ ID
        user_id = int(user_identifier)
        user = db.query(models.User).filter(
            models.User.id == user_id,
            models.User.status == "active"
        ).first()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Ç–æ–∫–µ–Ω–µ
        if user and email and user.email != email:
            return None
            
    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, —Ç–æ –∏—â–µ–º –ø–æ email
        if email:
            user = db.query(models.User).filter(
                models.User.email == email,
                models.User.status == "active"
            ).first()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user and hasattr(user, 'status') and user.status == 'blocked':
        return None
    
    return user

def get_current_admin(current_user: models.User = Depends(get_current_user)):
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    return current_user

def get_effective_user_id(current_user: models.User, db: Session, target_user_id: int = None) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π user_id –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º:
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –∏ —É–∫–∞–∑–∞–Ω target_user_id - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç target_user_id
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –±–µ–∑ target_user_id - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª–µ—Ü - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID  
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    """
    # –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_user.role == "admin":
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if target_user_id is not None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            target_user = db.query(models.User).filter(models.User.id == target_user_id).first()
            if target_user:
                return target_user_id
        # –ò–Ω–∞—á–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        return current_user.id
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    return current_user.id

def check_employee_access(current_user: models.User, target_user_id: int, db: Session) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º target_user_id:
    - –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–∏–º –¥–∞–Ω–Ω—ã–º
    """
    # –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É
    if current_user.role == "admin":
        return True
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_user.id == target_user_id:
        return True
    
    return False

def is_organization_owner(current_user: models.User, db: Session) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:
    - –ê–¥–º–∏–Ω—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏
    - –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –≤–ª–∞–¥–µ–ª—å—Ü—ã
    """
    # –ê–¥–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ –≤–ª–∞–¥–µ–ª—å—Ü—ã
    if current_user.role == "admin":
        return True
    
    # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —è–≤–ª—è—é—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏
    return True

def get_organization_owner_user(current_user: models.User, db: Session) -> models.User:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:
    - –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ - –∏—Ö —Å–∞–º–∏—Ö
    - –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ - –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–∞
    """
    effective_user_id = get_effective_user_id(current_user, db)
    if effective_user_id == current_user.id:
        return current_user
    else:
        return db.query(models.User).filter(models.User.id == effective_user_id).first()