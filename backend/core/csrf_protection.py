"""
üõ°Ô∏è CSRF PROTECTION SYSTEM
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç Cross-Site Request Forgery –∞—Ç–∞–∫
"""

import secrets
import hashlib
import hmac
import time
from typing import Optional, Set
from fastapi import HTTPException, Request, Response, status
from fastapi.security.utils import get_authorization_scheme_param
import logging

logger = logging.getLogger(__name__)

class CSRFProtection:
    def __init__(
        self,
        secret_key: str,
        token_name: str = "csrf_token", 
        header_name: str = "X-CSRF-Token",
        cookie_name: str = "csrftoken",
        safe_methods: Set[str] = {"GET", "HEAD", "OPTIONS", "TRACE"},
        token_lifetime: int = 3600,  # 1 —á–∞—Å
        require_https: bool = True,
        same_site: str = "strict"
    ):
        self.secret_key = secret_key.encode() if isinstance(secret_key, str) else secret_key
        self.token_name = token_name
        self.header_name = header_name 
        self.cookie_name = cookie_name
        self.safe_methods = safe_methods
        self.token_lifetime = token_lifetime
        self.require_https = require_https
        self.same_site = same_site
        
        # Exempt paths (–Ω–µ —Ç—Ä–µ–±—É—é—Ç CSRF –ø—Ä–æ–≤–µ—Ä–∫–∏)
        self.exempt_paths = {
            "/health",
            "/metrics", 
            "/docs",
            "/openapi.json",
            "/redoc"
        }
        
        logger.info(f"üõ°Ô∏è CSRF Protection –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def generate_csrf_token(self, session_id: Optional[str] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSRF —Ç–æ–∫–µ–Ω"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º session_id –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
        if not session_id:
            session_id = secrets.token_urlsafe(16)
            
        timestamp = str(int(time.time()))
        random_part = secrets.token_urlsafe(16)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å: HMAC(secret_key, session_id + timestamp + random_part)
        message = f"{session_id}:{timestamp}:{random_part}".encode()
        signature = hmac.new(self.secret_key, message, hashlib.sha256).hexdigest()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ç–æ–∫–µ–Ω: base64(session_id:timestamp:random_part:signature)
        token_data = f"{session_id}:{timestamp}:{random_part}:{signature}"
        return secrets.token_urlsafe().replace('_', '').replace('-', '') + token_data.encode().hex()
        
    def verify_csrf_token(self, token: str, session_id: Optional[str] = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å CSRF —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
            if len(token) < 32:
                return False
                
            hex_data = token[32:]  # –£–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
            token_data = bytes.fromhex(hex_data).decode()
            
            parts = token_data.split(':')
            if len(parts) != 4:
                return False
                
            token_session_id, timestamp, random_part, provided_signature = parts
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
            token_time = int(timestamp)
            current_time = int(time.time())
            if current_time - token_time > self.token_lifetime:
                logger.warning(f"üõ°Ô∏è CSRF —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: {current_time - token_time}s —Å—Ç–∞—Ä—ã–π")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º session_id –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            if session_id and token_session_id != session_id:
                logger.warning(f"üõ°Ô∏è CSRF —Ç–æ–∫–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–π —Å–µ—Å—Å–∏–∏")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
            message = f"{token_session_id}:{timestamp}:{random_part}".encode()
            expected_signature = hmac.new(self.secret_key, message, hashlib.sha256).hexdigest()
            
            if not hmac.compare_digest(provided_signature, expected_signature):
                logger.warning(f"üõ°Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å CSRF —Ç–æ–∫–µ–Ω–∞")
                return False
                
            return True
            
        except Exception as e:
            logger.error(f"üõ°Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CSRF —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
            
    def get_csrf_token_from_request(self, request: Request) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç CSRF —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (header, form data, query param)"""
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º header
        token = request.headers.get(self.header_name)
        if token:
            return token
            
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º form data (–¥–ª—è multipart/form-data –∏ application/x-www-form-urlencoded)
        if hasattr(request, '_form') and request._form:
            token = request._form.get(self.token_name)
            if token:
                return token
                
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º query parameters (–º–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–æ –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ)
        token = request.query_params.get(self.token_name)
        if token:
            logger.warning(f"üõ°Ô∏è CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ query params (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)")
            return token
            
        return None
        
    def get_session_id(self, request: Request) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç session ID –∏–∑ cookies –∏–ª–∏ JWT —Ç–æ–∫–µ–Ω–∞"""
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
        auth_header = request.headers.get("Authorization")
        if auth_header:
            scheme, token = get_authorization_scheme_param(auth_header)
            if scheme.lower() == "bearer" and token:
                try:
                    from jose import jwt
                    from core.auth import SECRET_KEY, ALGORITHM
                    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
                    return payload.get("jti") or payload.get("sub")  # JWT ID –∏–ª–∏ subject
                except Exception:
                    pass
                    
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ session cookie
        session_cookie = request.cookies.get("session_id")
        if session_cookie:
            return session_cookie
            
        # Fallback: —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ User-Agent + IP
        user_agent = request.headers.get("User-Agent", "")
        client_ip = self._get_client_ip(request)
        if user_agent or client_ip:
            return hashlib.sha256(f"{user_agent}:{client_ip}".encode()).hexdigest()[:16]
            
        return None
        
    def _get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()
            
        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip
            
        # Fallback –∫ client IP –∏–∑ FastAPI
        return request.client.host if request.client else "unknown"
        
    def check_referer(self, request: Request) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Referer header –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞"""
        referer = request.headers.get("Referer")
        if not referer:
            logger.warning("üõ°Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Referer header")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Referer —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—à–∏–º –¥–æ–º–µ–Ω–æ–º
        host = request.headers.get("Host")
        if not host:
            return False
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ referer
        from urllib.parse import urlparse
        referer_domain = urlparse(referer).netloc
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–æ–º–µ–Ω—ã
        if referer_domain != host:
            logger.warning(f"üõ°Ô∏è Referer –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {referer_domain} != {host}")
            return False
            
        return True
        
    def check_origin(self, request: Request) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Origin header"""
        origin = request.headers.get("Origin")
        if not origin:
            # Origin –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–ª—è same-site –∑–∞–ø—Ä–æ—Å–æ–≤
            return True
            
        host = request.headers.get("Host")
        if not host:
            return False
            
        from urllib.parse import urlparse
        origin_domain = urlparse(origin).netloc
        
        if origin_domain != host:
            logger.warning(f"üõ°Ô∏è Origin –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {origin_domain} != {host}")
            return False
            
        return True
        
    def is_exempt_path(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –ª–∏ –ø—É—Ç—å –æ—Ç CSRF –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if path in self.exempt_paths:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –¥–ª—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        exempt_prefixes = ["/docs", "/static", "/favicon"]
        return any(path.startswith(prefix) for prefix in exempt_prefixes)
        
    async def __call__(self, request: Request, call_next):
        """CSRF Middleware –¥–ª—è FastAPI"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        if request.method in self.safe_methods:
            response = await call_next(request)
            
            # –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω –≤ cookie –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
            if request.method == "GET" and not request.url.path.startswith("/api/"):
                csrf_token = self.generate_csrf_token(self.get_session_id(request))
                response.set_cookie(
                    key=self.cookie_name,
                    value=csrf_token,
                    max_age=self.token_lifetime,
                    httponly=False,  # Frontend –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–æ–∫–µ–Ω—É
                    secure=self.require_https,
                    samesite=self.same_site
                )
            
            return response
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
        if self.is_exempt_path(request.url.path):
            return await call_next(request)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        if self.require_https and request.headers.get("X-Forwarded-Proto") != "https" and not request.url.scheme == "https":
            if request.headers.get("Host", "").startswith("localhost"):
                pass  # –†–∞–∑—Ä–µ—à–∞–µ–º localhost –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            else:
                logger.warning(f"üõ°Ô∏è CSRF –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±—É–µ—Ç HTTPS")
                raise HTTPException(
                    status_code=status.HTTP_403_FORBIDDEN,
                    detail="HTTPS –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
                )
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Origin –∏ Referer headers
        if not self.check_origin(request):
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π Origin header"
            )
            
        if not self.check_referer(request):
            # Referer –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö, –¥–µ–ª–∞–µ–º warning –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
            logger.warning(f"üõ°Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π Referer –¥–ª—è {request.url.path}")
            
        # –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        csrf_token = self.get_csrf_token_from_request(request)
        if not csrf_token:
            logger.warning(f"üõ°Ô∏è CSRF —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ {request.method} {request.url.path}")
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="CSRF —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
            )
            
        # –ü–æ–ª—É—á–∞–µ–º session ID
        session_id = self.get_session_id(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF —Ç–æ–∫–µ–Ω
        if not self.verify_csrf_token(csrf_token, session_id):
            logger.warning(f"üõ°Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω –¥–ª—è {request.method} {request.url.path}")
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω"
            )
            
        logger.debug(f"üõ°Ô∏è CSRF –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è {request.method} {request.url.path}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)
        
        return response

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä CSRF –∑–∞—â–∏—Ç—ã
csrf_protection = None

def get_csrf_protection(secret_key: str = None) -> CSRFProtection:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä CSRF –∑–∞—â–∏—Ç—ã"""
    global csrf_protection
    
    if csrf_protection is None:
        if not secret_key:
            from core.auth import SECRET_KEY
            secret_key = SECRET_KEY
            
        csrf_protection = CSRFProtection(
            secret_key=secret_key,
            require_https=True,  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ HTTPS
            same_site="strict"   # –°—Ç—Ä–æ–≥–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ SameSite
        )
        
    return csrf_protection

def generate_csrf_token_for_response(request: Request = None, session_id: str = None) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSRF —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
    csrf = get_csrf_protection()
    
    if request and not session_id:
        session_id = csrf.get_session_id(request)
        
    return csrf.generate_csrf_token(session_id)
    
def verify_csrf_token_dependency(request: Request):
    """FastAPI dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CSRF —Ç–æ–∫–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö"""
    csrf = get_csrf_protection()
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    if request.method in csrf.safe_methods:
        return True
        
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
    if csrf.is_exempt_path(request.url.path):
        return True
        
    csrf_token = csrf.get_csrf_token_from_request(request)
    if not csrf_token:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="CSRF —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
        )
        
    session_id = csrf.get_session_id(request)
    if not csrf.verify_csrf_token(csrf_token, session_id):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω"
        )
        
    return True