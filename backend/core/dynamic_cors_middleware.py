"""
–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π CORS Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–≤
–†–∞–∑–¥–µ–ª—è–µ—Ç CORS –ø–æ–ª–∏—Ç–∏–∫–∏ –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ –≤–∏–¥–∂–µ—Ç–∞–º–∏
"""
import logging
import jwt
from typing import List, Optional, Set
from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import PlainTextResponse
from urllib.parse import urlparse
from core.app_config import SITE_SECRET

# –ò–º–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ (–±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ main.py)
try:
    from prometheus_client import Counter
    # –ú–µ—Ç—Ä–∏–∫–∏ –±—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ runtime
    METRICS_ENABLED = True
except ImportError:
    METRICS_ENABLED = False

logger = logging.getLogger(__name__)

class DynamicCORSMiddleware(BaseHTTPMiddleware):
    def __init__(
        self,
        app,
        main_app_origins: List[str],
        widget_endpoints: List[str] = None,
        allow_credentials: bool = True,
        allow_methods: List[str] = None,
        allow_headers: List[str] = None,
        expose_headers: List[str] = None,
        max_age: int = 600,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ CORS middleware
        
        Args:
            main_app_origins: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            widget_endpoints: –°–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤–∏–¥–∂–µ—Ç-–ø–æ–ª–∏—Ç–∏–∫—É
            allow_credentials: –†–∞–∑—Ä–µ—à–∏—Ç—å credentials –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            allow_methods: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã
            allow_headers: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            expose_headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É
            max_age: –í—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è preflight –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        super().__init__(app)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å credentials)
        self.main_app_origins = set(main_app_origins)
        
        # –í–∏–¥–∂–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–±–µ–∑ credentials, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)
        self.widget_endpoints = set(widget_endpoints or [
            '/api/validate-widget-token',
            '/api/widget-config'
        ])
        
        # CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.allow_credentials = allow_credentials
        self.allow_methods = allow_methods or ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS']
        self.allow_headers = allow_headers or ['*']
        self.expose_headers = expose_headers or []
        self.max_age = max_age
        
        logger.info(f"üîê DynamicCORSMiddleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"   –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã: {self.main_app_origins}")
        logger.info(f"   –í–∏–¥–∂–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {self.widget_endpoints}")

    def _record_widget_metrics(self, endpoint: str, origin: str, status: str, result: str = None, reason: str = None):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤–∏–¥–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)"""
        if not METRICS_ENABLED:
            return
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            import main
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É CORS –∑–∞–ø—Ä–æ—Å–∞
            main.WIDGET_CORS_REQUESTS.labels(endpoint=endpoint, origin=origin, status=status).inc()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
            if result:
                main.WIDGET_TOKEN_VALIDATIONS.labels(result=result, endpoint=endpoint).inc()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π origin
            if reason:
                main.WIDGET_BLOCKED_ORIGINS.labels(origin=origin, reason=reason).inc()
                
        except Exception as e:
            # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
            logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ –≤–∏–¥–∂–µ—Ç–∞: {e}")

    async def dispatch(self, request: Request, call_next):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CORS –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        # –ü–æ–ª—É—á–∞–µ–º Origin –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        origin = request.headers.get('origin')
        if not origin:
            # –ù–µ—Ç Origin - –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            return await call_next(request)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        is_widget_endpoint = self.is_widget_endpoint(request.url.path)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS (preflight) –∑–∞–ø—Ä–æ—Å–æ–≤
        if request.method == 'OPTIONS':
            return await self.handle_preflight(request, origin, is_widget_endpoint)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        response = await call_next(request)
        return self.add_cors_headers(response, origin, is_widget_endpoint)

    def is_widget_endpoint(self, path: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–∏–¥–∂–µ—Ç–Ω—ã–º"""
        return path in self.widget_endpoints

    async def validate_widget_origin(self, request: Request, origin: str) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è origin –¥–ª—è –≤–∏–¥–∂–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω
        
        –î–ª—è preflight –∑–∞–ø—Ä–æ—Å–æ–≤ (OPTIONS) –º—ã –Ω–µ –º–æ–∂–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω,
        –ø–æ—ç—Ç–æ–º—É —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏—Ö –≤—Å–µ, –∞ —Ä–µ–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ.
        
        Args:
            request: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
            origin: –î–æ–º–µ–Ω, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–æ–º–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω
        """
        try:
            # –î–ª—è OPTIONS (preflight) –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
            # –†–µ–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ —Å–∞–º–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ
            if request.method == 'OPTIONS':
                logger.info(f"‚úÖ Preflight –∑–∞–ø—Ä–æ—Å –æ—Ç {origin} —Ä–∞–∑—Ä–µ—à–µ–Ω (–≤–∞–ª–∏–¥–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ)")
                return True
            
            # –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–æ–∫–µ–Ω –≤ —Ç–µ–ª–µ, –Ω–æ –º—ã –Ω–µ –º–æ–∂–µ–º –µ–≥–æ —á–∏—Ç–∞—Ç—å –≤ middleware
            # (—ç—Ç–æ –Ω–∞—Ä—É—à–∏—Ç —Ä–∞–±–æ—Ç—É —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞). –ü–æ—ç—Ç–æ–º—É —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å,
            # –∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ —Å–∞–º–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ validate-widget-token
            if request.method == 'POST':
                logger.info(f"‚úÖ POST –∑–∞–ø—Ä–æ—Å –æ—Ç {origin} —Ä–∞–∑—Ä–µ—à–µ–Ω (–≤–∞–ª–∏–¥–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ)")
                return True
            
            # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            token = request.query_params.get('token')
            if not token:
                logger.warning(f"–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ GET –∑–∞–ø—Ä–æ—Å–µ –æ—Ç origin {origin}")
                return False
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            try:
                payload = jwt.decode(token, SITE_SECRET, algorithms=['HS256'])
            except jwt.InvalidTokenError as e:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –æ—Ç origin {origin}: {e}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –∏–∑ —Ç–æ–∫–µ–Ω–∞
            allowed_domains = payload.get('allowed_domains', [])
            if not isinstance(allowed_domains, list):
                logger.warning(f"allowed_domains –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º –≤ —Ç–æ–∫–µ–Ω–µ –æ—Ç {origin}")
                return False
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º origin –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            normalized_origin = self.normalize_domain(origin)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω
            for domain in allowed_domains:
                normalized_domain = self.normalize_domain(domain)
                if normalized_origin == normalized_domain:
                    logger.info(f"‚úÖ Origin {origin} —Ä–∞–∑—Ä–µ—à–µ–Ω –≤–∏–¥–∂–µ—Ç —Ç–æ–∫–µ–Ω–æ–º")
                    return True
            
            logger.warning(f"‚ùå Origin {origin} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ allowed_domains —Ç–æ–∫–µ–Ω–∞: {allowed_domains}")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç origin {origin}: {e}")
            return False

    def normalize_domain(self, domain: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–æ–º–µ–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        domain = domain.lower()  # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        
        if domain.startswith('http://') or domain.startswith('https://'):
            parsed = urlparse(domain)
            domain = parsed.netloc
        
        # –£–±–∏—Ä–∞–µ–º www. –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if domain.startswith('www.'):
            domain = domain[4:]
            
        return domain

    def is_main_app_origin_allowed(self, origin: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ origin –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        normalized_origin = self.normalize_domain(origin)
        
        for allowed_origin in self.main_app_origins:
            if allowed_origin == '*':
                return True
            
            normalized_allowed = self.normalize_domain(allowed_origin)
            if normalized_origin == normalized_allowed:
                return True
        
        return False

    async def handle_preflight(self, request: Request, origin: str, is_widget_endpoint: bool) -> Response:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS (preflight) –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        allowed = False
        allow_credentials = False
        
        if is_widget_endpoint:
            # –î–ª—è –≤–∏–¥–∂–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            allowed = await self.validate_widget_origin(request, origin)
            allow_credentials = False  # –í–∏–¥–∂–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ credentials
        else:
            # –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            allowed = self.is_main_app_origin_allowed(origin)
            allow_credentials = self.allow_credentials and allowed
        
        if not allowed:
            logger.warning(f"‚ùå CORS preflight –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–ª—è origin {origin} (endpoint: {request.url.path})")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            if is_widget_endpoint:
                self._record_widget_metrics(
                    endpoint=request.url.path,
                    origin=origin,
                    status="rejected",
                    reason="invalid_token_or_domain"
                )
            
            return PlainTextResponse(
                "CORS preflight request not allowed",
                status_code=403
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è preflight
        headers = {
            'Access-Control-Allow-Origin': origin,
            'Access-Control-Allow-Methods': ', '.join(self.allow_methods),
            'Access-Control-Max-Age': str(self.max_age),
            'Vary': 'Origin',  # –í–∞–∂–Ω–æ –¥–ª—è CDN/–ø—Ä–æ–∫—Å–∏ –∫—ç—à–µ–π
        }
        
        if self.allow_headers:
            if '*' in self.allow_headers:
                # –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω "*", –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                requested_headers = request.headers.get('access-control-request-headers')
                if requested_headers:
                    headers['Access-Control-Allow-Headers'] = requested_headers
                else:
                    headers['Access-Control-Allow-Headers'] = '*'
            else:
                headers['Access-Control-Allow-Headers'] = ', '.join(self.allow_headers)
        
        if allow_credentials:
            headers['Access-Control-Allow-Credentials'] = 'true'
        
        logger.info(f"‚úÖ CORS preflight —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è origin {origin} (widget: {is_widget_endpoint})")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        if is_widget_endpoint:
            self._record_widget_metrics(
                endpoint=request.url.path,
                origin=origin,
                status="allowed",
                result="valid_token"
            )
        
        return PlainTextResponse("OK", status_code=200, headers=headers)

    def add_cors_headers(self, response: Response, origin: str, is_widget_endpoint: bool) -> Response:
        """–î–æ–±–∞–≤–ª—è–µ—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ –æ—Ç–≤–µ—Ç—É"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ origin
        allowed = False
        allow_credentials = False
        
        if is_widget_endpoint:
            # –î–ª—è –≤–∏–¥–∂–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ - –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
            # (–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Å–∞–º–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ)
            allowed = True
            allow_credentials = False
        else:
            # –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
            allowed = self.is_main_app_origin_allowed(origin)
            allow_credentials = self.allow_credentials and allowed
        
        if not allowed:
            logger.warning(f"‚ùå CORS –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–ª—è origin {origin}")
            return response
        
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response.headers['Access-Control-Allow-Origin'] = origin
        response.headers['Vary'] = 'Origin'  # –í–∞–∂–Ω–æ –¥–ª—è CDN/–ø—Ä–æ–∫—Å–∏ –∫—ç—à–µ–π
        
        if self.expose_headers:
            response.headers['Access-Control-Expose-Headers'] = ', '.join(self.expose_headers)
        
        if allow_credentials:
            response.headers['Access-Control-Allow-Credentials'] = 'true'
        
        logger.debug(f"‚úÖ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è origin {origin} (widget: {is_widget_endpoint})")
        
        return response