"""
–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π CSP Middleware –¥–ª—è iframe —Å—Ç—Ä–∞–Ω–∏—Ü –≤–∏–¥–∂–µ—Ç–∞
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç frame-ancestors –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–ª–∏–¥–Ω—ã—Ö JWT —Ç–æ–∫–µ–Ω–æ–≤
"""

import logging
import jwt
from typing import Optional, List
from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
from urllib.parse import urlparse, parse_qs
from core.app_config import SITE_SECRET

logger = logging.getLogger(__name__)

class DynamicCSPMiddleware(BaseHTTPMiddleware):
    def __init__(self, app, iframe_path: str = '/chat-iframe'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ CSP middleware –¥–ª—è iframe —Å—Ç—Ä–∞–Ω–∏—Ü
        
        Args:
            app: FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            iframe_path: –ü—É—Ç—å iframe —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–±—ã—á–Ω–æ /chat-iframe)
        """
        super().__init__(app)
        self.iframe_path = iframe_path
        
        logger.info(f"üõ°Ô∏è DynamicCSPMiddleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {iframe_path}")

    def normalize_domain(self, domain: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–æ–º–µ–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not domain:
            return ""
            
        domain = domain.lower().strip()
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
        if domain.startswith('http://') or domain.startswith('https://'):
            parsed = urlparse(domain)
            domain = parsed.netloc
        
        # –£–±–∏—Ä–∞–µ–º www. –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if domain.startswith('www.'):
            domain = domain[4:]
            
        # –£–±–∏—Ä–∞–µ–º trailing slash
        domain = domain.rstrip('/')
            
        return domain

    def parse_allowed_domains(self, domains_str: str) -> List[str]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–æ–º–µ–Ω–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤"""
        if not domains_str or not domains_str.strip():
            return []
            
        domains = []
        for domain in domains_str.split(','):
            normalized = self.normalize_domain(domain.strip())
            if normalized:
                domains.append(normalized)
        
        return domains

    def validate_widget_token(self, token: str, db_session) -> Optional[dict]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –≤–∏–¥–∂–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç allowed_domains
        
        Args:
            token: JWT —Ç–æ–∫–µ–Ω
            db_session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–µ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
        """
        try:
            if not token:
                logger.warning("CSP: –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
                return None

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            try:
                payload = jwt.decode(token, SITE_SECRET, algorithms=['HS256'])
                logger.debug(f"CSP: –¢–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω, assistant_id={payload.get('assistant_id')}")
            except jwt.InvalidTokenError as e:
                logger.warning(f"CSP: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {e}")
                return None
                
            assistant_id = payload.get('assistant_id')
            if not assistant_id:
                logger.warning("CSP: assistant_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–æ–∫–µ–Ω–µ")
                return None
                
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from database import models
            
            # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
            assistant = db_session.query(models.Assistant).filter(
                models.Assistant.id == assistant_id
            ).first()
            
            if not assistant:
                logger.warning(f"CSP: –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {assistant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–æ–≤ (–∑–∞—â–∏—Ç–∞ –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤)
            current_domains = assistant.allowed_domains or ""
            token_domains = payload.get('allowed_domains', "")
            
            if current_domains != token_domains:
                logger.warning(f"CSP: –î–æ–º–µ–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª. –¢–µ–∫—É—â–∏–µ: '{current_domains}', –≤ —Ç–æ–∫–µ–Ω–µ: '{token_domains}'")
                return None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
            if not current_domains.strip():
                logger.warning("CSP: –£ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤")
                return None
                
            return {
                'valid': True,
                'assistant_id': assistant_id,
                'allowed_domains': current_domains,
                'user_id': payload.get('user_id')
            }
            
        except Exception as e:
            logger.error(f"CSP: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return None

    def generate_csp_header(self, allowed_domains: List[str]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSP –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏ –¥–ª—è frame-ancestors
        
        Args:
            allowed_domains: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
            
        Returns:
            CSP —Å—Ç—Ä–æ–∫–∞
        """
        # –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã (–æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
        base_domains = ["'self'", "https://replyx.ru", "https://www.replyx.ru"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω—ã –∏–∑ —Ç–æ–∫–µ–Ω–∞
        for domain in allowed_domains:
            # –î–æ–±–∞–≤–ª—è–µ–º http –∏ https –≤–∞—Ä–∏–∞–Ω—Ç—ã
            base_domains.append(f"https://{domain}")
            base_domains.append(f"https://www.{domain}")
            
            # –í dev —Ä–µ–∂–∏–º–µ —Ç–∞–∫–∂–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º http
            if domain in ['localhost', '127.0.0.1'] or domain.startswith('localhost:'):
                base_domains.append(f"http://{domain}")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
        unique_domains = []
        for domain in base_domains:
            if domain not in unique_domains:
                unique_domains.append(domain)
        
        frame_ancestors = " ".join(unique_domains)
        
        # –ü–æ–ª–Ω—ã–π CSP –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è iframe
        csp = (
            f"frame-ancestors {frame_ancestors}; "
            "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob: https:; "
            "script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; "
            "style-src 'self' 'unsafe-inline' https:; "
            "img-src 'self' data: blob: https:; "
            "connect-src 'self' https: wss: ws:; "
            "font-src 'self' https:; "
        )
        
        return csp

    def generate_restrictive_csp(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω—ã–π CSP –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        return (
            "frame-ancestors 'self'; "
            "default-src 'self'; "
            "script-src 'self'; "
            "style-src 'self'; "
            "img-src 'self' data:; "
            "connect-src 'self';"
        )

    async def dispatch(self, request: Request, call_next):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –∫ iframe —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if not request.url.path.startswith(self.iframe_path):
            # –ù–µ iframe –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            return await call_next(request)
        
        logger.info(f"üõ°Ô∏è CSP: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é iframe –∑–∞–ø—Ä–æ—Å: {request.url}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        site_token = request.query_params.get('site_token')
        
        if not site_token:
            logger.warning("CSP: site_token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω—ã–π CSP
            response = await call_next(request)
            response.headers['Content-Security-Policy'] = self.generate_restrictive_csp()
            return response
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
        try:
            from database.connection import get_db
            db_generator = get_db()
            db_session = next(db_generator)
            
            try:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
                token_info = self.validate_widget_token(site_token, db_session)
                
                if not token_info or not token_info.get('valid'):
                    logger.warning("CSP: –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø—Ä–∏–º–µ–Ω—è—é –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω—ã–π CSP")
                    response = await call_next(request)
                    response.headers['Content-Security-Policy'] = self.generate_restrictive_csp()
                    return response
                
                # –ü–∞—Ä—Å–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
                allowed_domains = self.parse_allowed_domains(token_info['allowed_domains'])
                
                if not allowed_domains:
                    logger.warning("CSP: –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤, –ø—Ä–∏–º–µ–Ω—è—é –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω—ã–π CSP")
                    response = await call_next(request)
                    response.headers['Content-Security-Policy'] = self.generate_restrictive_csp()
                    return response
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π CSP
                dynamic_csp = self.generate_csp_header(allowed_domains)
                
                logger.info(f"‚úÖ CSP: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è assistant_id={token_info['assistant_id']}: {allowed_domains}")
                logger.debug(f"CSP –∑–∞–≥–æ–ª–æ–≤–æ–∫: {dynamic_csp}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º CSP –∑–∞–≥–æ–ª–æ–≤–æ–∫
                response = await call_next(request)
                response.headers['Content-Security-Policy'] = dynamic_csp
                
                # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º X-Frame-Options –∫–∞–∫ fallback
                frame_options = f"ALLOW-FROM https://{allowed_domains[0]}" if allowed_domains else "SAMEORIGIN"
                response.headers['X-Frame-Options'] = frame_options
                
                return response
                
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
                try:
                    db_session.close()
                except:
                    pass
        
        except Exception as e:
            logger.error(f"CSP: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î: {e}")
            # Fallback –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω—ã–π CSP –ø—Ä–∏ –æ—à–∏–±–∫–µ
            response = await call_next(request)
            response.headers['Content-Security-Policy'] = self.generate_restrictive_csp()
            return response

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
dynamic_csp_middleware = DynamicCSPMiddleware