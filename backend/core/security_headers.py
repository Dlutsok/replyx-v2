"""
üõ°Ô∏è SECURITY HEADERS MIDDLEWARE
–î–æ–±–∞–≤–ª—è–µ—Ç security headers –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç secure cookies
"""

from fastapi import Request, Response
import logging

logger = logging.getLogger(__name__)

class SecurityHeadersMiddleware:
    def __init__(self):
        self.security_headers = {
            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ XSS –∞—Ç–∞–∫
            "X-Content-Type-Options": "nosniff",
            "X-Frame-Options": "SAMEORIGIN",  # –†–∞–∑—Ä–µ—à–∞–µ–º iframe –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
            "X-XSS-Protection": "1; mode=block",
            
            # Referrer Policy
            "Referrer-Policy": "strict-origin-when-cross-origin",
            
            # Content Security Policy (–±–∞–∑–æ–≤—ã–π)
            "Content-Security-Policy": (
                "default-src 'self'; "
                "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdnjs.cloudflare.com; "
                "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdnjs.cloudflare.com; "
                "font-src 'self' https://fonts.gstatic.com; "
                "img-src 'self' data: blob: https:; "
                "connect-src 'self' https: wss: ws:; "
                "frame-ancestors 'self'; "
                "base-uri 'self'; "
                "form-action 'self'"
            ),
            
            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ MIME sniffing
            "X-Download-Options": "noopen",
            "X-Permitted-Cross-Domain-Policies": "none",
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è HTTPS)
            # "Strict-Transport-Security": "max-age=31536000; includeSubDomains; preload"
        }
        
        logger.info("üõ°Ô∏è Security Headers Middleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def add_hsts_header(self, response: Response, request: Request):
        """–î–æ–±–∞–≤–ª—è–µ—Ç HSTS header —Ç–æ–ª—å–∫–æ –¥–ª—è HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ HTTPS
        is_https = (
            request.url.scheme == "https" or
            request.headers.get("X-Forwarded-Proto") == "https" or
            request.headers.get("X-Forwarded-Ssl") == "on"
        )
        
        if is_https:
            response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains; preload"
            logger.debug("üõ°Ô∏è HSTS header –¥–æ–±–∞–≤–ª–µ–Ω")
            
    def configure_secure_cookies(self, response: Response, request: Request):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç secure cookies"""
        is_https = (
            request.url.scheme == "https" or
            request.headers.get("X-Forwarded-Proto") == "https"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Set-Cookie headers –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        set_cookie_headers = response.headers.getlist("set-cookie")
        if set_cookie_headers:
            updated_cookies = []
            
            for cookie in set_cookie_headers:
                # –î–æ–±–∞–≤–ª—è–µ–º Secure flag –¥–ª—è HTTPS
                if is_https and "Secure" not in cookie:
                    cookie += "; Secure"
                
                # –î–æ–±–∞–≤–ª—è–µ–º SameSite=Strict –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                if "SameSite" not in cookie:
                    cookie += "; SameSite=Strict"
                
                # –î–æ–±–∞–≤–ª—è–µ–º HttpOnly –¥–ª—è session cookies (–Ω–æ –Ω–µ –¥–ª—è CSRF —Ç–æ–∫–µ–Ω–æ–≤)
                if "csrftoken" not in cookie and "HttpOnly" not in cookie:
                    cookie += "; HttpOnly"
                    
                updated_cookies.append(cookie)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º headers
            response.headers.pop("set-cookie")
            for cookie in updated_cookies:
                response.headers.append("set-cookie", cookie)
                
            logger.debug(f"üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã secure cookies: {len(updated_cookies)} cookies")
            
    async def __call__(self, request: Request, call_next):
        """Security Headers Middleware –¥–ª—è FastAPI"""
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º security headers
        for header_name, header_value in self.security_headers.items():
            # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ headers
            if header_name not in response.headers:
                response.headers[header_name] = header_value
                
        # –î–æ–±–∞–≤–ª—è–µ–º HSTS –¥–ª—è HTTPS
        self.add_hsts_header(response, request)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º secure cookies
        self.configure_secure_cookies(response, request)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"üõ°Ô∏è Security headers –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è {request.url.path}")
        
        return response

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
security_headers_middleware = SecurityHeadersMiddleware()