from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker
import os
import logging

logger = logging.getLogger(__name__)

# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–î –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
DB_HOST = os.getenv('DB_HOST', 'localhost')
DB_PORT = os.getenv('DB_PORT', '5432')
DB_NAME = os.getenv('DB_NAME', 'chat_ai')
DB_USER = os.getenv('DB_USER', 'dan')
DB_PASSWORD = os.getenv('DB_PASSWORD', '')  # –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
DB_SSL_MODE = os.getenv('DB_SSL_MODE', 'prefer')  # prefer, require, disable

# üîß –ù–ê–°–¢–†–û–ô–ö–ò –ü–£–õ–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê
POOL_SIZE = int(os.getenv('DB_POOL_SIZE', '50'))  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 20 –¥–æ 50
MAX_OVERFLOW = int(os.getenv('DB_MAX_OVERFLOW', '100'))  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 30 –¥–æ 100
POOL_TIMEOUT = int(os.getenv('DB_POOL_TIMEOUT', '30'))  # –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
POOL_RECYCLE = int(os.getenv('DB_POOL_RECYCLE', '3600'))  # 1 —á–∞—Å
ECHO_SQL = os.getenv('DB_ECHO', 'false').lower() == 'true'

# üîß –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –°–¢–†–û–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
if DB_PASSWORD:
    SQLALCHEMY_DATABASE_URL = f"postgresql+psycopg2://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}?sslmode={DB_SSL_MODE}"
else:
    SQLALCHEMY_DATABASE_URL = f"postgresql+psycopg2://{DB_USER}@{DB_HOST}:{DB_PORT}/{DB_NAME}?sslmode={DB_SSL_MODE}"

logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {DB_HOST}:{DB_PORT}/{DB_NAME} (–ø—É–ª: {POOL_SIZE}, overflow: {MAX_OVERFLOW})")

engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    pool_size=POOL_SIZE,           # –†–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞)
    max_overflow=MAX_OVERFLOW,     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ (—É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞)
    pool_timeout=POOL_TIMEOUT,     # –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞
    pool_pre_ping=True,            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    pool_recycle=POOL_RECYCLE,     # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    echo=ECHO_SQL,                 # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    # üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê
    connect_args={
        "options": "-c timezone=UTC",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTC
        "application_name": "ChatAI_Backend",  # –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ë–î
        "connect_timeout": 10,  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    }
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

def get_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    db = SessionLocal()
    try:
        yield db
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
        db.rollback()
        raise
    finally:
        db.close()

def get_db_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    pool = engine.pool
    return {
        "pool_size": pool.size(),
        "checked_in": pool.checkedin(),
        "checked_out": pool.checkedout(),
        "overflow": pool.overflow(),
        "total_connections": pool.size() + pool.overflow()
    } 