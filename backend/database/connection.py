from sqlalchemy import create_engine, MetaData
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker
import os
import logging

logger = logging.getLogger(__name__)

# üîß –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–†–ï–î–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ë–î
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–µ–¥—ã
current_dir = os.path.dirname(os.path.abspath(__file__))  # /path/to/backend/database
backend_dir = os.path.dirname(current_dir)                # /path/to/backend  
project_root = os.path.dirname(backend_dir)               # /path/to/project
env_file_path = os.path.join(project_root, '.env')

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É –ø–æ –Ω–∞–ª–∏—á–∏—é .env —Ñ–∞–π–ª–∞
is_development = os.path.exists(env_file_path)
environment_name = "development" if is_development else "production"

logger.info(f"üîç Detected environment: {environment_name}")
logger.info(f"üîç Looking for .env at: {env_file_path} (exists: {is_development})")

# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–î –° –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú –î–ï–§–û–õ–¢–û–í
if is_development:
    # Development defaults (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å .env —Ñ–∞–π–ª–æ–º)
    DEFAULT_DB_HOST = 'localhost'
    DEFAULT_DB_NAME = 'chat_ai' 
    DEFAULT_DB_USER = 'dan'  # –¢–≤–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    DEFAULT_SSL_MODE = 'prefer'
else:
    # Production defaults (–±–µ–∑ .env —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º production –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    DEFAULT_DB_HOST = '192.168.0.4'  # –ò–∑ .env.production
    DEFAULT_DB_NAME = 'replyx_production'
    DEFAULT_DB_USER = 'gen_user'
    DEFAULT_SSL_MODE = 'require'

DB_HOST = os.getenv('DB_HOST', DEFAULT_DB_HOST)
DB_PORT = os.getenv('DB_PORT', '5432')
DB_NAME = os.getenv('DB_NAME', DEFAULT_DB_NAME)
DB_USER = os.getenv('DB_USER', DEFAULT_DB_USER)
DB_PASSWORD = os.getenv('DB_PASSWORD', '')  # –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
DB_SSL_MODE = os.getenv('DB_SSL_MODE', DEFAULT_SSL_MODE)

# üîß –ù–ê–°–¢–†–û–ô–ö–ò –ü–£–õ–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê
POOL_SIZE = int(os.getenv('DB_POOL_SIZE', '15'))  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞
MAX_OVERFLOW = int(os.getenv('DB_MAX_OVERFLOW', '20'))  # –°–Ω–∏–∂–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
POOL_TIMEOUT = int(os.getenv('DB_POOL_TIMEOUT', '30'))  # –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
POOL_RECYCLE = int(os.getenv('DB_POOL_RECYCLE', '3600'))  # 1 —á–∞—Å
ECHO_SQL = os.getenv('DB_ECHO', 'false').lower() == 'true'

# üîß –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –°–¢–†–û–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
if DB_PASSWORD:
    SQLALCHEMY_DATABASE_URL = f"postgresql+psycopg2://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}?sslmode={DB_SSL_MODE}"
else:
    SQLALCHEMY_DATABASE_URL = f"postgresql+psycopg2://{DB_USER}@{DB_HOST}:{DB_PORT}/{DB_NAME}?sslmode={DB_SSL_MODE}"

logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î [{environment_name}]: {DB_USER}@{DB_HOST}:{DB_PORT}/{DB_NAME}")
logger.info(f"üîó –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: SSL={DB_SSL_MODE}, –ø—É–ª={POOL_SIZE}, overflow={MAX_OVERFLOW}")
logger.info(f"üîó –¢–∞–π–º–∞—É—Ç—ã: connection={POOL_TIMEOUT}s, recycle={POOL_RECYCLE}s")

engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    pool_size=POOL_SIZE,           # –†–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞)
    max_overflow=MAX_OVERFLOW,     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—â–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
    pool_timeout=POOL_TIMEOUT,     # –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞
    pool_pre_ping=True,            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    pool_recycle=POOL_RECYCLE,     # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    echo=ECHO_SQL,                 # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    # üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê
    connect_args={
        "options": "-c timezone=UTC",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTC
        "application_name": "ChatAI_Backend",  # –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ë–î
        "connect_timeout": 10,  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    }
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Naming convention for consistent constraint names
NAMING_CONVENTION = {
    "ix": "ix_%(table_name)s_%(column_0_N_name)s",
    "uq": "uq_%(table_name)s_%(column_0_N_name)s", 
    "ck": "ck_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(table_name)s_%(column_0_N_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s"
}

metadata = MetaData(naming_convention=NAMING_CONVENTION)
Base = declarative_base(metadata=metadata)

def get_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    db = SessionLocal()
    try:
        yield db
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
        db.rollback()
        raise
    finally:
        db.close()

def get_db_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    pool = engine.pool
    return {
        "pool_size": pool.size(),
        "checked_in": pool.checkedin(),
        "checked_out": pool.checkedout(),
        "overflow": pool.overflow(),
        "total_connections": pool.size() + pool.overflow()
    }