#!/usr/bin/env python3
"""
–¢–æ—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–æ–¥–∞
"""
import os
from dotenv import load_dotenv
from services.s3_storage_service import get_s3_service

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_exact_reproduction():
    """–¢–æ—á–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∫–æ–¥ –∏–∑ test_document_upload.py"""
    print("üß™ –¢–æ—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–æ–¥–∞")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º S3 —Å–µ—Ä–≤–∏—Å —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ
        s3_service = get_s3_service()
        print("‚úÖ S3 —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ
        user_id = 1
        original_filename = "test_document.txt"
        test_content = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞.\n–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞."
        content_bytes = test_content.encode('utf-8')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ
        secure_filename = s3_service.generate_secure_filename(
            user_id=user_id,
            original_filename=original_filename,
            content=content_bytes
        )
        print(f"üîí –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è: {secure_filename}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –æ–±—ä–µ–∫—Ç–∞ —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ
        object_key = s3_service.get_user_object_key(
            user_id,
            secure_filename,
            "documents"
        )
        print(f"üóÇÔ∏è –ö–ª—é—á –æ–±—ä–µ–∫—Ç–∞: {object_key}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ
        upload_result = s3_service.upload_file(
            file_content=content_bytes,
            object_key=object_key,
            content_type="text/plain",
            metadata={
                'user_id': str(user_id),
                'original_filename': original_filename,
                'file_type': 'document',
                'test': 'true'
            }
        )
        
        if upload_result.get('success'):
            print("‚úÖ –¢–æ—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: –£–°–ü–ï–®–ù–û!")
            print(f"   üìÑ –ò–º—è —Ñ–∞–π–ª–∞: {secure_filename}")
            print(f"   üîó URL: {upload_result.get('url')}")
            print(f"   üìè –†–∞–∑–º–µ—Ä: {upload_result.get('size')} –±–∞–π—Ç")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            s3_service.s3_client.delete_object(
                Bucket=s3_service.bucket_name, 
                Key=object_key
            )
            return True
        else:
            print(f"‚ùå –¢–æ—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: –û–®–ò–ë–ö–ê - {upload_result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –¢–æ—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
        import traceback
        traceback.print_exc()
        return False

def test_without_metadata():
    """–¢–µ—Å—Ç –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    print("=" * 30)
    
    try:
        s3_service = get_s3_service()
        user_id = 1
        original_filename = "test_document.txt"
        test_content = "Test without metadata"
        content_bytes = test_content.encode('utf-8')
        
        secure_filename = s3_service.generate_secure_filename(
            user_id=user_id,
            original_filename=original_filename,
            content=content_bytes
        )
        object_key = s3_service.get_user_object_key(user_id, secure_filename, "documents")
        
        print(f"üóÇÔ∏è –ö–ª—é—á –æ–±—ä–µ–∫—Ç–∞: {object_key}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ë–ï–ó –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        upload_result = s3_service.upload_file(
            file_content=content_bytes,
            object_key=object_key,
            content_type="text/plain"
            # metadata=None - –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤–æ–æ–±—â–µ
        )
        
        if upload_result.get('success'):
            print("‚úÖ –ë–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: –£–°–ü–ï–®–ù–û!")
            s3_service.s3_client.delete_object(Bucket=s3_service.bucket_name, Key=object_key)
            return True
        else:
            print(f"‚ùå –ë–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: –û–®–ò–ë–ö–ê - {upload_result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ë–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
        return False

def test_with_minimal_metadata():
    """–¢–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 40)
    
    try:
        s3_service = get_s3_service()
        user_id = 1
        original_filename = "test_document.txt"
        test_content = "Test with minimal metadata"
        content_bytes = test_content.encode('utf-8')
        
        secure_filename = s3_service.generate_secure_filename(
            user_id=user_id,
            original_filename=original_filename,
            content=content_bytes
        )
        object_key = s3_service.get_user_object_key(user_id, secure_filename, "documents")
        
        print(f"üóÇÔ∏è –ö–ª—é—á –æ–±—ä–µ–∫—Ç–∞: {object_key}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        upload_result = s3_service.upload_file(
            file_content=content_bytes,
            object_key=object_key,
            content_type="text/plain",
            metadata={'test': 'minimal'}
        )
        
        if upload_result.get('success'):
            print("‚úÖ –° –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: –£–°–ü–ï–®–ù–û!")
            s3_service.s3_client.delete_object(Bucket=s3_service.bucket_name, Key=object_key)
            return True
        else:
            print(f"‚ùå –° –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: –û–®–ò–ë–ö–ê - {upload_result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –° –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –¢–û–ß–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ü–†–û–ë–õ–ï–ú–´")
    print("=" * 40)
    
    results = []
    
    # –¢–æ—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    results.append(("–¢–æ—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ", test_exact_reproduction()))
    
    # –ë–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    results.append(("–ë–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö", test_without_metadata()))
    
    # –° –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    results.append(("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", test_with_minimal_metadata()))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 40)
    print("üìä –ò–¢–û–ì–ò:")
    print("=" * 40)
    
    for test_name, success in results:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"   {test_name}: {status}")

if __name__ == "__main__":
    main()
