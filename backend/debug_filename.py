#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤ –≤ S3 –∫–ª—é—á–∞—Ö
"""
import os
from dotenv import load_dotenv
from services.s3_storage_service import get_s3_service

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_filename_variations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤")
    print("=" * 50)
    
    s3_service = get_s3_service()
    test_content = "Test content"
    content_bytes = test_content.encode('utf-8')
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    filenames = [
        "simple.txt",  # –ü—Ä–æ—Å—Ç–æ–µ –∏–º—è
        "test_file.txt",  # –° –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
        "test-file.txt",  # –° –¥–µ—Ñ–∏—Å–æ–º
        "1_20250915_180521_46337eb1c07ab05d.txt",  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–ª–æ–∂–Ω–æ–µ –∏–º—è
        "user_document.txt",  # –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
        "—Ñ–∞–π–ª.txt",  # –° —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        "file with spaces.txt",  # –° –ø—Ä–æ–±–µ–ª–∞–º–∏
        "file%20encoded.txt",  # –° URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    ]
    
    results = []
    
    for filename in filenames:
        print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {filename}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –æ–±—ä–µ–∫—Ç–∞
            object_key = s3_service.get_user_object_key(1, filename, "documents")
            print(f"   üóÇÔ∏è –ö–ª—é—á: {object_key}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å
            upload_result = s3_service.upload_file(
                file_content=content_bytes,
                object_key=object_key,
                content_type="text/plain",
                metadata={'test': 'filename_debug'}
            )
            
            if upload_result.get('success'):
                print(f"   ‚úÖ {filename}: –£–°–ü–ï–®–ù–û!")
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                s3_service.s3_client.delete_object(
                    Bucket=s3_service.bucket_name, 
                    Key=object_key
                )
                results.append((filename, True, None))
            else:
                error = upload_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"   ‚ùå {filename}: –û–®–ò–ë–ö–ê - {error}")
                results.append((filename, False, error))
                
        except Exception as e:
            print(f"   ‚ùå {filename}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
            results.append((filename, False, str(e)))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–ú–ï–ù –§–ê–ô–õ–û–í:")
    print("=" * 50)
    
    successful = [r for r in results if r[1]]
    failed = [r for r in results if not r[1]]
    
    if successful:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–µ ({len(successful)}):")
        for filename, _, _ in successful:
            print(f"   - {filename}")
    
    if failed:
        print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ ({len(failed)}):")
        for filename, _, error in failed:
            print(f"   - {filename}: {error}")
    
    return results

def test_path_variations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π"""
    print("\n\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—É—Ç–µ–π")
    print("=" * 50)
    
    s3_service = get_s3_service()
    test_content = "Test content"
    content_bytes = test_content.encode('utf-8')
    filename = "test.txt"  # –ü—Ä–æ—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π
    paths = [
        "test.txt",  # –ë–µ–∑ –ø–∞–ø–æ–∫
        "folder/test.txt",  # –û–¥–Ω–∞ –ø–∞–ø–∫–∞
        "users/1/test.txt",  # –ö–∞–∫ –≤ –Ω–∞—à–µ–º –∫–æ–¥–µ, –Ω–æ –∫–æ—Ä–æ—á–µ
        "users/1/documents/test.txt",  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –≤ –∫–æ–¥–µ
        "users/1/documents/subdir/test.txt",  # –ï—â–µ –≥–ª—É–±–∂–µ
        "–ø–∞–ø–∫–∞/test.txt",  # –° —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        "folder with spaces/test.txt",  # –° –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –ø—É—Ç–∏
    ]
    
    results = []
    
    for path in paths:
        print(f"\nüìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Ç—å: {path}")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é —Å —ç—Ç–∏–º –ø—É—Ç–µ–º
            upload_result = s3_service.upload_file(
                file_content=content_bytes,
                object_key=path,
                content_type="text/plain",
                metadata={'test': 'path_debug'}
            )
            
            if upload_result.get('success'):
                print(f"   ‚úÖ {path}: –£–°–ü–ï–®–ù–û!")
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                s3_service.s3_client.delete_object(
                    Bucket=s3_service.bucket_name, 
                    Key=path
                )
                results.append((path, True, None))
            else:
                error = upload_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"   ‚ùå {path}: –û–®–ò–ë–ö–ê - {error}")
                results.append((path, False, error))
                
        except Exception as e:
            print(f"   ‚ùå {path}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
            results.append((path, False, str(e)))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–£–¢–ï–ô:")
    print("=" * 50)
    
    successful = [r for r in results if r[1]]
    failed = [r for r in results if not r[1]]
    
    if successful:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–µ ({len(successful)}):")
        for path, _, _ in successful:
            print(f"   - {path}")
    
    if failed:
        print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ ({len(failed)}):")
        for path, _, error in failed:
            print(f"   - {path}: {error}")
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –û–¢–õ–ê–î–ö–ê –ò–ú–ï–ù –§–ê–ô–õ–û–í –ò –ü–£–¢–ï–ô")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
    filename_results = test_filename_variations()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏
    path_results = test_path_variations()
    
    print("\n" + "=" * 60)
    print("üéØ –û–ë–©–ò–ï –í–´–í–û–î–´:")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_successful_filenames = [r[0] for r in filename_results if r[1]]
    all_failed_filenames = [r[0] for r in filename_results if not r[1]]
    
    all_successful_paths = [r[0] for r in path_results if r[1]]
    all_failed_paths = [r[0] for r in path_results if not r[1]]
    
    if all_failed_filenames:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤:")
        for name in all_failed_filenames:
            print(f"   - {name}")
    
    if all_failed_paths:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—É—Ç–∏:")
        for path in all_failed_paths:
            print(f"   - {path}")
    
    if not all_failed_filenames and not all_failed_paths:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã - —Å–º. –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ")

if __name__ == "__main__":
    main()
