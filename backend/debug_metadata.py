#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
"""
import os
from dotenv import load_dotenv
from services.s3_storage_service import get_s3_service

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_metadata_variations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    s3_service = get_s3_service()
    test_content = "Test metadata variations"
    content_bytes = test_content.encode('utf-8')
    
    metadata_tests = [
        ("–ë–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö", None),
        ("–¢–æ–ª—å–∫–æ test", {'test': 'true'}),
        ("–¢–æ–ª—å–∫–æ user_id", {'user_id': '1'}),
        ("–¢–æ–ª—å–∫–æ original_filename", {'original_filename': 'test.txt'}),
        ("–¢–æ–ª—å–∫–æ file_type", {'file_type': 'document'}),
        ("user_id + test", {'user_id': '1', 'test': 'true'}),
        ("original_filename + test", {'original_filename': 'test.txt', 'test': 'true'}),
        ("file_type + test", {'file_type': 'document', 'test': 'true'}),
        ("user_id + original_filename", {'user_id': '1', 'original_filename': 'test.txt'}),
        ("user_id + file_type", {'user_id': '1', 'file_type': 'document'}),
        ("original_filename + file_type", {'original_filename': 'test.txt', 'file_type': 'document'}),
        ("–¢—Ä–∏ –ø–æ–ª—è", {'user_id': '1', 'original_filename': 'test.txt', 'file_type': 'document'}),
        ("–í—Å–µ —á–µ—Ç—ã—Ä–µ –ø–æ–ª—è", {
            'user_id': '1',
            'original_filename': 'test.txt',
            'file_type': 'document',
            'test': 'true'
        }),
        ("–° —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏", {'–æ–ø–∏—Å–∞–Ω–∏–µ': '—Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': '1'}),
        ("–° –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö", {'description': 'test file with spaces', 'user': 'test user'}),
        ("–° —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏", {'info': 'test@example.com', 'path': '/users/test'}),
    ]
    
    results = []
    
    for test_name, metadata in metadata_tests:
        print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_name}")
        if metadata:
            print(f"   üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
            object_key = f"debug_metadata/{test_name.replace(' ', '_').lower()}_test.txt"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å
            upload_result = s3_service.upload_file(
                file_content=content_bytes,
                object_key=object_key,
                content_type="text/plain",
                metadata=metadata
            )
            
            if upload_result.get('success'):
                print(f"   ‚úÖ {test_name}: –£–°–ü–ï–®–ù–û!")
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                s3_service.s3_client.delete_object(
                    Bucket=s3_service.bucket_name, 
                    Key=object_key
                )
                results.append((test_name, True, None))
            else:
                error = upload_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"   ‚ùå {test_name}: –û–®–ò–ë–ö–ê - {error}")
                results.append((test_name, False, error))
                
        except Exception as e:
            print(f"   ‚ùå {test_name}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
            results.append((test_name, False, str(e)))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–ï–¢–ê–î–ê–ù–ù–´–•:")
    print("=" * 50)
    
    successful = [r for r in results if r[1]]
    failed = [r for r in results if not r[1]]
    
    if successful:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–µ ({len(successful)}):")
        for test_name, _, _ in successful:
            print(f"   - {test_name}")
    
    if failed:
        print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ ({len(failed)}):")
        for test_name, _, error in failed:
            print(f"   - {test_name}: {error}")
    
    return results

def test_metadata_encoding():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    print("\n\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    s3_service = get_s3_service()
    test_content = "Test metadata encoding"
    content_bytes = test_content.encode('utf-8')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    encoding_tests = [
        ("ASCII —Ç–æ–ª—å–∫–æ", {'key': 'value', 'number': '123'}),
        ("UTF-8 —Å—Ç—Ä–æ–∫–∞", {'key': '–∑–Ω–∞—á–µ–Ω–∏–µ'}),
        ("URL-encoded", {'key': 'value%20with%20spaces'}),
        ("Base64", {'key': 'dGVzdCB2YWx1ZQ=='}),  # "test value" –≤ base64
        ("–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏", {'key': 'value "with quotes"'}),
        ("JSON-like", {'key': '{"nested": "value"}'}),
    ]
    
    results = []
    
    for test_name, metadata in encoding_tests:
        print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É: {test_name}")
        print(f"   üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")
        
        try:
            object_key = f"debug_encoding/{test_name.replace(' ', '_').lower()}_test.txt"
            
            upload_result = s3_service.upload_file(
                file_content=content_bytes,
                object_key=object_key,
                content_type="text/plain",
                metadata=metadata
            )
            
            if upload_result.get('success'):
                print(f"   ‚úÖ {test_name}: –£–°–ü–ï–®–ù–û!")
                s3_service.s3_client.delete_object(
                    Bucket=s3_service.bucket_name, 
                    Key=object_key
                )
                results.append((test_name, True, None))
            else:
                error = upload_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"   ‚ùå {test_name}: –û–®–ò–ë–ö–ê - {error}")
                results.append((test_name, False, error))
                
        except Exception as e:
            print(f"   ‚ùå {test_name}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
            results.append((test_name, False, str(e)))
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –û–¢–õ–ê–î–ö–ê –ú–ï–¢–ê–î–ê–ù–ù–´–• S3")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata_results = test_metadata_variations()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
    encoding_results = test_metadata_encoding()
    
    print("\n" + "=" * 60)
    print("üéØ –û–ë–©–ò–ï –í–´–í–û–î–´:")
    print("=" * 60)
    
    all_failed = [r for r in metadata_results + encoding_results if not r[1]]
    
    if all_failed:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
        for test_name, _, error in all_failed:
            print(f"   - {test_name}: {error}")
    else:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
    if all_failed:
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫:")
        signature_errors = [r for r in all_failed if 'SignatureDoesNotMatch' in str(r[2])]
        if signature_errors:
            print(f"   üìä –û—à–∏–±–æ–∫ –ø–æ–¥–ø–∏—Å–∏: {len(signature_errors)} –∏–∑ {len(all_failed)}")
            print("   üí° –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–∞—é—Ç –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞")

if __name__ == "__main__":
    main()
