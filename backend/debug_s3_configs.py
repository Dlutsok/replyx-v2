#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π S3 –¥–ª—è Timeweb Cloud Storage
"""
import boto3
from botocore.config import Config
from botocore.exceptions import ClientError
import tempfile
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_s3_config(config_name, **kwargs):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é S3"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_name}")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º S3 –∫–ª–∏–µ–Ω—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        s3_client = boto3.client('s3', **kwargs)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as f:
            f.write("Test content for S3 upload")
            temp_file = f.name
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
        bucket_name = os.getenv('S3_BUCKET_NAME')
        test_key = f"test_configs/{config_name}_test.txt"
        
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º: {test_key}")
        
        with open(temp_file, 'rb') as f:
            s3_client.put_object(
                Bucket=bucket_name,
                Key=test_key,
                Body=f,
                ContentType='text/plain'
            )
        
        print(f"‚úÖ {config_name}: –£–°–ü–ï–®–ù–û!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
        try:
            s3_client.head_object(Bucket=bucket_name, Key=test_key)
            print(f"‚úÖ {config_name}: –§–∞–π–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            s3_client.delete_object(Bucket=bucket_name, Key=test_key)
            print(f"üóëÔ∏è {config_name}: –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            
        except ClientError as e:
            print(f"‚ö†Ô∏è {config_name}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file)
        return True
        
    except Exception as e:
        print(f"‚ùå {config_name}: –û–®–ò–ë–ö–ê - {e}")
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'temp_file' in locals():
            try:
                os.unlink(temp_file)
            except:
                pass
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π S3 –¥–ª—è Timeweb Cloud")
    print("=" * 70)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    access_key = os.getenv('S3_ACCESS_KEY_ID')
    secret_key = os.getenv('S3_SECRET_ACCESS_KEY')
    endpoint_url = os.getenv('S3_ENDPOINT_URL')
    region = os.getenv('S3_REGION')
    
    print(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   Endpoint: {endpoint_url}")
    print(f"   Region: {region}")
    print(f"   Access Key: {access_key[:10]}***")
    
    successful_configs = []
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 1: Path-style + v4
    config1_params = {
        'endpoint_url': endpoint_url,
        'region_name': region,
        'aws_access_key_id': access_key,
        'aws_secret_access_key': secret_key,
        'config': Config(
            s3={'addressing_style': 'path', 'signature_version': 's3v4'},
            region_name=region
        )
    }
    if test_s3_config("Path-style + v4", **config1_params):
        successful_configs.append("Path-style + v4")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 2: Virtual-hosted + v4
    config2_params = {
        'endpoint_url': endpoint_url,
        'region_name': region,
        'aws_access_key_id': access_key,
        'aws_secret_access_key': secret_key,
        'config': Config(
            s3={'addressing_style': 'virtual', 'signature_version': 's3v4'},
            region_name=region
        )
    }
    if test_s3_config("Virtual-hosted + v4", **config2_params):
        successful_configs.append("Virtual-hosted + v4")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 3: Path-style + v2
    config3_params = {
        'endpoint_url': endpoint_url,
        'region_name': region,
        'aws_access_key_id': access_key,
        'aws_secret_access_key': secret_key,
        'config': Config(
            s3={'addressing_style': 'path', 'signature_version': 's3v2'},
            region_name=region
        )
    }
    if test_s3_config("Path-style + v2", **config3_params):
        successful_configs.append("Path-style + v2")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 4: Virtual-hosted + v2
    config4_params = {
        'endpoint_url': endpoint_url,
        'region_name': region,
        'aws_access_key_id': access_key,
        'aws_secret_access_key': secret_key,
        'config': Config(
            s3={'addressing_style': 'virtual', 'signature_version': 's3v2'},
            region_name=region
        )
    }
    if test_s3_config("Virtual-hosted + v2", **config4_params):
        successful_configs.append("Virtual-hosted + v2")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 5: –ë–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config5_params = {
        'endpoint_url': endpoint_url,
        'region_name': region,
        'aws_access_key_id': access_key,
        'aws_secret_access_key': secret_key,
    }
    if test_s3_config("Default config", **config5_params):
        successful_configs.append("Default config")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 6: –¢–æ–ª—å–∫–æ —Å region_name –≤ config
    config6_params = {
        'endpoint_url': endpoint_url,
        'region_name': region,
        'aws_access_key_id': access_key,
        'aws_secret_access_key': secret_key,
        'config': Config(region_name=region)
    }
    if test_s3_config("Region-only config", **config6_params):
        successful_configs.append("Region-only config")
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 70)
    
    if successful_configs:
        print(f"‚úÖ –†–∞–±–æ—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ({len(successful_configs)}):")
        for config in successful_configs:
            print(f"   - {config}")
        print(f"\nüéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {successful_configs[0]}")
    else:
        print("‚ùå –ù–∏ –æ–¥–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞")
        print("   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoint URL")
        print("   - –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞")
        print("   - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∫–µ—Ç—É")

if __name__ == "__main__":
    main()
