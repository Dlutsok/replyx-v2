#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ S3StorageService vs –ø—Ä—è–º–æ–π boto3 –∫–ª–∏–µ–Ω—Ç
"""
import tempfile
import os
from dotenv import load_dotenv
from services.s3_storage_service import get_s3_service
import boto3
from botocore.config import Config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_direct_boto3():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —Å boto3 –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Å–∫—Ä–∏–ø—Ç–µ"""
    print("üß™ –¢–µ—Å—Ç —Å –ø—Ä—è–º—ã–º boto3 –∫–ª–∏–µ–Ω—Ç–æ–º")
    print("=" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Å–∫—Ä–∏–ø—Ç–µ
        s3_client = boto3.client(
            's3',
            endpoint_url=os.getenv('S3_ENDPOINT_URL'),
            region_name=os.getenv('S3_REGION'),
            aws_access_key_id=os.getenv('S3_ACCESS_KEY_ID'),
            aws_secret_access_key=os.getenv('S3_SECRET_ACCESS_KEY'),
            config=Config(
                s3={'addressing_style': 'path', 'signature_version': 's3v4'},
                region_name=os.getenv('S3_REGION')
            )
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as f:
            f.write("Test content for direct boto3")
            temp_file = f.name
        
        bucket_name = os.getenv('S3_BUCKET_NAME')
        test_key = "debug/direct_boto3_test.txt"
        
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º: {test_key}")
        
        with open(temp_file, 'rb') as f:
            s3_client.put_object(
                Bucket=bucket_name,
                Key=test_key,
                Body=f,
                ContentType='text/plain'
            )
        
        print("‚úÖ –ü—Ä—è–º–æ–π boto3: –£–°–ü–ï–®–ù–û!")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        s3_client.delete_object(Bucket=bucket_name, Key=test_key)
        os.unlink(temp_file)
        return True
        
    except Exception as e:
        print(f"‚ùå –ü—Ä—è–º–æ–π boto3: –û–®–ò–ë–ö–ê - {e}")
        if 'temp_file' in locals():
            try:
                os.unlink(temp_file)
            except:
                pass
        return False

def test_s3_storage_service():
    """–¢–µ—Å—Ç —á–µ—Ä–µ–∑ S3StorageService"""
    print("\nüß™ –¢–µ—Å—Ç —á–µ—Ä–µ–∑ S3StorageService")
    print("=" * 40)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º S3 —Å–µ—Ä–≤–∏—Å
        s3_service = get_s3_service()
        print("‚úÖ S3 —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        test_content = "Test content for S3StorageService"
        content_bytes = test_content.encode('utf-8')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–ª—é—á –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        object_key = "debug/s3_storage_service_test.txt"
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º: {object_key}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å
        upload_result = s3_service.upload_file(
            file_content=content_bytes,
            object_key=object_key,
            content_type="text/plain",
            metadata={
                'test': 'true',
                'method': 'S3StorageService'
            }
        )
        
        if upload_result.get('success'):
            print("‚úÖ S3StorageService: –£–°–ü–ï–®–ù–û!")
            print(f"   üìÑ URL: {upload_result.get('url')}")
            print(f"   üìè –†–∞–∑–º–µ—Ä: {upload_result.get('size')} –±–∞–π—Ç")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            s3_service.s3_client.delete_object(
                Bucket=s3_service.bucket_name, 
                Key=object_key
            )
            return True
        else:
            print(f"‚ùå S3StorageService: –û–®–ò–ë–ö–ê - {upload_result.get('error')}")
            return False
        
    except Exception as e:
        print(f"‚ùå S3StorageService: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
        return False

def test_s3_service_with_complex_key():
    """–¢–µ—Å—Ç —á–µ—Ä–µ–∑ S3StorageService —Å–æ —Å–ª–æ–∂–Ω—ã–º –∫–ª—é—á–æ–º –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ"""
    print("\nüß™ –¢–µ—Å—Ç —á–µ—Ä–µ–∑ S3StorageService —Å–æ —Å–ª–æ–∂–Ω—ã–º –∫–ª—é—á–æ–º")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º S3 —Å–µ—Ä–≤–∏—Å
        s3_service = get_s3_service()
        print("‚úÖ S3 —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        test_content = "Test content with complex key"
        content_bytes = test_content.encode('utf-8')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–∂–Ω—ã–π –∫–ª—é—á –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
        user_id = 1
        secure_filename = "1_20250915_180521_46337eb1c07ab05d.txt"
        object_key = s3_service.get_user_object_key(
            user_id,
            secure_filename,
            "documents"
        )
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º: {object_key}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å
        upload_result = s3_service.upload_file(
            file_content=content_bytes,
            object_key=object_key,
            content_type="text/plain",
            metadata={
                'user_id': str(user_id),
                'original_filename': 'test.txt',
                'file_type': 'document',
                'test': 'true'
            }
        )
        
        if upload_result.get('success'):
            print("‚úÖ S3StorageService —Å–æ —Å–ª–æ–∂–Ω—ã–º –∫–ª—é—á–æ–º: –£–°–ü–ï–®–ù–û!")
            print(f"   üìÑ URL: {upload_result.get('url')}")
            print(f"   üìè –†–∞–∑–º–µ—Ä: {upload_result.get('size')} –±–∞–π—Ç")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            s3_service.s3_client.delete_object(
                Bucket=s3_service.bucket_name, 
                Key=object_key
            )
            return True
        else:
            print(f"‚ùå S3StorageService —Å–æ —Å–ª–æ–∂–Ω—ã–º –∫–ª—é—á–æ–º: –û–®–ò–ë–ö–ê - {upload_result.get('error')}")
            return False
        
    except Exception as e:
        print(f"‚ùå S3StorageService —Å–æ —Å–ª–æ–∂–Ω—ã–º –∫–ª—é—á–æ–º: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –û–¢–õ–ê–î–ö–ê S3 –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 50)
    
    results = []
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π boto3
    results.append(("–ü—Ä—è–º–æ–π boto3", test_direct_boto3()))
    
    # –¢–µ—Å—Ç 2: S3StorageService —Å –ø—Ä–æ—Å—Ç—ã–º –∫–ª—é—á–æ–º
    results.append(("S3StorageService (–ø—Ä–æ—Å—Ç–æ–π)", test_s3_storage_service()))
    
    # –¢–µ—Å—Ç 3: S3StorageService —Å–æ —Å–ª–æ–∂–Ω—ã–º –∫–ª—é—á–æ–º
    results.append(("S3StorageService (—Å–ª–æ–∂–Ω—ã–π)", test_s3_service_with_complex_key()))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò:")
    print("=" * 50)
    
    for test_name, success in results:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"   {test_name}: {status}")

if __name__ == "__main__":
    main()
