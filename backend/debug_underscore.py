#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ –≤ –∫–ª—é—á–∞—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
"""
import os
from dotenv import load_dotenv
from services.s3_storage_service import get_s3_service

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_underscore_hypothesis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–∏–ø–æ—Ç–µ–∑—É —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏")
    print("=" * 50)
    
    s3_service = get_s3_service()
    test_content = "Test underscore hypothesis"
    content_bytes = test_content.encode('utf-8')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π
    test_cases = [
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        ("user_id (–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)", {'user_id': '1'}),
        ("original_filename (–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)", {'original_filename': 'test.txt'}),
        ("file_type (–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)", {'file_type': 'document'}),
        
        # –¢–µ –∂–µ –∫–ª—é—á–∏ –±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
        ("userid (–±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)", {'userid': '1'}),
        ("originalfilename (–±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)", {'originalfilename': 'test.txt'}),
        ("filetype (–±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)", {'filetype': 'document'}),
        
        # –¢–µ –∂–µ –∫–ª—é—á–∏ —Å –¥–µ—Ñ–∏—Å–∞–º–∏
        ("user-id (–¥–µ—Ñ–∏—Å)", {'user-id': '1'}),
        ("original-filename (–¥–µ—Ñ–∏—Å)", {'original-filename': 'test.txt'}),
        ("file-type (–¥–µ—Ñ–∏—Å)", {'file-type': 'document'}),
        
        # –¢–µ –∂–µ –∫–ª—é—á–∏ —Å camelCase
        ("userId (camelCase)", {'userId': '1'}),
        ("originalFilename (camelCase)", {'originalFilename': 'test.txt'}),
        ("fileType (camelCase)", {'fileType': 'document'}),
        
        # –î—Ä—É–≥–∏–µ –∫–ª—é—á–∏ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        ("test_key (–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)", {'test_key': 'value'}),
        ("some_data (–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)", {'some_data': 'data'}),
        ("my_field (–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)", {'my_field': 'field'}),
        
        # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π –±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
        ("–í—Å–µ –±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π", {
            'userid': '1',
            'originalfilename': 'test.txt',
            'filetype': 'document',
            'test': 'true'
        }),
        
        # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å –¥–µ—Ñ–∏—Å–∞–º–∏
        ("–í—Å–µ —Å –¥–µ—Ñ–∏—Å–∞–º–∏", {
            'user-id': '1',
            'original-filename': 'test.txt',
            'file-type': 'document',
            'test': 'true'
        }),
    ]
    
    results = []
    
    for test_name, metadata in test_cases:
        print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_name}")
        print(f"   üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")
        
        try:
            object_key = f"debug_underscore/{test_name.replace(' ', '_').replace('(', '').replace(')', '').lower()}_test.txt"
            
            upload_result = s3_service.upload_file(
                file_content=content_bytes,
                object_key=object_key,
                content_type="text/plain",
                metadata=metadata
            )
            
            if upload_result.get('success'):
                print(f"   ‚úÖ {test_name}: –£–°–ü–ï–®–ù–û!")
                s3_service.s3_client.delete_object(
                    Bucket=s3_service.bucket_name, 
                    Key=object_key
                )
                results.append((test_name, True, None))
            else:
                error = upload_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"   ‚ùå {test_name}: –û–®–ò–ë–ö–ê - {error}")
                results.append((test_name, False, error))
                
        except Exception as e:
            print(f"   ‚ùå {test_name}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
            results.append((test_name, False, str(e)))
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 50)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("=" * 50)
    
    successful = [r for r in results if r[1]]
    failed = [r for r in results if not r[1]]
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–µ ({len(successful)}):")
    for test_name, _, _ in successful:
        print(f"   - {test_name}")
    
    if failed:
        print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ ({len(failed)}):")
        for test_name, _, error in failed:
            print(f"   - {test_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É
    underscore_failed = [r for r in failed if '_' in str(r[0]) and '–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ' in str(r[0])]
    underscore_successful = [r for r in successful if '_' in str(r[0]) and '–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ' in str(r[0])]
    
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ì–ò–ü–û–¢–ï–ó–´ –û –ü–û–î–ß–ï–†–ö–ò–í–ê–ù–ò–Ø–•:")
    print(f"   üìä –¢–µ—Å—Ç—ã —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ - –Ω–µ—É–¥–∞—á–Ω—ã–µ: {len(underscore_failed)}")
    print(f"   üìä –¢–µ—Å—Ç—ã —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ - —É—Å–ø–µ—à–Ω—ã–µ: {len(underscore_successful)}")
    
    if len(underscore_failed) > len(underscore_successful):
        print("   üí° –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –∫–ª—é—á–∞—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤—ã–∑—ã–≤–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã!")
    else:
        print("   ‚ùì –ì–∏–ø–æ—Ç–µ–∑–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–∏—á–∏–Ω—É")
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –û–¢–õ–ê–î–ö–ê –ü–û–î–ß–ï–†–ö–ò–í–ê–ù–ò–ô –í –ú–ï–¢–ê–î–ê–ù–ù–´–•")
    print("=" * 60)
    
    results = test_underscore_hypothesis()
    
    print("\n" + "=" * 60)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)
    
    failed = [r for r in results if not r[1]]
    if any('–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ' in r[0] for r in failed):
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ë–ï–ó –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π:")
        print("   - user_id ‚Üí userid –∏–ª–∏ user-id")
        print("   - original_filename ‚Üí originalfilename –∏–ª–∏ original-filename")
        print("   - file_type ‚Üí filetype –∏–ª–∏ file-type")

if __name__ == "__main__":
    main()
