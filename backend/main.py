from fastapi import FastAPI, Response, Request, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from core.dynamic_cors_middleware import DynamicCORSMiddleware
from core.dynamic_csp_middleware import DynamicCSPMiddleware
from database.connection import engine, Base, SessionLocal, get_db
from database import models
import os
from sqlalchemy.orm import Session
from sqlalchemy import text
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ (–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞)
load_dotenv(dotenv_path="../.env")

from core.app_config import (
    SECRET_KEY, ALGORITHM, ACCESS_TOKEN_EXPIRE_MINUTES, CORS_ORIGINS
)
from core.csrf_protection import get_csrf_protection, generate_csrf_token_for_response
from core.security_headers import security_headers_middleware
from ai.ai_assistant import router as ai_assistant_router
from ai.training_system import router as training_router
from monitoring.rating_system import router as rating_router

import logging
from logging.handlers import TimedRotatingFileHandler
import time
from prometheus_client import Counter, Histogram, Gauge, generate_latest, CONTENT_TYPE_LATEST
from core.error_handler import setup_error_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π)
os.makedirs('logs', exist_ok=True)
root_logger = logging.getLogger()
root_logger.setLevel(logging.INFO)
for h in list(root_logger.handlers):
    root_logger.removeHandler(h)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler = TimedRotatingFileHandler('logs/api.log', when='midnight', backupCount=7, encoding='utf-8')
file_handler.setFormatter(formatter)
stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)
root_logger.addHandler(file_handler)
root_logger.addHandler(stream_handler)
logger = logging.getLogger(__name__)

# üîß Lifespan events (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ on_event)
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¢–û–õ–¨–ö–û –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ create_all()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ENVIRONMENT (export ENVIRONMENT=development –≤ dev)
    environment = os.getenv("ENVIRONMENT", "production").lower()
    if environment in {"dev", "development", "local"}:
        logger.info(f"Development environment detected: {environment}")
        Base.metadata.create_all(bind=engine)
        logger.info("Database schema created via ORM")
    else:
        logger.info(f"Production environment: {environment} - using Alembic migrations only")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SSE Manager
    try:
        from services.sse_manager import sse_manager
        await sse_manager.initialize()
        logger.info("‚úÖ SSE Manager initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize SSE Manager: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    db = SessionLocal()
    try:
        from services.balance_service import init_default_prices
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏
        init_default_prices(db)
        
        print("‚úÖ Default data initialization completed")
    except Exception as e:
        logger.error(f"Error initializing default data: {e}")
    finally:
        db.close()
    
    # üî• WS-BRIDGE: –ó–∞–ø—É—Å–∫ Redis Pub/Sub –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –¥–ª—è ws-gateway
    ws_bridge_task = None
    enable_ws_bridge = os.getenv("ENABLE_WS_BRIDGE", "false").lower() in ("true", "1", "yes")
    
    if enable_ws_bridge:
        logger.info("üîî ENABLE_WS_BRIDGE=true - –∑–∞–ø—É—Å–∫–∞–µ–º Redis Pub/Sub –ø–æ–¥–ø–∏—Å—á–∏–∫")
        try:
            from services.events_pubsub import start_ws_bridge_subscriber
            
            async def ws_bridge_event_handler(event: dict):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç Redis - —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç –≤ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
                try:
                    dialog_id = event.get("dialog_id")
                    event_type = event.get("type")
                    message = event.get("message")
                    
                    if not dialog_id or not message:
                        logger.warning(f"WS-BRIDGE: Incomplete event data: {event}")
                        return
                    
                    logger.info(f"üîî WS-BRIDGE received: {event_type} dialog={dialog_id}")
                    
                    # WS-BRIDGE disabled - migrated to SSE
                    logger.info(f"üîî WS-BRIDGE: Event ignored (migrated to SSE): {event_type} dialog={dialog_id}")
                    
                except Exception as e:
                    logger.error(f"‚ùå WS-BRIDGE event handler error: {e}", exc_info=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            import asyncio
            ws_bridge_task = asyncio.create_task(
                start_ws_bridge_subscriber(ws_bridge_event_handler)
            )
            logger.info("‚úÖ WS-BRIDGE subscriber started successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to start WS-BRIDGE subscriber: {e}", exc_info=True)
    else:
        logger.info("WS-BRIDGE disabled (ENABLE_WS_BRIDGE != true)")
    
    print("‚úÖ Application startup completed")
    
    yield
    
    # Shutdown
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SSE Manager
    try:
        from services.sse_manager import sse_manager
        await sse_manager.shutdown()
        logger.info("‚úÖ SSE Manager shutdown completed")
    except Exception as e:
        logger.error(f"‚ùå Error shutting down SSE Manager: {e}")
    
    if ws_bridge_task and not ws_bridge_task.done():
        logger.info("üõë Stopping WS-BRIDGE subscriber...")
        ws_bridge_task.cancel()
        try:
            await ws_bridge_task
        except asyncio.CancelledError:
            logger.info("‚úÖ WS-BRIDGE subscriber stopped")
        except Exception as e:
            logger.error(f"‚ùå Error stopping WS-BRIDGE: {e}")
    
    print("‚úÖ Application shutdown completed")

app = FastAPI(lifespan=lifespan)
app.include_router(ai_assistant_router)
app.include_router(training_router)
app.include_router(rating_router)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
from api.system import router as system_router
from api.auth import router as auth_router
from api.users import router as users_router
from api.documents import router as documents_router
from api.assistants import router as assistants_router
from api.dialogs import router as dialogs_router
from api.bots import router as bots_router
from api.admin import router as admin_router

from api.site import router as site_router
from api.tokens import router as tokens_router
from api.email import router as email_router

# from api.websockets import router as websockets_router  # REMOVED - migrated to SSE
from api.balance import router as balance_router
from api.support import router as support_router
from api.handoff import router as handoff_router, operator_router as operator_handoff_router
from api.qa_knowledge import router as qa_knowledge_router
from api.database_admin import router as database_admin_router
from api.start_analytics import router as start_analytics_router
from api.tinkoff_payments import router as tinkoff_payments_router
from api.debug_sse import router as debug_sse_router  # Renamed from debug_websocket
from api.sse import router as sse_router
from api.proxy_monitoring import router as proxy_monitoring_router
app.include_router(system_router, prefix="/api")
app.include_router(auth_router, prefix="/api")
app.include_router(users_router, prefix="/api")
app.include_router(documents_router, prefix="/api")
app.include_router(assistants_router, prefix="/api")
app.include_router(dialogs_router, prefix="/api")
app.include_router(bots_router, prefix="/api")
app.include_router(admin_router, prefix="/api")

app.include_router(site_router, prefix="/api")
app.include_router(tokens_router, prefix="/api")
app.include_router(email_router, prefix="/api")
app.include_router(rating_router, prefix="/api")
app.include_router(balance_router)
app.include_router(support_router, prefix="/api")
app.include_router(handoff_router, prefix="/api")
app.include_router(operator_handoff_router, prefix="/api")
# app.include_router(websockets_router)  # REMOVED - migrated to SSE
app.include_router(qa_knowledge_router, prefix="/api")
app.include_router(database_admin_router, prefix="/api")
app.include_router(start_analytics_router, prefix="/api/start")
app.include_router(tinkoff_payments_router)
app.include_router(debug_sse_router, prefix="/api")
app.include_router(proxy_monitoring_router, prefix="/api")
app.include_router(sse_router)

# Static files –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∞–≤–∞—Ç–∞—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã)
from fastapi.staticfiles import StaticFiles
import os

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
uploads_dir = "uploads"
os.makedirs(uploads_dir, exist_ok=True)
os.makedirs(os.path.join(uploads_dir, "avatars"), exist_ok=True)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/uploads", StaticFiles(directory=uploads_dir), name="uploads")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
setup_error_handlers(app)

# üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π CORS —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ–ª–∏—Ç–∏–∫
# –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å credentials)
main_app_origins = os.getenv('CORS_ORIGINS', 'https://replyx.ru,https://www.replyx.ru,http://localhost:3000,http://localhost:3001,http://localhost:3002,http://localhost:8000').split(',')

# –û—á–∏—â–∞–µ–º –¥–æ–º–µ–Ω—ã –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º "*"
main_app_origins = [origin.strip() for origin in main_app_origins if origin.strip() != "*"]

print(f"üåê –û—Å–Ω–æ–≤–Ω—ã–µ CORS –¥–æ–º–µ–Ω—ã: {main_app_origins}")
print(f"üîß –í–∏–¥–∂–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: ['/api/validate-widget-token', '/api/widget-config']")

# –î–æ–±–∞–≤–ª—è–µ–º DynamicCORSMiddleware –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ
app.add_middleware(
    DynamicCORSMiddleware,
    main_app_origins=main_app_origins,
    widget_endpoints=['/api/validate-widget-token', '/api/widget-config'],
    allow_credentials=True,  # –†–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
    allow_headers=["*"],
    max_age=600,
)

# üõ°Ô∏è –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π CSP Middleware –¥–ª—è iframe —Å—Ç—Ä–∞–Ω–∏—Ü
app.add_middleware(
    DynamicCSPMiddleware,
    iframe_path='/chat-iframe'
)

print("üõ°Ô∏è DynamicCSPMiddleware –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è iframe —Å—Ç—Ä–∞–Ω–∏—Ü")

# üõ°Ô∏è CSRF Protection Middleware
# –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏–ª–∏ –ø—Ä–∏ —è–≤–Ω–æ–º —É–∫–∞–∑–∞–Ω–∏–∏
enable_csrf = os.getenv('ENABLE_CSRF_PROTECTION', 'false').lower() in ('true', '1', 'yes')
environment = os.getenv('ENVIRONMENT', 'development').lower()

if enable_csrf:
    csrf_protection = get_csrf_protection()
    
    @app.middleware("http")
    async def csrf_middleware(request: Request, call_next):
        return await csrf_protection(request, call_next)
    
    print("üõ°Ô∏è CSRF Protection –≤–∫–ª—é—á–µ–Ω–∞")
else:
    print("‚ö†Ô∏è CSRF Protection –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")

# üõ°Ô∏è Security Headers Middleware
@app.middleware("http")
async def security_headers_middleware_handler(request: Request, call_next):
    return await security_headers_middleware(request, call_next)

print("üõ°Ô∏è Security Headers –≤–∫–ª—é—á–µ–Ω—ã")

# –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ services/bot_manager.py
from services.bot_manager import (
    reload_assistant_bots,
    hot_reload_assistant_bots,
    reload_specific_bot,
    reload_user_assistant_bots
)

# WebSocket removed - migrated to SSE
# from services.websocket_manager import (...) - REMOVED

# AI Token Manager
from ai.ai_token_manager import ai_token_manager

# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ services/trial_service.py
from services.trial_service import (
    TRIAL_DURATION_DAYS,
    TRIAL_MESSAGE_LIMIT,
    is_trial_period_active,
    get_trial_messages_used,
    get_trial_days_left,
    is_user_blocked,
    get_user_message_limit,
    check_user_access,
    get_warning_message
)

# ============================
# Prometheus –º–µ—Ç—Ä–∏–∫–∏ –∏ middleware
# ============================

HTTP_REQUEST_LATENCY = Histogram(
    'http_request_duration_seconds', 'HTTP request latency', ['method', 'path', 'status']
)
HTTP_REQUEST_COUNT = Counter(
    'http_requests_total', 'Total HTTP requests', ['method', 'path', 'status']
)
DB_POOL_CHECKED_OUT = Gauge('db_pool_checked_out', 'Checked out DB connections')
DB_POOL_SIZE = Gauge('db_pool_size', 'DB pool size')
DB_POOL_OVERFLOW = Gauge('db_pool_overflow', 'DB pool overflow')
REDIS_AVAILABLE = Gauge('redis_available', 'Redis availability (1/0)')
WEBSOCKET_CONNECTIONS = Gauge('websocket_connections_total', 'Total active WebSocket connections')
WEBSOCKET_CONNECTIONS_BY_TYPE = Gauge('websocket_connections_by_type', 'WebSocket connections by type', ['connection_type'])
WEBSOCKET_RATE_LIMITED_IPS = Gauge('websocket_rate_limited_ips', 'Currently rate limited IP addresses')
WEBSOCKET_MESSAGE_QUEUE_PENDING = Gauge('websocket_message_queue_pending', 'Pending messages in WebSocket queue')
WEBSOCKET_MESSAGE_QUEUE_PROCESSED = Counter('websocket_message_queue_processed_total', 'Total processed WebSocket messages')
WEBSOCKET_CLOSE_CODES = Counter('websocket_close_codes_total', 'WebSocket close codes', ['code', 'reason'])
WEBSOCKET_CONNECTION_DURATION = Histogram('websocket_connection_duration_seconds', 'WebSocket connection duration')

# –ú–µ—Ç—Ä–∏–∫–∏ –≤–∏–¥–∂–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è CORS –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
WIDGET_CORS_REQUESTS = Counter('widget_cors_requests_total', 'Total widget CORS requests', ['endpoint', 'origin', 'status'])
WIDGET_TOKEN_VALIDATIONS = Counter('widget_token_validations_total', 'Widget token validation attempts', ['result', 'endpoint'])
WIDGET_BLOCKED_ORIGINS = Counter('widget_blocked_origins_total', 'Blocked widget origins', ['origin', 'reason'])


@app.middleware("http")
async def prometheus_middleware(request, call_next):
    start = time.perf_counter()
    status_code = "500"  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
    
    try:
        response = await call_next(request)
        if response is not None:
            status_code = str(response.status_code)
        else:
            # –ï—Å–ª–∏ response None, —Å–æ–∑–¥–∞–µ–º –æ—à–∏–±–∫—É 500
            from fastapi.responses import JSONResponse
            response = JSONResponse(
                status_code=500,
                content={"error": "Internal server error: No response returned"}
            )
            status_code = "500"
            
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ middleware chain
        from fastapi.responses import JSONResponse
        response = JSONResponse(
            status_code=500,
            content={"error": f"Internal server error: {str(e)}"}
        )
        status_code = "500"
    
    duration = time.perf_counter() - start
    method = request.method
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ø—É—Ç–∏, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    route = request.scope.get('route')
    path = getattr(route, 'path', request.url.path)
    
    try:
        HTTP_REQUEST_LATENCY.labels(method=method, path=path, status=status_code).observe(duration)
        HTTP_REQUEST_COUNT.labels(method=method, path=path, status=status_code).inc()
    except Exception:
        pass
    return response


@app.get("/metrics")
def prometheus_metrics():
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—É–ª–∞ –ë–î/Redis/WS –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    try:
        pool = engine.pool
        DB_POOL_SIZE.set(pool.size())
        DB_POOL_CHECKED_OUT.set(pool.checkedout())
        DB_POOL_OVERFLOW.set(pool.overflow())
    except Exception:
        pass
    try:
        from cache.redis_cache import cache as redis_cache
        REDIS_AVAILABLE.set(1 if redis_cache.is_available() else 0)
    except Exception:
        REDIS_AVAILABLE.set(0)
    try:
        # SSE –º–µ—Ç—Ä–∏–∫–∏ –≤–º–µ—Å—Ç–æ WebSocket
        from services.sse_manager import get_sse_stats
        sse_stats = get_sse_stats()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º SSE –º–µ—Ç—Ä–∏–∫–∏ (–∑–∞–º–µ–Ω—è–µ–º WebSocket)
        WEBSOCKET_CONNECTIONS.set(sse_stats.get('active_connections', 0))
        
        # SSE connections by type
        clients_per_dialog = sse_stats.get('clients_per_dialog', {})
        total_sse_connections = sum(clients_per_dialog.values())
        WEBSOCKET_CONNECTIONS_BY_TYPE.labels(connection_type='sse').set(total_sse_connections)
        
        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–µ—Ç—Ä–∏–∫ (set to 0)
        WEBSOCKET_RATE_LIMITED_IPS.set(0)
        WEBSOCKET_MESSAGE_QUEUE_PENDING.set(0)
        
    except Exception as e:
        # Fallback: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è SSE —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        logger.warning(f"Error getting SSE stats: {e}")
        WEBSOCKET_CONNECTIONS.set(0)
        WEBSOCKET_CONNECTIONS_BY_TYPE.labels(connection_type='sse').set(0)

    data = generate_latest()
    return Response(content=data, media_type=CONTENT_TYPE_LATEST)


@app.get("/api/csrf-token")
def get_csrf_token(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞ –¥–ª—è frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    try:
        csrf_token = generate_csrf_token_for_response(request)
        return {
            "csrf_token": csrf_token,
            "expires_in": 3600,  # 1 —á–∞—Å
            "token_name": "csrf_token",
            "header_name": "X-CSRF-Token"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSRF —Ç–æ–∫–µ–Ω–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSRF —Ç–æ–∫–µ–Ω–∞"
        )


@app.get("/health")
def health_check():
    """Health check endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    health_status = {"status": "healthy", "timestamp": time.time(), "components": {}}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        db = SessionLocal()
        db.execute(text("SELECT 1"))
        db.close()
        health_status["components"]["database"] = {"status": "healthy"}
    except Exception as e:
        health_status["status"] = "unhealthy"
        health_status["components"]["database"] = {"status": "unhealthy", "error": str(e)}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    try:
        from cache.redis_cache import cache as redis_cache
        redis_available = redis_cache.is_available()
        health_status["components"]["redis"] = {"status": "healthy" if redis_available else "unhealthy"}
        if not redis_available:
            health_status["status"] = "unhealthy"
    except Exception as e:
        health_status["status"] = "unhealthy"
        health_status["components"]["redis"] = {"status": "unhealthy", "error": str(e)}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ AI Token Manager
    try:
        ai_token_manager_status = "healthy" if ai_token_manager else "unhealthy"
        health_status["components"]["ai_token_manager"] = {"status": ai_token_manager_status}
    except Exception as e:
        health_status["components"]["ai_token_manager"] = {"status": "unhealthy", "error": str(e)}
    
    return health_status


@app.get("/metrics/telegram-rate-limit")
async def get_telegram_rate_limit_metrics():
    """Prometheus –º–µ—Ç—Ä–∏–∫–∏ rate limiting –¥–ª—è –≤—Å–µ—Ö Telegram –±–æ—Ç–æ–≤"""
    try:
        from services.telegram_rate_limiter import get_all_rate_limiters
        
        all_limiters = get_all_rate_limiters()
        metrics = []
        
        # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_active_chats = 0
        total_active_workers = 0 
        total_queue_size = 0
        total_messages_sent = 0
        total_messages_queued = 0
        total_rate_limit_hits = 0
        total_retry_attempts = 0
        total_errors = 0
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –±–æ—Ç—É
        for bot_id, rate_limiter in all_limiters.items():
            stats = rate_limiter.get_global_stats()
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
            metrics.append(f"telegram_bot_active_chats{{bot_id=\"{bot_id}\"}} {stats['active_chats']}")
            metrics.append(f"telegram_bot_active_workers{{bot_id=\"{bot_id}\"}} {stats['active_workers']}")
            metrics.append(f"telegram_bot_total_queue_size{{bot_id=\"{bot_id}\"}} {stats['total_queue_size']}")
            
            if 'stats' in stats:
                bot_stats = stats['stats']
                metrics.append(f"telegram_bot_messages_sent_total{{bot_id=\"{bot_id}\"}} {bot_stats['messages_sent']}")
                metrics.append(f"telegram_bot_messages_queued_total{{bot_id=\"{bot_id}\"}} {bot_stats['messages_queued']}")
                metrics.append(f"telegram_bot_rate_limit_hits_total{{bot_id=\"{bot_id}\"}} {bot_stats['rate_limit_hits']}")
                metrics.append(f"telegram_bot_retry_attempts_total{{bot_id=\"{bot_id}\"}} {bot_stats['retry_attempts']}")
                metrics.append(f"telegram_bot_errors_total{{bot_id=\"{bot_id}\"}} {bot_stats['errors']}")
                
                # –ê–≥—Ä–µ–≥–∞—Ü–∏—è
                total_messages_sent += bot_stats['messages_sent']
                total_messages_queued += bot_stats['messages_queued'] 
                total_rate_limit_hits += bot_stats['rate_limit_hits']
                total_retry_attempts += bot_stats['retry_attempts']
                total_errors += bot_stats['errors']
            
            if 'uptime' in stats:
                metrics.append(f"telegram_bot_uptime_seconds{{bot_id=\"{bot_id}\"}} {stats['uptime']}")
            
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            total_active_chats += stats['active_chats']
            total_active_workers += stats['active_workers']
            total_queue_size += stats['total_queue_size']
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics.append(f"telegram_total_bots {len(all_limiters)}")
        metrics.append(f"telegram_total_active_chats {total_active_chats}")
        metrics.append(f"telegram_total_active_workers {total_active_workers}")
        metrics.append(f"telegram_global_queue_size {total_queue_size}")
        metrics.append(f"telegram_global_messages_sent_total {total_messages_sent}")
        metrics.append(f"telegram_global_messages_queued_total {total_messages_queued}")
        metrics.append(f"telegram_global_rate_limit_hits_total {total_rate_limit_hits}")
        metrics.append(f"telegram_global_retry_attempts_total {total_retry_attempts}")
        metrics.append(f"telegram_global_errors_total {total_errors}")
        
        # –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã (—Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É)
        # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º: 30 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫ * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤
        max_throughput = len(all_limiters) * 30
        metrics.append(f"telegram_max_theoretical_throughput_per_second {max_throughput}")
        
        return Response(
            content="\n".join(metrics) + "\n",
            media_type="text/plain"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ Telegram rate limiting: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ Telegram")


@app.get("/api/telegram/rate-limit/stats")
async def get_telegram_rate_limit_stats():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limiting –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
    try:
        from services.telegram_rate_limiter import get_all_rate_limiters
        
        all_limiters = get_all_rate_limiters()
        result = {
            "total_bots": len(all_limiters),
            "bots": {},
            "summary": {
                "total_active_chats": 0,
                "total_messages_sent": 0,
                "total_queue_size": 0,
                "max_throughput_per_second": len(all_limiters) * 30
            }
        }
        
        for bot_id, rate_limiter in all_limiters.items():
            stats = rate_limiter.get_global_stats()
            result["bots"][bot_id] = stats
            
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è summary
            result["summary"]["total_active_chats"] += stats.get("active_chats", 0)
            result["summary"]["total_queue_size"] += stats.get("total_queue_size", 0)
            
            if "stats" in stats:
                result["summary"]["total_messages_sent"] += stats["stats"].get("messages_sent", 0)
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rate limiting: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@app.get("/api/telegram/rate-limit/stats/{bot_id}")
async def get_bot_rate_limit_stats(bot_id: str):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limiting –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        from services.telegram_rate_limiter import get_all_rate_limiters
        
        all_limiters = get_all_rate_limiters()
        
        if bot_id not in all_limiters:
            raise HTTPException(status_code=404, detail=f"–ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        rate_limiter = all_limiters[bot_id]
        stats = rate_limiter.get_global_stats()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        result = {
            "bot_id": bot_id,
            "max_throughput_per_second": 30,  # –õ–∏–º–∏—Ç Telegram API –Ω–∞ –±–æ—Ç
            "stats": stats
        }
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞")


@app.get("/metrics/db-size")
async def get_database_size_metrics():
    """Prometheus –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –ë–î"""
    try:
        from monitoring.db_size_monitor import DatabaseSizeMonitor
        
        monitor = DatabaseSizeMonitor()
        report = monitor.generate_full_report()
        
        if 'error' in report:
            raise HTTPException(status_code=500, detail=report['error'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º Prometheus –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        metrics = []
        
        # –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ë–î
        db_size_bytes = report['database_info']['database']['size_bytes']
        metrics.append(f"replyx_database_size_bytes {db_size_bytes}")
        
        # –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
        for table in report['database_info']['tables']:
            table_name = table['name'].replace('-', '_').replace('.', '_')
            metrics.append(f"replyx_table_size_bytes{{table=\"{table['name']}\"}} {table['total_bytes']}")
            if 'live_rows' in table:
                metrics.append(f"replyx_table_rows{{table=\"{table['name']}\"}} {table['live_rows']}")
        
        # –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        if 'used_percent' in report['disk_info']:
            metrics.append(f"replyx_disk_usage_percent {report['disk_info']['used_percent']}")
            metrics.append(f"replyx_disk_free_bytes {report['disk_info']['free_bytes']}")
            metrics.append(f"replyx_disk_total_bytes {report['disk_info']['total_bytes']}")
        
        # –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞
        if report['growth_rate_mb_per_day']:
            metrics.append(f"replyx_database_growth_rate_mb_per_day {report['growth_rate_mb_per_day']}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤
        metrics.append(f"replyx_database_alerts_total {len(report['alerts'])}")
        
        # Health status (0=healthy, 1=warning, 2=critical)
        health_score = 0 if report['health_status'] == 'healthy' else 1 if report['health_status'] == 'warning' else 2
        metrics.append(f"replyx_database_health_status {health_score}")
        
        return Response(
            content="\n".join(metrics) + "\n",
            media_type="text/plain"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ë–î: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ë–î")