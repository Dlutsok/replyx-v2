from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from database import models, engine, Base, SessionLocal, get_db
import os
from sqlalchemy.orm import Session
from dotenv import load_dotenv

from core.app_config import (
    SECRET_KEY, ALGORITHM, ACCESS_TOKEN_EXPIRE_MINUTES, CORS_ORIGINS,
    YANDEX_CLIENT_ID, YANDEX_CLIENT_SECRET, YANDEX_REDIRECT_URI, FRONTEND_REDIRECT_URL
)
from ai.ai_assistant import router as ai_assistant_router
from ai.training_system import router as training_router
from monitoring.rating_system import router as rating_router

import logging
from core.error_handler import setup_error_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/api.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# üîß Lifespan events (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ on_event)
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    Base.metadata.create_all(bind=engine)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    db = SessionLocal()
    try:
        from services.balance_service import init_default_prices
        from services.promo_service import init_default_promo_codes
        from services.referral_service import auto_create_referral_codes
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏
        init_default_prices(db)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        init_default_promo_codes(db)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        auto_create_referral_codes(db)
        
        print("‚úÖ Default data initialization completed")
    except Exception as e:
        logger.error(f"Error initializing default data: {e}")
    finally:
        db.close()
    
    print("‚úÖ Application startup completed")
    
    yield
    
    # Shutdown
    print("‚úÖ Application shutdown completed")

app = FastAPI(lifespan=lifespan)
app.include_router(ai_assistant_router)
app.include_router(training_router)
app.include_router(rating_router)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
from api.system import router as system_router
from api.auth import router as auth_router
from api.users import router as users_router
from api.documents import router as documents_router
from api.assistants import router as assistants_router
from api.dialogs import router as dialogs_router
from api.bots import router as bots_router
from api.admin import router as admin_router

from api.site import router as site_router
from api.tokens import router as tokens_router
from api.email import router as email_router

from api.websockets import router as websockets_router
from api.balance import router as balance_router
from api.promo import router as promo_router
from api.referral import router as referral_router
from api.support import router as support_router
from api.ai_chat import router as ai_chat_router
app.include_router(system_router, prefix="/api")
app.include_router(auth_router, prefix="/api")
app.include_router(users_router, prefix="/api")
app.include_router(documents_router, prefix="/api")
app.include_router(assistants_router, prefix="/api")
app.include_router(dialogs_router, prefix="/api")
app.include_router(bots_router, prefix="/api")
app.include_router(admin_router, prefix="/api")

app.include_router(site_router, prefix="/api")
app.include_router(tokens_router, prefix="/api")
app.include_router(email_router, prefix="/api")
app.include_router(rating_router, prefix="/api")
app.include_router(balance_router)
app.include_router(promo_router)
app.include_router(referral_router)
app.include_router(support_router, prefix="/api")
app.include_router(ai_chat_router, prefix="/api")
app.include_router(websockets_router)



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
setup_error_handlers(app)

# Add CORS middleware
# üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –∏ –≤–∏–¥–∂–µ—Ç–æ–≤
cors_origins = os.getenv('CORS_ORIGINS', 'http://localhost:3000,http://localhost:3001,http://localhost:3002,http://localhost:8000,https://rusmedical.ru').split(',')

# –ï—Å–ª–∏ –≤ CORS_ORIGINS –µ—Å—Ç—å "*", —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
allow_all_origins = "*" in cors_origins
if allow_all_origins:
    cors_origins = ["*"]

print(f"üåê CORS origins: {cors_origins}")
app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=not allow_all_origins,  # Credentials –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å allow_origins=["*"]
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
    allow_headers=["*"],
)

# –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ services/bot_manager.py
from services.bot_manager import (
    reload_assistant_bots,
    hot_reload_assistant_bots,
    reload_specific_bot,
    reload_user_assistant_bots
)

# WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ services/websocket_manager.py
from services.websocket_manager import (
    dialog_websocket_endpoint,
    site_dialog_websocket_endpoint,
    widget_dialog_websocket_endpoint,
    push_dialog_message,
    push_site_dialog_message
)

# AI Token Manager
from ai.ai_token_manager import ai_token_manager

# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ services/trial_service.py
from services.trial_service import (
    TRIAL_DURATION_DAYS,
    TRIAL_MESSAGE_LIMIT,
    is_trial_period_active,
    get_trial_messages_used,
    get_trial_days_left,
    is_user_blocked,
    get_user_message_limit,
    check_user_access,
    get_warning_message
)