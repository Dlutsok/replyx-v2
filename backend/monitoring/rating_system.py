from fastapi import APIRouter, HTTPException, Depends, Query
from sqlalchemy.orm import Session
from sqlalchemy import text, func, and_, desc
from database.connection import get_db
from core.auth import get_current_user
from database.models import User, Dialog, DialogMessage
from datetime import datetime, timedelta
from typing import List, Optional
import logging

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/rating", tags=["rating"])

@router.get("/analytics")
async def get_rating_analytics(
    days: int = Query(30, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤"""
    try:
        cutoff_date = datetime.now() - timedelta(days=days)
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
        total_dialogs = db.query(Dialog).filter(
            Dialog.user_id == current_user.id,
            Dialog.started_at >= cutoff_date
        ).count()
        
        # –î–∏–∞–ª–æ–≥–∏ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        rated_dialogs_query = db.query(Dialog).filter(
            Dialog.user_id == current_user.id,
            Dialog.started_at >= cutoff_date,
            Dialog.satisfaction.isnot(None)
        )
        
        rated_dialogs = rated_dialogs_query.count()
        
        # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
        avg_rating = db.query(func.avg(Dialog.satisfaction)).filter(
            Dialog.user_id == current_user.id,
            Dialog.satisfaction.isnot(None),
            Dialog.started_at >= cutoff_date
        ).scalar() or 0
        
        # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ (4-5)
        positive_ratings = db.query(Dialog).filter(
            Dialog.user_id == current_user.id,
            Dialog.satisfaction >= 4,
            Dialog.started_at >= cutoff_date
        ).count()
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ (1-2)  
        negative_ratings = db.query(Dialog).filter(
            Dialog.user_id == current_user.id,
            Dialog.satisfaction <= 2,
            Dialog.started_at >= cutoff_date
        ).count()
        
        # –ü–æ–∫—Ä—ã—Ç–∏–µ –æ—Ü–µ–Ω–∫–∞–º–∏
        rating_coverage = (rated_dialogs / total_dialogs * 100) if total_dialogs > 0 else 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        total_messages = db.query(DialogMessage).join(Dialog).filter(
            Dialog.user_id == current_user.id,
            Dialog.started_at >= cutoff_date,
            DialogMessage.sender == 'assistant'
        ).count()
        
        # –¢—Ä–µ–Ω–¥—ã –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π)
        daily_trends = []
        for i in range(10):
            day_start = (datetime.now() - timedelta(days=i+1)).replace(hour=0, minute=0, second=0, microsecond=0)
            day_end = day_start + timedelta(days=1)
            
            day_avg = db.query(func.avg(Dialog.satisfaction)).filter(
                Dialog.user_id == current_user.id,
                Dialog.satisfaction.isnot(None),
                Dialog.started_at >= day_start,
                Dialog.started_at < day_end
            ).scalar()
            
            day_count = db.query(Dialog).filter(
                Dialog.user_id == current_user.id,
                Dialog.satisfaction.isnot(None),
                Dialog.started_at >= day_start,
                Dialog.started_at < day_end
            ).count()
            
            if day_avg is not None:
                daily_trends.append({
                    "date": day_start.isoformat(),
                    "avg_rating": float(day_avg),
                    "count": day_count
                })
        
        daily_trends.reverse()  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (–æ—Ü–µ–Ω–∫–∞ <= 2)
        low_rated_dialogs = []
        problem_dialogs = db.query(Dialog).filter(
            Dialog.user_id == current_user.id,
            Dialog.satisfaction <= 2,
            Dialog.started_at >= cutoff_date
        ).order_by(desc(Dialog.started_at)).limit(10).all()
        
        for dialog in problem_dialogs:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–µ–≤—å—é
            first_message = db.query(DialogMessage).filter(
                DialogMessage.dialog_id == dialog.id,
                DialogMessage.sender == 'user'
            ).first()
            
            low_rated_dialogs.append({
                "dialog_id": dialog.id,
                "rating": dialog.satisfaction,
                "started_at": dialog.started_at.isoformat(),
                "user": f"user_{dialog.user_id}",
                "comment": first_message.text[:100] + "..." if first_message and len(first_message.text) > 100 else (first_message.text if first_message else "")
            })
        
        return {
            "dialog_stats": {
                "total_dialogs": total_dialogs,
                "rated_dialogs": rated_dialogs,
                "avg_rating": float(avg_rating) if avg_rating else 0,
                "positive_ratings": positive_ratings,
                "negative_ratings": negative_ratings,
                "rating_coverage": round(rating_coverage, 1)
            },
            "message_stats": {
                "total_messages": total_messages,
                "rated_messages": rated_dialogs,  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
                "avg_rating": float(avg_rating) if avg_rating else 0,
                "positive_ratings": positive_ratings,
                "negative_ratings": negative_ratings
            },
            "daily_trends": daily_trends,
            "low_rated_dialogs": low_rated_dialogs,
            "recommendations": generate_recommendations(
                avg_rating, rating_coverage, positive_ratings, negative_ratings, total_dialogs
            )
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")

def generate_recommendations(avg_rating: float, coverage: float, positive: int, negative: int, total: int) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    recommendations = []
    
    if avg_rating < 3.0:
        recommendations.append("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")
    elif avg_rating < 3.5:
        recommendations.append("‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –Ω–∏–∂–µ –Ω–æ—Ä–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.")
    elif avg_rating >= 4.5:
        recommendations.append("üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã—Å–æ–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç –æ–± —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    
    if coverage < 20:
        recommendations.append("üìä –û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –æ—Ü–µ–Ω–∫–∞–º–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
    elif coverage < 50:
        recommendations.append("üìà –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –ª—É—á—à–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")
    
    if negative > positive and total > 5:
        recommendations.append("‚ö†Ô∏è –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –±–æ–ª—å—à–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö. –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.")
    
    if total == 0:
        recommendations.append("üí° –ü–æ–∫–∞ –Ω–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.")
    elif total < 10:
        recommendations.append("üìù –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏–∞–ª–æ–≥–æ–≤.")
    
    if not recommendations:
        recommendations.append("‚úÖ –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
    
    return recommendations

@router.post("/external/dialog")
async def rate_dialog_external(request_data: dict):
    """–í–Ω–µ—à–Ω–∏–π endpoint –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –æ—Ç –±–æ—Ç–æ–≤"""
    try:
        dialog_id = request_data.get('dialog_id')
        rating = request_data.get('rating')
        platform = request_data.get('platform', 'unknown')
        
        if not dialog_id or not rating:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db = next(get_db())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –¥–∏–∞–ª–æ–≥–∞
        dialog = db.query(Dialog).filter(Dialog.id == dialog_id).first()
        if not dialog:
            raise HTTPException(status_code=404, detail="–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        dialog.satisfaction = rating
        db.commit()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ {rating} –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {dialog_id} —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform}")
        
        return {"status": "success", "message": "–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏")

@router.post("/message")
async def rate_message(request_data: dict):
    """–û—Ü–µ–Ω–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        message_id = request_data.get('message_id')
        rating = request_data.get('rating')
        
        if not message_id or not rating:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db = next(get_db())
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ {rating} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
        
        return {"status": "success", "message": "–û—Ü–µ–Ω–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏")

@router.get("/test")
async def test_rating():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "status": "ok",
        "message": "–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "timestamp": datetime.now().isoformat()
    }