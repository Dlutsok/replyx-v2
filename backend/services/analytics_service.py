"""
üìä –°–ï–†–í–ò–° –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò –ò –ú–ï–¢–†–ò–ö

–í—ã–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –∏–∑ main.py –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π.
–ß–∞—Å—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ main.py.
"""

import logging
from typing import Dict, Any, Optional
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from sqlalchemy import func, and_

from database import models
from cache.redis_cache import chatai_cache

logger = logging.getLogger(__name__)

from core.app_config import TRIAL_DURATION_DAYS, TRIAL_MESSAGE_LIMIT


class AnalyticsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫"""
    
    def __init__(self):
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç –∫—ç—à –¥–ª—è –º–µ—Ç—Ä–∏–∫
    
    def get_user_metrics(
        self, 
        db: Session, 
        user_id: int, 
        period: str = 'month',
        date: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –º–µ—Ç—Ä–∏–∫
        cached_metrics = chatai_cache.cache_user_metrics(
            user_id=user_id, 
            period=period, 
            date=date
        )
        
        if cached_metrics:
            logger.debug(f"üöÄ CACHE HIT: –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return cached_metrics
        
        logger.debug(f"üîç CACHE MISS: –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(models.User).filter(models.User.id == user_id).first()
        if not user:
            raise ValueError(f"User {user_id} not found")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        start_time, end_time, previous_start, previous_end = self._get_time_ranges(period, date)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = self._calculate_period_metrics(db, user_id, start_time, end_time)
        previous_metrics = self._calculate_period_metrics(db, user_id, previous_start, previous_end)
        
        # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        changes = self._calculate_changes(metrics, previous_metrics)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –∏ –¥–æ—Å—Ç—É–ø–µ
        trial_info = self._get_trial_info(user, db)
        user_access = self._check_user_access(user, db)
        
        result = {
            "period": period,
            "totalMessages": trial_info.get("trial_messages_used", 0) if trial_info["is_trial_active"] else metrics["total_messages"],
            "periodMessages": metrics["period_messages"],
            "messageLimit": self._get_user_message_limit(user),
            "autoResponseRate": metrics["auto_response_rate"],
            "avgResponseTime": metrics["avg_response_time"],
            "customerSatisfaction": metrics["avg_rating"],
            "dialogs": metrics["period_dialogs"],
            "changes": changes,
            "trialInfo": trial_info,
            "userAccess": user_access
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
        chatai_cache.set_user_metrics(
            user_id=user_id,
            period=period,
            data=result,
            date=date,
            ttl=self.cache_ttl
        )
        
        return result
    
    def get_admin_system_stats(self, db: Session) -> Dict[str, Any]:
        """
        –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_stats = chatai_cache.cache_system_stats()
        if cached_stats:
            logger.debug("üöÄ CACHE HIT: System stats")
            return cached_stats
        
        logger.debug("üîç CACHE MISS: Calculating system stats")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = db.query(models.User).count()
        active_users = db.query(models.User).filter(models.User.status == 'active').count()
        total_dialogs = db.query(models.Dialog).count()
        total_messages = db.query(models.DialogMessage).count()
        total_assistants = db.query(models.Assistant).count()
        total_documents = db.query(models.Document).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        last_24h = datetime.utcnow() - timedelta(hours=24)
        new_users_24h = db.query(models.User).filter(models.User.created_at >= last_24h).count()
        new_dialogs_24h = db.query(models.Dialog).filter(models.Dialog.started_at >= last_24h).count()
        new_messages_24h = db.query(models.DialogMessage).filter(models.DialogMessage.timestamp >= last_24h).count()
        
        # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        avg_satisfaction = db.query(
            func.avg(models.Dialog.satisfaction)
        ).filter(models.Dialog.satisfaction.isnot(None)).scalar() or 0
        
        result = {
            "overview": {
                "total_users": total_users,
                "active_users": active_users,
                "total_dialogs": total_dialogs,
                "total_messages": total_messages,
                "total_assistants": total_assistants,
                "total_documents": total_documents,
                "avg_satisfaction": round(float(avg_satisfaction), 2)
            },
            "last_24h": {
                "new_users": new_users_24h,
                "new_dialogs": new_dialogs_24h,
                "new_messages": new_messages_24h
            },
            "timestamp": datetime.utcnow().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 1 –º–∏–Ω—É—Ç—É
        chatai_cache.set_system_stats(result, 60)
        
        return result
    

    
    def _get_time_ranges(self, period: str, date: Optional[str] = None):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞"""
        now = datetime.utcnow()
        
        if period == 'custom' and date:
            try:
                custom_date = datetime.strptime(date, '%Y-%m-%d')
                start_time = custom_date.replace(hour=0, minute=0, second=0, microsecond=0)
                end_time = start_time + timedelta(days=1)
                previous_start = start_time - timedelta(days=1)
                previous_end = start_time
            except ValueError:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
                start_time = now - timedelta(days=1)
                end_time = now
                previous_start = now - timedelta(days=2)
                previous_end = start_time
        elif period == 'day':
            start_time = now - timedelta(days=1)
            end_time = now
            previous_start = now - timedelta(days=2)
            previous_end = start_time
        elif period == 'week':
            start_time = now - timedelta(days=7)
            end_time = now
            previous_start = now - timedelta(days=14)
            previous_end = start_time
        else:  # month
            start_time = now - timedelta(days=30)
            end_time = now
            previous_start = now - timedelta(days=60)
            previous_end = start_time
        
        return start_time, end_time, previous_start, previous_end
    
    def _calculate_period_metrics(self, db: Session, user_id: int, start_time: datetime, end_time: datetime) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
        period_messages = db.query(func.count(models.DialogMessage.id)).join(
            models.Dialog
        ).filter(
            models.Dialog.user_id == user_id,
            models.DialogMessage.sender == 'assistant',
            models.DialogMessage.timestamp >= start_time,
            models.DialogMessage.timestamp <= end_time
        ).scalar() or 0
        
        # –î–∏–∞–ª–æ–≥–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        period_dialogs = db.query(func.count(models.Dialog.id)).filter(
            models.Dialog.user_id == user_id,
            models.Dialog.started_at >= start_time,
            models.Dialog.started_at <= end_time
        ).scalar() or 0
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        avg_rating = db.query(func.avg(models.Dialog.satisfaction)).filter(
            models.Dialog.user_id == user_id,
            models.Dialog.satisfaction.isnot(None),
            models.Dialog.started_at >= start_time,
            models.Dialog.started_at <= end_time
        ).scalar() or 0
        
        # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        avg_response_time = db.query(func.avg(models.Dialog.first_response_time)).filter(
            models.Dialog.user_id == user_id,
            models.Dialog.first_response_time.isnot(None),
            models.Dialog.started_at >= start_time,
            models.Dialog.started_at <= end_time
        ).scalar() or 0
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ - –¥–∏–∞–ª–æ–≥–∏ —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–º
        auto_response_dialogs = db.query(func.count(models.Dialog.id)).filter(
            models.Dialog.user_id == user_id,
            models.Dialog.auto_response == 1,
            models.Dialog.started_at >= start_time,
            models.Dialog.started_at <= end_time
        ).scalar() or 0
        
        auto_response_rate = round((auto_response_dialogs / period_dialogs * 100), 1) if period_dialogs > 0 else 0
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total_messages = db.query(func.count(models.DialogMessage.id)).join(
            models.Dialog
        ).filter(
            models.Dialog.user_id == user_id,
            models.DialogMessage.sender == 'assistant'
        ).scalar() or 0
        
        return {
            "period_messages": period_messages,
            "period_dialogs": period_dialogs,
            "avg_rating": round(float(avg_rating), 1) if avg_rating else 0,
            "avg_response_time": round(float(avg_response_time), 1) if avg_response_time else 0,
            "auto_response_rate": auto_response_rate,
            "total_messages": total_messages
        }
    
    def _calculate_changes(self, current: Dict[str, Any], previous: Dict[str, Any]) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        def calculate_change(current_val, previous_val):
            if previous_val == 0:
                return 100 if current_val > 0 else 0
            return round(((current_val - previous_val) / previous_val) * 100, 1)
        
        return {
            "totalMessages": calculate_change(current["period_messages"], previous["period_messages"]),
            "autoResponseRate": calculate_change(current["auto_response_rate"], previous["auto_response_rate"]),
            "avgResponseTime": calculate_change(current["avg_response_time"], previous["avg_response_time"]),
            "customerSatisfaction": calculate_change(current["avg_rating"], previous["avg_rating"])
        }
    
    def _get_trial_info(self, user: models.User, db: Session) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ"""
        is_trial_active = self._is_trial_period_active(user)
        trial_days_left = self._get_trial_days_left(user)
        trial_messages_used = self._get_trial_messages_used(user, db)
        
        return {
            "is_trial_active": is_trial_active,
            "trial_days_left": trial_days_left,
            "trial_messages_used": trial_messages_used,
            "trial_message_limit": TRIAL_MESSAGE_LIMIT,
            "trial_end_date": (user.created_at + timedelta(days=TRIAL_DURATION_DAYS)).isoformat() if is_trial_active else None
        }
    
    def _check_user_access(self, user: models.User, db: Session) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        is_blocked = self._is_user_blocked(user)
        is_trial = self._is_trial_period_active(user)
        trial_days_left = self._get_trial_days_left(user)
        trial_messages_used = self._get_trial_messages_used(user, db)
        
        return {
            "is_blocked": is_blocked,
            "is_trial_active": is_trial,
            "trial_days_left": trial_days_left,
            "trial_messages_used": trial_messages_used,
            "needs_upgrade": is_blocked or (is_trial and trial_days_left <= 1),
            "block_reason": "trial_expired" if is_blocked else None,
            "warning_message": self._get_warning_message(user, trial_days_left, trial_messages_used)
        }
    
    def _is_trial_period_active(self, user: models.User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        trial_end = user.created_at + timedelta(days=TRIAL_DURATION_DAYS)
        return datetime.utcnow() < trial_end
    
    def _get_trial_messages_used(self, user: models.User, db: Session) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ"""
        message_count = db.query(func.count(models.DialogMessage.id)).join(
            models.Dialog
        ).filter(
            models.Dialog.user_id == user.id,
            models.DialogMessage.sender == 'assistant',
            models.DialogMessage.timestamp >= user.created_at
        ).scalar() or 0
        
        return message_count
    
    def _get_trial_days_left(self, user: models.User) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ"""
        trial_end = user.created_at + timedelta(days=TRIAL_DURATION_DAYS)
        days_left = (trial_end - datetime.utcnow()).days
        return max(0, days_left)
    
    def _is_user_blocked(self, user: models.User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return not self._is_trial_period_active(user)
    
    def _get_user_message_limit(self, user: models.User) -> Optional[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self._is_trial_period_active(user):
            return TRIAL_MESSAGE_LIMIT
        else:
            return 0
    
    def _get_warning_message(self, user: models.User, days_left: int, messages_used: int) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if days_left == 0:
            return "–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        elif days_left == 1:
            return "–£ –≤–∞—Å –æ—Å—Ç–∞–ª—Å—è 1 –¥–µ–Ω—å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω."
        elif days_left <= 3:
            return f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."
        elif messages_used >= TRIAL_MESSAGE_LIMIT * 0.8:
            return f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {messages_used} –∏–∑ {TRIAL_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."
        
        return None


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
analytics_service = AnalyticsService()