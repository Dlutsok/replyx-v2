from sqlalchemy.orm import Session
from sqlalchemy import desc
from database.models import UserBalance, BalanceTransaction, ServicePrice, User
from database.schemas import BalanceTransactionRead, ServicePriceRead
from typing import List, Optional
from datetime import datetime
import logging
from integrations.email_service import email_service

logger = logging.getLogger(__name__)

class BalanceService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, db: Session):
        self.db = db
    
    def get_or_create_balance(self, user_id: int) -> UserBalance:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        balance = self.db.query(UserBalance).filter(UserBalance.user_id == user_id).first()
        if not balance:
            balance = UserBalance(user_id=user_id, balance=0.0)
            self.db.add(balance)
            self.db.commit()
            self.db.refresh(balance)
        return balance
    
    def get_balance(self, user_id: int) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        balance = self.get_or_create_balance(user_id)
        return balance.balance
    
    def top_up_balance(self, user_id: int, amount: float, description: str = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞") -> BalanceTransaction:
        """–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        balance = self.get_or_create_balance(user_id)
        balance_before = balance.balance
        balance_after = balance_before + amount
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = BalanceTransaction(
            user_id=user_id,
            amount=amount,
            transaction_type="topup",
            description=description,
            balance_before=balance_before,
            balance_after=balance_after
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        balance.balance = balance_after
        balance.total_topped_up += amount
        balance.updated_at = datetime.utcnow()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å–µ—Å—Å–∏—é
        self.db.add(balance)
        self.db.add(transaction)
        self.db.commit()
        self.db.refresh(transaction)
        self.db.refresh(balance)
        
        logger.info(f"–ü–æ–ø–æ–ª–Ω–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {amount} —Ä—É–±. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance_after}")
        return transaction
    
    def charge_for_service(self, user_id: int, service_type: str, description: Optional[str] = None, related_id: Optional[int] = None) -> BalanceTransaction:
        """–°–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ —É—Å–ª—É–≥—É"""
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —É—Å–ª—É–≥–∏
        service_price = self.db.query(ServicePrice).filter(
            ServicePrice.service_type == service_type,
            ServicePrice.is_active == True
        ).first()
        
        if not service_price:
            logger.error(f"–¶–µ–Ω–∞ –¥–ª—è —É—Å–ª—É–≥–∏ {service_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise ValueError(f"–¶–µ–Ω–∞ –¥–ª—è —É—Å–ª—É–≥–∏ {service_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        amount = service_price.price
        balance = self.get_or_create_balance(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if balance.balance < amount:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ë–∞–ª–∞–Ω—Å: {balance.balance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {amount}")
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {balance.balance} —Ä—É–±., —Ç—Ä–µ–±—É–µ—Ç—Å—è: {amount} —Ä—É–±.")
        
        balance_before = balance.balance
        balance_after = balance_before - amount
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = BalanceTransaction(
            user_id=user_id,
            amount=-amount,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
            transaction_type=service_type,
            description=description or service_price.description or f"–û–ø–ª–∞—Ç–∞ –∑–∞ {service_type}",
            balance_before=balance_before,
            balance_after=balance_after,
            related_id=related_id
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        balance.balance = balance_after
        balance.total_spent += amount
        balance.updated_at = datetime.utcnow()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å–µ—Å—Å–∏—é
        self.db.add(balance)
        self.db.add(transaction)
        self.db.commit()
        self.db.refresh(transaction)
        self.db.refresh(balance)
        
        logger.info(f"–°–ø–∏—Å–∞–Ω–æ {amount} —Ä—É–±. —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ {service_type}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance_after}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ
        self._check_and_send_balance_warnings(user_id, balance_after)
        
        return transaction
    
    def get_transactions(self, user_id: int, limit: int = 50) -> List[BalanceTransaction]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.db.query(BalanceTransaction).filter(
            BalanceTransaction.user_id == user_id
        ).order_by(desc(BalanceTransaction.created_at)).limit(limit).all()
    
    def get_service_prices(self) -> List[ServicePrice]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏"""
        return self.db.query(ServicePrice).filter(ServicePrice.is_active == True).all()
    
    def update_service_price(self, service_type: str, price: float, description: str = None) -> ServicePrice:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —É—Å–ª—É–≥–∏"""
        service_price = self.db.query(ServicePrice).filter(
            ServicePrice.service_type == service_type
        ).first()
        
        if not service_price:
            service_price = ServicePrice(
                service_type=service_type,
                price=price,
                description=description
            )
            self.db.add(service_price)
        else:
            service_price.price = price
            if description:
                service_price.description = description
            service_price.updated_at = datetime.utcnow()
            self.db.add(service_price)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–µ—Å—Å–∏—é
        
        self.db.commit()
        self.db.refresh(service_price)
        return service_price
    
    def check_sufficient_balance(self, user_id: int, service_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É—Å–ª—É–≥–∏"""
        service_price = self.db.query(ServicePrice).filter(
            ServicePrice.service_type == service_type,
            ServicePrice.is_active == True
        ).first()
        
        if not service_price:
            return False
        
        balance = self.get_balance(user_id)
        return balance >= service_price.price
    
    def give_welcome_bonus(self, user_id: int, amount: float = 100.0) -> Optional[BalanceTransaction]:
        """–ù–∞—á–∏—Å–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user = self.db.query(User).filter(User.id == user_id).first()
        if not user:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–Ω—É—Å –µ—â–µ –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª—Å—è
        if user.welcome_bonus_received:
            logger.warning(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –±—ã–ª –Ω–∞—á–∏—Å–ª–µ–Ω")
            return None
        
        try:
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
            transaction = self.top_up_balance(
                user_id=user_id,
                amount=amount,
                description=f"üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å - {amount} —Ä—É–±!"
            )
            
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω
            user.welcome_bonus_received = True
            self.db.commit()
            
            logger.info(f"–ù–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å {amount} —Ä—É–±. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return transaction
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            self.db.rollback()
            return None
    
    def _check_and_send_balance_warnings(self, user_id: int, current_balance: float):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
            user = self.db.query(User).filter(User.id == user_id).first()
            if not user or not user.email:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
            service_price = self.db.query(ServicePrice).filter(
                ServicePrice.service_type == "ai_message",
                ServicePrice.is_active == True
            ).first()
            
            if not service_price:
                logger.warning(f"Service price for ai_message not found, using default 5.0")
                price_per_message = 5.0
            else:
                price_per_message = service_price.price
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–±–∞–ª–∞–Ω—Å / —Ü–µ–Ω–∞_–∑–∞_—Å–æ–æ–±—â–µ–Ω–∏–µ)
            messages_remaining = int(current_balance / price_per_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 2 –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
            if messages_remaining == 0:
                # –ë–∞–ª–∞–Ω—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
                email_service.send_balance_depleted_email(user.email)
                logger.info(f"Balance depleted email sent to {user.email}")
            elif messages_remaining == 50:
                # –û—Å—Ç–∞–ª–æ—Å—å —Ä–æ–≤–Ω–æ 50 —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π –∞–ª–µ—Ä—Ç (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
                email_service.send_low_balance_warning_email(user.email, messages_remaining)
                logger.info(f"Low balance warning email sent to {user.email} (remaining: {messages_remaining})")
                
        except Exception as e:
            logger.error(f"Failed to send balance warning email for user {user_id}: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è

def init_default_prices(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    default_prices = [
        {"service_type": "ai_message", "price": 5.0, "description": "AI —Å–æ–æ–±—â–µ–Ω–∏–µ"},
        {"service_type": "widget_message", "price": 5.0, "description": "AI —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞"},
        {"service_type": "document_upload", "price": 5.0, "description": "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"},
        {"service_type": "bot_message", "price": 5.0, "description": "–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"},
    ]
    
    for price_data in default_prices:
        existing = db.query(ServicePrice).filter(
            ServicePrice.service_type == price_data["service_type"]
        ).first()
        
        if not existing:
            service_price = ServicePrice(**price_data)
            db.add(service_price)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ü–µ–Ω—É –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é
            existing.price = price_data["price"]
            existing.description = price_data["description"]
            existing.updated_at = datetime.utcnow()
            db.add(existing)
    
    db.commit()
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ 5.0 —Ä—É–±")