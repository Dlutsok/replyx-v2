"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ –∏ –∏—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
"""
import requests
from core.app_config import BOT_SERVICE_URL
from sqlalchemy.orm import Session
from database import SessionLocal, models
import logging
import asyncio

logger = logging.getLogger(__name__)

def reload_assistant_bots(assistant_id: int, db: Session):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º bot instances —ç—Ç–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        bot_instances = db.query(models.BotInstance).filter(
            models.BotInstance.assistant_id == assistant_id,
            models.BotInstance.is_active == True
        ).all()
        
        if not bot_instances:
            print(f"[RELOAD_ASSISTANT_BOTS] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª multi bot manager –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤
        bot_ids = [bot.id for bot in bot_instances]
        response = requests.post(
            f"{BOT_SERVICE_URL}/reload-bots", 
            json={"bot_ids": bot_ids, "assistant_id": assistant_id}, 
            timeout=1
        )
        
        if response.status_code == 200:
            print(f"[RELOAD_ASSISTANT_BOTS] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–æ—Ç—ã {bot_ids} –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}")
        else:
            print(f"[RELOAD_ASSISTANT_BOTS] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ multi bot manager: {response.status_code}")
            
    except Exception as e:
        print(f"[RELOAD_ASSISTANT_BOTS] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}: {e}")

def hot_reload_assistant_bots(assistant_id: int, db: Session):
    """–ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∏–∞–ª–æ–≥–æ–≤"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º bot instances —ç—Ç–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        bot_instances = db.query(models.BotInstance).filter(
            models.BotInstance.assistant_id == assistant_id,
            models.BotInstance.is_active == True
        ).all()
        
        if not bot_instances:
            print(f"[HOT_RELOAD_ASSISTANT_BOTS] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}")
            return
        
        bot_ids = [bot.id for bot in bot_instances]
        print(f"[HOT_RELOAD_ASSISTANT_BOTS] üî• –ù–∞—á–∏–Ω–∞–µ–º –≥–æ—Ä—è—á—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –±–æ—Ç–æ–≤ {bot_ids} –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}")
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        dialogs_count = db.query(models.Dialog).filter(
            models.Dialog.assistant_id == assistant_id
        ).count()
        
        if dialogs_count > 0:
            print(f"[HOT_RELOAD_ASSISTANT_BOTS] üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º {dialogs_count} –¥–∏–∞–ª–æ–≥–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id} (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ AI)")
        else:
            print(f"[HOT_RELOAD_ASSISTANT_BOTS] üìù –ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}")
        
        try:
            # –û—á–∏—â–∞–µ–º –∫—ç—à bot manager –¥–ª—è —ç—Ç–∏—Ö –±–æ—Ç–æ–≤
            clear_response = requests.post(
                f"{BOT_SERVICE_URL}/clear-bot-cache", 
                json={"bot_ids": bot_ids, "assistant_id": assistant_id}, 
                timeout=1
            )
            
            if clear_response.status_code == 200:
                print(f"[HOT_RELOAD_ASSISTANT_BOTS] ‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω –¥–ª—è –±–æ—Ç–æ–≤ {bot_ids}")
            else:
                print(f"[HOT_RELOAD_ASSISTANT_BOTS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {clear_response.status_code}")
                
        except Exception as cache_error:
            print(f"[HOT_RELOAD_ASSISTANT_BOTS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {cache_error}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª scalable bot manager –¥–ª—è –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        response = requests.post(
            f"{BOT_SERVICE_URL}/hot-reload-bots", 
            json={"bot_ids": bot_ids, "assistant_id": assistant_id, "force_reload": True}, 
            timeout=1
        )
        
        if response.status_code == 200:
            print(f"[HOT_RELOAD_ASSISTANT_BOTS] üî• –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –±–æ—Ç–∞–º {bot_ids} –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}")
        else:
            print(f"[HOT_RELOAD_ASSISTANT_BOTS] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ scalable bot manager: {response.status_code}")
            # Fallback –∫ –æ–±—ã—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            print(f"[HOT_RELOAD_ASSISTANT_BOTS] Fallback –∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ")
            
            # üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –µ—Å–ª–∏ hot reload –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
            for bot_id in bot_ids:
                try:
                    force_response = requests.post(
                        f"{BOT_SERVICE_URL}/force-restart-bot", 
                        json={"bot_id": bot_id, "reason": "knowledge_update"}, 
                        timeout=2
                    )
                    
                    if force_response.status_code == 200:
                        print(f"[HOT_RELOAD_ASSISTANT_BOTS] ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ {bot_id}")
                    else:
                        print(f"[HOT_RELOAD_ASSISTANT_BOTS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ {bot_id}")
                        
                except Exception as force_error:
                    logger.error(f"[HOT_RELOAD_ASSISTANT_BOTS] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞ {bot_id}: {force_error}")
            
    except Exception as e:
        logger.error(f"[HOT_RELOAD_ASSISTANT_BOTS] –û—à–∏–±–∫–∞ –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}: {e}")
        # Fallback –∫ –æ–±—ã—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        logger.info(f"[HOT_RELOAD_ASSISTANT_BOTS] Fallback –∫ –æ–±—ã—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ")
        reload_assistant_bots(assistant_id, db)

def reload_specific_bot(bot_id: int, db: Session):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–æ—Ç –ø–æ ID"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
        bot_instance = db.query(models.BotInstance).filter(
            models.BotInstance.id == bot_id,
            models.BotInstance.is_active == True
        ).first()
        
        if not bot_instance:
            print(f"[RELOAD_SPECIFIC_BOT] –ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª multi bot manager –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
        response = requests.post(
            f"{BOT_SERVICE_URL}/reload-bots", 
            json={"bot_ids": [bot_id]}, 
            timeout=1
        )
        
        if response.status_code == 200:
            print(f"[RELOAD_SPECIFIC_BOT] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –±–æ—Ç {bot_id}")
        else:
            print(f"[RELOAD_SPECIFIC_BOT] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ multi bot manager: {response.status_code}")
            
    except Exception as e:
        print(f"[RELOAD_SPECIFIC_BOT] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ {bot_id}: {e}")


async def send_operator_message_to_telegram(telegram_chat_id: str, text: str, operator_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram —á–∞—Ç —á–µ—Ä–µ–∑ bot manager"""
    try:
        logger.info(f"üîÑ [BOT_MANAGER] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram. Chat ID: {telegram_chat_id}, –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator_name}")
        logger.info(f"üîÑ [BOT_MANAGER] BOT_SERVICE_URL: {BOT_SERVICE_URL}")
        logger.info(f"üîÑ [BOT_MANAGER] –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {text[:100]}...")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        formatted_message = f"üë§ {operator_name}: {text}"
        logger.info(f"üîÑ [BOT_MANAGER] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {formatted_message[:100]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É bot manager'—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info(f"üîÑ [BOT_MANAGER] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ {BOT_SERVICE_URL}/send-operator-message")
        response = requests.post(
            f"{BOT_SERVICE_URL}/send-operator-message",
            json={
                "telegram_chat_id": telegram_chat_id,
                "text": formatted_message,
                "operator_name": operator_name
            },
            timeout=5  # –ë—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç - –µ—Å–ª–∏ bot service –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        )
        
        logger.info(f"üîÑ [BOT_MANAGER] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç bot service: HTTP {response.status_code}")
        
        if response.status_code == 200:
            logger.info(f"‚úÖ [BOT_MANAGER] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {operator_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram —á–∞—Ç {telegram_chat_id}")
            try:
                response_data = response.json()
                logger.info(f"‚úÖ [BOT_MANAGER] –û—Ç–≤–µ—Ç –æ—Ç bot service: {response_data}")
            except:
                logger.info(f"‚úÖ [BOT_MANAGER] –û—Ç–≤–µ—Ç –æ—Ç bot service (—Ç–µ–∫—Å—Ç): {response.text}")
        else:
            logger.error(f"‚ùå [BOT_MANAGER] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram: HTTP {response.status_code}")
            logger.error(f"‚ùå [BOT_MANAGER] –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ dialogs.py
            raise Exception(f"HTTP {response.status_code}: {response.text}")
            
    except requests.exceptions.Timeout:
        error_msg = f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram —á–∞—Ç {telegram_chat_id} (–ø—Ä–µ–≤—ã—à–µ–Ω–æ 5 —Å–µ–∫—É–Ω–¥)"
        logger.warning(f"‚ö†Ô∏è [BOT_MANAGER] {error_msg} - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î, –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞")
        # –ù–ï raise Exception - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ, handoff —Ä–∞–±–æ—Ç–∞–µ—Ç
    except requests.exceptions.ConnectionError:
        error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å bot service ({BOT_SERVICE_URL})"
        logger.warning(f"‚ö†Ô∏è [BOT_MANAGER] {error_msg} - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î, bot service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        # –ù–ï raise Exception - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, handoff —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Telegram –¥–æ—Å—Ç–∞–≤–∫–∏
    except Exception as e:
        logger.error(f"‚ùå [BOT_MANAGER] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram: {e}")
        logger.exception("‚ùå [BOT_MANAGER] –î–µ—Ç–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:")
        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ dialogs.py

def reload_user_assistant_bots(user_id: int, assistant_id: int, db: Session):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –±–æ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º bot instances —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        bot_instances = db.query(models.BotInstance).join(models.Assistant).filter(
            models.Assistant.user_id == user_id,
            models.BotInstance.assistant_id == assistant_id,
            models.BotInstance.is_active == True
        ).all()
        
        if not bot_instances:
            print(f"[RELOAD_USER_ASSISTANT_BOTS] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª multi bot manager –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –±–æ—Ç–æ–≤
        bot_ids = [bot.id for bot in bot_instances]
        response = requests.post(
            f"{BOT_SERVICE_URL}/reload-bots", 
            json={"bot_ids": bot_ids, "user_id": user_id, "assistant_id": assistant_id}, 
            timeout=1
        )
        
        if response.status_code == 200:
            print(f"[RELOAD_USER_ASSISTANT_BOTS] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–æ—Ç—ã {bot_ids} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}")
        else:
            print(f"[RELOAD_USER_ASSISTANT_BOTS] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ multi bot manager: {response.status_code}")
            
    except Exception as e:
        print(f"[RELOAD_USER_ASSISTANT_BOTS] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}: {e}")

def stop_user_bots(user_id: int):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from database.connection import get_db
        
        with get_db() as db:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot_instances = db.query(models.BotInstance).join(models.Assistant).filter(
                models.Assistant.user_id == user_id,
                models.BotInstance.is_active == True
            ).all()
            
            if bot_instances:
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –≤ –ë–î
                for bot in bot_instances:
                    bot.is_active = False
                db.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª multi bot manager –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤
                bot_ids = [bot.id for bot in bot_instances]
                response = requests.post(
                    f"{BOT_SERVICE_URL}/stop-bots", 
                    json={"bot_ids": bot_ids, "reason": "trial_expired"}, 
                    timeout=2
                )
                
                print(f"[STOP_USER_BOTS] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –±–æ—Ç—ã {bot_ids} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω)")
                
    except Exception as e:
        print(f"[STOP_USER_BOTS] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def send_system_message_to_bot(message_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –±–æ—Ç–∞"""
    try:
        logger.info(f"Sending system message to Telegram: {message_data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ multi bot manager
        response = requests.post(
            f"{BOT_SERVICE_URL}/send-system-message", 
            json=message_data, 
            timeout=5
        )
        
        if response.status_code == 200:
            logger.info(f"System message sent successfully to Telegram for dialog {message_data.get('dialog_id')}")
        else:
            logger.error(f"Failed to send system message: HTTP {response.status_code}")
            
    except Exception as e:
        logger.error(f"Error sending system message to bot manager: {e}")