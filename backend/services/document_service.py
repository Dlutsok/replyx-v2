"""
üìÑ –°–ï–†–í–ò–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò

–í—ã–¥–µ–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –∏–∑ main.py –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π.
–ß–∞—Å—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ main.py.
"""

import os
import logging
from typing import List, Optional, Dict, Any, Tuple
from sqlalchemy.orm import Session
from fastapi import HTTPException, UploadFile
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
from database import models, crud
from cache.redis_cache import cache
from validators.file_validator import file_validator

logger = logging.getLogger(__name__)


class DocumentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç –∫—ç—à –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    
    def get_user_documents(
        self, 
        db: Session, 
        user_id: int, 
        page: int = 1, 
        limit: int = 50
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_result = cache.get("user_documents", user_id=user_id, page=page, limit=limit)
        
        if cached_result:
            logger.debug(f"üöÄ CACHE HIT: Documents –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return cached_result
        
        logger.debug(f"üîç CACHE MISS: –ó–∞–≥—Ä—É–∂–∞–µ–º documents –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        total = db.query(models.Document).filter(models.Document.user_id == user_id).count()
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        offset = (page - 1) * limit
        documents = db.query(models.Document).filter(
            models.Document.user_id == user_id
        ).order_by(models.Document.uploaded_at.desc()).offset(offset).limit(limit).all()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "items": [self._document_to_dict(doc) for doc in documents],
            "total": total,
            "page": page,
            "pages": (total + limit - 1) // limit,
            "limit": limit
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        cache.set("user_documents", result, self.cache_ttl, user_id=user_id, page=page, limit=limit)
        
        return result
    
    async def upload_document(
        self, 
        db: Session, 
        user_id: int, 
        file: UploadFile
    ) -> models.Document:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = await file.read()
        await file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å –Ω–æ–≤—ã–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
        try:
            mime_type, safe_filename = await file_validator.validate_file_content(file, content)
        except HTTPException as e:
            logger.warning(f"File upload rejected for user {user_id}: {e.detail}")
            raise e
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        secure_filename = file_validator.generate_secure_filename(
            user_id=user_id,
            original_filename=safe_filename,
            content=content
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_path = file_validator.get_safe_upload_path(user_id, secure_filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        try:
            with open(file_path, "wb") as f:
                f.write(content)
            
            logger.info(f"File uploaded successfully: {file_path} by user {user_id}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
            doc = crud.create_document(db, user_id, secure_filename, len(content))
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self._invalidate_user_cache(user_id)
            
            return doc
            
        except Exception as e:
            logger.error(f"Error saving file {file_path}: {e}")
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –Ω–µ —É–¥–∞–ª–æ—Å—å
            if os.path.exists(file_path):
                os.remove(file_path)
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
    
    def delete_document(self, db: Session, user_id: int, doc_id: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        from database.utils.transaction_manager import db_transaction
        
        with db_transaction(db) as session:
            doc = session.query(models.Document).filter(
                models.Document.id == doc_id, 
                models.Document.user_id == user_id
            ).first()
            
            if not doc:
                raise HTTPException(status_code=404, detail="Document not found")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            filename_to_delete = doc.filename
            
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è
            session.query(models.UserKnowledge).filter(
                models.UserKnowledge.doc_id == doc_id
            ).delete(synchronize_session=False)
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º –¥–æ–∫—É–º–µ–Ω—Ç
            session.delete(doc)
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        self._delete_file_from_disk(user_id, filename_to_delete)
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._invalidate_user_cache(user_id)
        
        logger.info(f"Document {doc_id} deleted by user {user_id}")
        return True
    
    def get_document_text(self, db: Session, user_id: int, doc_id: int) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        doc = db.query(models.Document).filter(
            models.Document.id == doc_id, 
            models.Document.user_id == user_id
        ).first()
        
        if not doc:
            raise HTTPException(status_code=404, detail="Document not found")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        user = db.query(models.User).filter(models.User.id == user_id).first()
        if not user:
            raise HTTPException(status_code=404, detail="User not found")
        
        safe_email = self._get_safe_email(user.email)
        file_path = os.path.join("uploads", safe_email, doc.filename)
        
        if not os.path.exists(file_path):
            raise HTTPException(status_code=404, detail="File not found")
        
        return self._extract_text_from_file(file_path)
    
    def get_document_stats(self, db: Session, user_id: int) -> Dict[str, Any]:
        """
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        total_docs = db.query(models.Document).filter(
            models.Document.user_id == user_id
        ).count()
        
        total_size = db.query(
            db.func.sum(models.Document.file_size)
        ).filter(
            models.Document.user_id == user_id
        ).scalar() or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
        from sqlalchemy import func
        file_types = db.query(
            func.regexp_replace(models.Document.filename, r'.*\.', '').label('extension'),
            func.count().label('count')
        ).filter(
            models.Document.user_id == user_id
        ).group_by('extension').all()
        
        return {
            "total_documents": total_docs,
            "total_size_bytes": total_size,
            "total_size_mb": round(total_size / (1024 * 1024), 2),
            "file_types": [{"extension": ext, "count": count} for ext, count in file_types],
            "upload_limit_mb": 10,  # –õ–∏–º–∏—Ç –∏–∑ file_validator
            "max_documents": 100    # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–≤–∏—Å–∏–º—ã–º –æ—Ç –ø–ª–∞–Ω–∞
        }
    
    def _document_to_dict(self, doc: models.Document) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "id": doc.id,
            "filename": doc.filename,
            "file_size": doc.file_size,
            "uploaded_at": doc.uploaded_at.isoformat() if doc.uploaded_at else None,
            "file_size_mb": round(doc.file_size / (1024 * 1024), 2)
        }
    
    def _invalidate_user_cache(self, user_id: int):
        """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cache.delete_pattern(f"user_documents:*user_id={user_id}*")
        logger.debug(f"üóëÔ∏è –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∫—ç—à –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def _delete_file_from_disk(self, user_id: int, filename: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∏—Å–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è email
            db = Session()  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
            user = db.query(models.User).filter(models.User.id == user_id).first()
            db.close()
            
            if user:
                safe_email = self._get_safe_email(user.email)
                file_path = os.path.join("uploads", safe_email, filename)
                if os.path.exists(file_path):
                    os.remove(file_path)
                    logger.info(f"File deleted from disk: {file_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
    
    def _get_safe_email(self, email: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ email"""
        import re
        return re.sub(r'[^a-zA-Z0-9_.@-]', '_', email)
    
    def _extract_text_from_file(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        file_extension = os.path.splitext(file_path)[1].lower()
        text = ""
        
        if file_extension == '.pdf':
            try:
                import PyPDF2
                with open(file_path, 'rb') as pdf_file:
                    pdf_reader = PyPDF2.PdfReader(pdf_file)
                    for page_num in range(len(pdf_reader.pages)):
                        text += pdf_reader.pages[page_num].extract_text() + "\n"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: {e}")
                raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: {e}")
                
        elif file_extension == '.docx':
            try:
                from docx import Document as DocxDocument
                docx = DocxDocument(file_path)
                text = '\n'.join([p.text for p in docx.paragraphs])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .docx: {e}")
                raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .docx: {e}")
                
        elif file_extension == '.doc':
            try:
                # –î–ª—è .doc —Ñ–∞–π–ª–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å textract –∏–ª–∏ –¥—Ä—É–≥–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
                # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ–µ —á—Ç–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                    text = f.read()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .doc: {e}")
                raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .doc: {e}")
        else:
            # –î–ª—è .txt –∏ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                    text = f.read()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        
        return text


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
document_service = DocumentService()