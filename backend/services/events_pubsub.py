"""
Redis Pub/Sub –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ–∞–ª-—Ç–∞–π–º —Å–æ–±—ã—Ç–∏–π –º–µ–∂–¥—É backend –∏ ws-gateway
"""
import os
import asyncio
import json
import logging
from typing import Callable, Awaitable, Optional, Dict, Any
import redis.asyncio as redis
from datetime import datetime

logger = logging.getLogger(__name__)

class EventsPubSub:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä Redis Pub/Sub –¥–ª—è —Ä–µ–∞–ª-—Ç–∞–π–º —Å–æ–±—ã—Ç–∏–π"""
    
    def __init__(self, redis_url: str = None):
        self.redis_url = redis_url or os.getenv("REDIS_URL", "redis://localhost:6379/0")
        self.redis_client: Optional[redis.Redis] = None
        self.pubsub: Optional[redis.client.PubSub] = None
        self._subscriber_task: Optional[asyncio.Task] = None
        self._is_running = False
        
    async def _get_client(self) -> redis.Redis:
        """–ü–æ–ª—É—á–∞–µ—Ç Redis –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not self.redis_client:
            try:
                self.redis_client = redis.from_url(
                    self.redis_url,
                    decode_responses=True,
                    retry_on_timeout=True,
                    health_check_interval=30
                )
                await self.redis_client.ping()
                logger.info("‚úÖ Events Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Events Redis: {e}")
                raise
        return self.redis_client
    
    async def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis"""
        try:
            client = await self._get_client()
            await client.ping()
            return True
        except Exception as e:
            logger.debug(f"Events Redis not available: {e}")
            return False
    
    def _make_channel(self, dialog_id: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∏–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞"""
        return f"ws:dialog:{dialog_id}"
    
    async def publish_dialog_event(self, dialog_id: int, event: Dict[str, Any]) -> bool:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ Redis Pub/Sub
        
        Args:
            dialog_id: ID –¥–∏–∞–ª–æ–≥–∞
            event: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
        """
        try:
            client = await self._get_client()
            channel = self._make_channel(dialog_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            enriched_event = {
                **event,
                "timestamp": datetime.utcnow().isoformat(),
                "dialog_id": dialog_id,
                "source": "backend"
            }
            
            payload = json.dumps(enriched_event, ensure_ascii=False)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            subscribers_count = await client.publish(channel, payload)
            
            logger.info(f"üì¢ Published event {event.get('type', 'unknown')} to dialog {dialog_id} "
                       f"({subscribers_count} subscribers)")
            logger.debug(f"Event payload: {payload}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to publish dialog event: {e}", exc_info=True)
            return False
    
    async def start_ws_bridge_subscriber(self, 
                                       on_event: Callable[[Dict[str, Any]], Awaitable[None]]) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è WebSocket –º–æ—Å—Ç
        
        Args:
            on_event: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        """
        if self._is_running:
            logger.warning("WS Bridge subscriber —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self._is_running = True
        
        try:
            client = await self._get_client()
            self.pubsub = client.pubsub()
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã ws:dialog:*
            await self.pubsub.psubscribe("ws:dialog:*")
            logger.info("üîî WS-BRIDGE subscriber –∑–∞–ø—É—â–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ws:dialog:*")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            self._subscriber_task = asyncio.create_task(
                self._subscriber_loop(on_event)
            )
            
            await self._subscriber_task
            
        except asyncio.CancelledError:
            logger.info("WS-BRIDGE subscriber –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            raise
        except Exception as e:
            logger.error(f"‚ùå WS-BRIDGE subscriber error: {e}", exc_info=True)
        finally:
            self._is_running = False
            if self.pubsub:
                await self.pubsub.unsubscribe()
                await self.pubsub.aclose()
                self.pubsub = None
    
    async def _subscriber_loop(self, on_event: Callable[[Dict[str, Any]], Awaitable[None]]) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        if not self.pubsub:
            raise RuntimeError("PubSub –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        async for message in self.pubsub.listen():
            try:
                if message['type'] == 'pmessage':
                    channel = message['channel']
                    data = message['data']
                    
                    if not data:
                        continue
                        
                    # –ü–∞—Ä—Å–∏–º JSON payload
                    try:
                        event = json.loads(data)
                    except json.JSONDecodeError as e:
                        logger.error(f"Invalid JSON in channel {channel}: {e}")
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º dialog_id –∏–∑ –∫–∞–Ω–∞–ª–∞ ws:dialog:123
                    try:
                        dialog_id = int(channel.split(':')[-1])
                        event['dialog_id'] = dialog_id
                    except (ValueError, IndexError):
                        logger.error(f"Cannot extract dialog_id from channel: {channel}")
                        continue
                    
                    logger.debug(f"üîî WS-BRIDGE received: {event.get('type', 'unknown')} "
                                f"dialog={dialog_id} from channel={channel}")
                    
                    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
                    try:
                        await on_event(event)
                    except Exception as e:
                        logger.error(f"Event handler failed: {e}", exc_info=True)
                        
            except Exception as e:
                logger.error(f"Subscriber loop error: {e}", exc_info=True)
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å
    
    async def stop_subscriber(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫"""
        if self._subscriber_task and not self._subscriber_task.done():
            self._subscriber_task.cancel()
            try:
                await self._subscriber_task
            except asyncio.CancelledError:
                pass
        
        if self.pubsub:
            await self.pubsub.unsubscribe()
            await self.pubsub.aclose()
            self.pubsub = None
        
        self._is_running = False
        logger.info("WS-BRIDGE subscriber –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def get_subscriber_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –¥–ª—è health check"""
        return {
            "subscriber": "running" if self._is_running else "stopped",
            "redis": "ok" if await self.is_available() else "error",
            "channels": ["ws:dialog:*"] if self._is_running else []
        }
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        await self.stop_subscriber()
        
        if self.redis_client:
            await self.redis_client.aclose()
            self.redis_client = None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
_events_pubsub: Optional[EventsPubSub] = None

def get_events_pubsub() -> EventsPubSub:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä EventsPubSub"""
    global _events_pubsub
    if not _events_pubsub:
        _events_pubsub = EventsPubSub()
    return _events_pubsub

async def publish_dialog_event(dialog_id: int, event: Dict[str, Any]) -> bool:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    pubsub = get_events_pubsub()
    return await pubsub.publish_dialog_event(dialog_id, event)

async def start_ws_bridge_subscriber(on_event: Callable[[Dict[str, Any]], Awaitable[None]]) -> None:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ WS –º–æ—Å—Ç–∞"""
    pubsub = get_events_pubsub()
    await pubsub.start_ws_bridge_subscriber(on_event)

async def get_subscriber_status() -> Dict[str, Any]:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
    pubsub = get_events_pubsub()
    return await pubsub.get_subscriber_status()
