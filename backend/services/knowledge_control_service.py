"""
üõ°Ô∏è –°–õ–£–ñ–ë–ê –ö–û–ù–¢–†–û–õ–Ø –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∏–ª–∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –±–æ—Ç–æ–≤. –í–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–µ—Ä—Å–∏–π –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
"""

import re
import json
import hashlib
from datetime import datetime
from typing import List, Dict, Optional, Tuple
from sqlalchemy.orm import Session
from database import models
from cache.redis_cache import chatai_cache
import logging

logger = logging.getLogger(__name__)

class KnowledgeControlService:
    """–°–ª—É–∂–±–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    
    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    FORBIDDEN_PATTERNS = [
        r'[–ê–∞Aa]–ª—å—Ñ–∞[–°—ÅSs]—Ñ–µ—Ä–∞',
        r'–ê–ª—å—Ñ–∞–°—Ñ–µ—Ä–∞',
        r'AlfaSfera',
        r'–ê–õ–§–ê–°–§–ï–†–ê',
        r'–∞–ª—å—Ñ–∞—Å—Ñ–µ—Ä–∞',
        r'Alfa[Ss]fera'
    ]
    
    # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    SUSPICIOUS_KEYWORDS = [
        '–û–û–û "–ê–ª—å—Ñ–∞–°—Ñ–µ—Ä–∞"',
        '–∫–æ–º–ø–∞–Ω–∏—è –ê–ª—å—Ñ–∞–°—Ñ–µ—Ä–∞',
        '–ê–ª—å—Ñ–∞–°—Ñ–µ—Ä–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞',
        '—É—Å–ª—É–≥–∏ –ê–ª—å—Ñ–∞–°—Ñ–µ—Ä–∞'
    ]
    
    def __init__(self, db: Session):
        self.db = db
    
    def validate_content(self, content: str, assistant_id: int, user_id: int) -> Dict:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        result = {
            'is_valid': True,
            'errors': [],
            'warnings': [],
            'content_hash': None,
            'version': 1
        }
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        forbidden_found = []
        for pattern in self.FORBIDDEN_PATTERNS:
            if re.search(pattern, content, re.IGNORECASE):
                forbidden_found.append(pattern)
        
        if forbidden_found:
            result['is_valid'] = False
            result['errors'].append({
                'type': 'FORBIDDEN_CONTENT',
                'message': f'–ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {forbidden_found}',
                'patterns': forbidden_found
            })
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        suspicious_found = []
        for keyword in self.SUSPICIOUS_KEYWORDS:
            if keyword.lower() in content.lower():
                suspicious_found.append(keyword)
        
        if suspicious_found:
            result['warnings'].append({
                'type': 'SUSPICIOUS_CONTENT', 
                'message': f'–ù–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {suspicious_found}',
                'keywords': suspicious_found
            })
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π
        result['content_hash'] = hashlib.sha256(content.encode()).hexdigest()
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        existing = self.check_duplicate_content(result['content_hash'], assistant_id, user_id)
        if existing:
            result['warnings'].append({
                'type': 'DUPLICATE_CONTENT',
                'message': f'–ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing})',
                'existing_id': existing
            })
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if len(content) > 50000:  # 50KB –ª–∏–º–∏—Ç
            result['warnings'].append({
                'type': 'LARGE_CONTENT',
                'message': f'–ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)',
                'size': len(content)
            })
        
        return result
    
    def check_duplicate_content(self, content_hash: str, assistant_id: int, user_id: int) -> Optional[int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            existing = self.db.query(models.UserKnowledge).filter(
                models.UserKnowledge.user_id == user_id,
                models.UserKnowledge.assistant_id == assistant_id,
                models.UserKnowledge.content.op('~')(f'#{content_hash}#')  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ö—ç—à—É
            ).first()
            
            return existing.id if existing else None
        except:
            return None
    
    def add_knowledge_with_validation(
        self, 
        user_id: int, 
        assistant_id: int, 
        content: str,
        doc_type: str = 'manual',
        importance: int = 10
    ) -> Dict:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        validation = self.validate_content(content, assistant_id, user_id)
        
        if not validation['is_valid']:
            logger.warning(f"–û—Ç–∫–ª–æ–Ω–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è assistant_id={assistant_id}: {validation['errors']}")
            return {
                'success': False,
                'validation': validation,
                'message': '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é'
            }
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content_with_meta = f"""
# –ú–ï–¢–ê–î–ê–ù–ù–´–ï –í–ê–õ–ò–î–ê–¶–ò–ò
# –•—ç—à: {validation['content_hash']}
# –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {datetime.now().isoformat()}
# –í–µ—Ä—Å–∏—è: {validation['version']}
# –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏: APPROVED

{content}
"""
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            knowledge = models.UserKnowledge(
                user_id=user_id,
                assistant_id=assistant_id,
                doc_id=None,  # –î–ª—è —Ä—É—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                content=content_with_meta,
                type='summary',
                doc_type=doc_type,
                importance=importance,
                created_at=datetime.now(),
                updated_at=datetime.now()
            )
            
            self.db.add(knowledge)
            self.db.commit()
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏
            chatai_cache.invalidate_knowledge_cache(user_id, assistant_id)
            chatai_cache.invalidate_assistant_cache(assistant_id)
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –∑–Ω–∞–Ω–∏—è –¥–ª—è assistant_id={assistant_id}, knowledge_id={knowledge.id}")
            
            return {
                'success': True,
                'knowledge_id': knowledge.id,
                'validation': validation,
                'message': '–ó–Ω–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã'
            }
            
        except Exception as e:
            self.db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞–Ω–∏–π'
            }
    
    def update_knowledge_with_validation(
        self, 
        knowledge_id: int, 
        new_content: str, 
        user_id: int
    ) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        existing = self.db.query(models.UserKnowledge).filter(
            models.UserKnowledge.id == knowledge_id,
            models.UserKnowledge.user_id == user_id
        ).first()
        
        if not existing:
            return {
                'success': False,
                'message': '–ó–∞–ø–∏—Å—å –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        validation = self.validate_content(new_content, existing.assistant_id, user_id)
        
        if not validation['is_valid']:
            logger.warning(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ knowledge_id={knowledge_id}: {validation['errors']}")
            return {
                'success': False,
                'validation': validation,
                'message': '–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é'
            }
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            version = self.get_next_version(existing.content)
            content_with_meta = f"""
# –ú–ï–¢–ê–î–ê–ù–ù–´–ï –í–ê–õ–ò–î–ê–¶–ò–ò
# –•—ç—à: {validation['content_hash']}
# –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().isoformat()}
# –í–µ—Ä—Å–∏—è: {version}
# –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏: APPROVED
# –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞

{new_content}
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –≤ –∞—Ä—Ö–∏–≤ (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É)
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å–∏—è {version-1} –¥–ª—è knowledge_id={knowledge_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            existing.content = content_with_meta
            existing.updated_at = datetime.now()
            
            self.db.commit()
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏
            chatai_cache.invalidate_knowledge_cache(user_id, existing.assistant_id)
            chatai_cache.invalidate_assistant_cache(existing.assistant_id)
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–Ω–∞–Ω–∏—è knowledge_id={knowledge_id}, –≤–µ—Ä—Å–∏—è {version}")
            
            return {
                'success': True,
                'knowledge_id': knowledge_id,
                'version': version,
                'validation': validation,
                'message': f'–ó–Ω–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –≤–µ—Ä—Å–∏–∏ {version}'
            }
            
        except Exception as e:
            self.db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞–Ω–∏–π'
            }
    
    def get_next_version(self, current_content: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–∏"""
        version_match = re.search(r'# –í–µ—Ä—Å–∏—è: (\d+)', current_content)
        if version_match:
            return int(version_match.group(1)) + 1
        return 2  # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–∏ –Ω–µ—Ç, —ç—Ç–æ –±—É–¥–µ—Ç –≤–µ—Ä—Å–∏—è 2
    
    def scan_existing_knowledge(self, user_id: int = None) -> Dict:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞–Ω–∏–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π"""
        
        result = {
            'total_scanned': 0,
            'violations_found': 0,
            'violations': []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        query = self.db.query(models.UserKnowledge)
        if user_id:
            query = query.filter(models.UserKnowledge.user_id == user_id)
        
        knowledge_records = query.all()
        result['total_scanned'] = len(knowledge_records)
        
        for knowledge in knowledge_records:
            validation = self.validate_content(knowledge.content, knowledge.assistant_id, knowledge.user_id)
            
            if not validation['is_valid'] or validation['warnings']:
                result['violations_found'] += 1
                result['violations'].append({
                    'knowledge_id': knowledge.id,
                    'user_id': knowledge.user_id,
                    'assistant_id': knowledge.assistant_id,
                    'doc_type': knowledge.doc_type,
                    'created_at': knowledge.created_at.isoformat(),
                    'validation': validation
                })
        
        return result
    
    def cleanup_violations(self, violations: List[Dict], create_backup: bool = True) -> Dict:
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        
        result = {
            'cleaned_count': 0,
            'backup_created': False,
            'errors': []
        }
        
        if create_backup:
            backup_data = []
            for violation in violations:
                knowledge = self.db.query(models.UserKnowledge).filter(
                    models.UserKnowledge.id == violation['knowledge_id']
                ).first()
                
                if knowledge:
                    backup_data.append({
                        'id': knowledge.id,
                        'user_id': knowledge.user_id,
                        'assistant_id': knowledge.assistant_id,
                        'content': knowledge.content,
                        'type': knowledge.type,
                        'doc_type': knowledge.doc_type,
                        'importance': knowledge.importance,
                        'created_at': knowledge.created_at.isoformat(),
                        'updated_at': knowledge.updated_at.isoformat()
                    })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_filename = f"knowledge_violations_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            try:
                with open(f"./backups/{backup_filename}", 'w', encoding='utf-8') as f:
                    json.dump(backup_data, f, ensure_ascii=False, indent=2)
                result['backup_created'] = True
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_filename}")
            except Exception as e:
                result['errors'].append(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        
        # –£–¥–∞–ª—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è
        for violation in violations:
            try:
                knowledge = self.db.query(models.UserKnowledge).filter(
                    models.UserKnowledge.id == violation['knowledge_id']
                ).first()
                
                if knowledge:
                    # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                    chatai_cache.invalidate_knowledge_cache(knowledge.user_id, knowledge.assistant_id)
                    chatai_cache.invalidate_assistant_cache(knowledge.assistant_id)
                    
                    self.db.delete(knowledge)
                    result['cleaned_count'] += 1
                    
            except Exception as e:
                result['errors'].append(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è knowledge_id={violation['knowledge_id']}: {e}")
        
        try:
            self.db.commit()
            logger.info(f"–û—á–∏—â–µ–Ω–æ {result['cleaned_count']} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
        except Exception as e:
            self.db.rollback()
            result['errors'].append(f"–û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞: {e}")
        
        return result


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API

def validate_knowledge_upload(content: str, assistant_id: int, user_id: int, db: Session) -> Dict:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ API"""
    service = KnowledgeControlService(db)
    return service.validate_content(content, assistant_id, user_id)

def add_knowledge_safely(
    user_id: int, 
    assistant_id: int, 
    content: str, 
    doc_type: str,
    db: Session
) -> Dict:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π"""
    service = KnowledgeControlService(db)
    return service.add_knowledge_with_validation(user_id, assistant_id, content, doc_type)

def scan_and_report_violations(user_id: int = None, db: Session = None) -> Dict:
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö"""
    service = KnowledgeControlService(db)
    return service.scan_existing_knowledge(user_id)