"""
SSE Manager –¥–ª—è ReplyX - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Server-Sent Events —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –∏ Redis Streams
"""
import asyncio
import json
import logging
import time
from typing import Dict, List, Optional, AsyncGenerator, Set
from dataclasses import dataclass
from contextlib import asynccontextmanager

from fastapi import HTTPException
from fastapi.responses import StreamingResponse
import redis.asyncio as aioredis

import os
import jwt

# Local auth helpers (migrated from websocket_manager)
def _is_domain_allowed_by_token(origin: str, token: str, parent_origin: str = None) -> bool:
    """Check if domain is allowed by token"""
    try:
        from core.app_config import SITE_SECRET
        payload = jwt.decode(token, SITE_SECRET, algorithms=['HS256'], options={"verify_exp": False})
        allowed_domains = payload.get('allowed_domains', '')
        
        # Simple domain check
        if origin and parent_origin:
            parent_domain = _normalize_host_from_origin(parent_origin)
            return parent_domain in allowed_domains
        elif origin:
            domain = _normalize_host_from_origin(origin) 
            return domain in allowed_domains
            
        return False
    except Exception:
        return False

def _normalize_host_from_origin(origin: str) -> str:
    """Normalize host from origin URL"""
    if not origin:
        return ""
    try:
        from urllib.parse import urlparse
        parsed = urlparse(origin)
        host = parsed.hostname or parsed.netloc.split(':')[0]
        return host.lower().replace('www.', '')
    except Exception:
        return origin.replace('https://', '').replace('http://', '').replace('www.', '').split('/')[0]

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
sse_connections: Dict[int, Set] = {}  # dialog_id -> set of SSE client IDs
sse_clients: Dict[str, 'SSEClient'] = {}  # client_id -> SSE client info
sse_stats = {
    'active_connections': 0,
    'total_connections': 0,
    'heartbeats_sent': 0,
    'events_sent': 0,
    'redis_errors': 0
}

@dataclass
class SSEClient:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SSE –∫–ª–∏–µ–Ω—Ç–µ"""
    client_id: str
    dialog_id: int
    connected_at: float
    last_event_id: Optional[str] = None
    origin: Optional[str] = None
    user_agent: Optional[str] = None
    auth_type: str = 'unknown'  # 'site', 'widget', 'admin'

class SSEManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Redis Streams"""
    
    def __init__(self):
        self.redis = None
        self.pubsub_task = None
        self.heartbeat_task = None
        self.cleanup_task = None
        # –û—á–µ—Ä–µ–¥–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
        self.client_queues: Dict[str, asyncio.Queue] = {}
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ background –∑–∞–¥–∞—á"""
        try:
            redis_url = os.getenv("REDIS_URL", "redis://localhost:6379/0")
            self.redis = aioredis.from_url(redis_url, decode_responses=True)
            await self.redis.ping()
            logger.info("‚úÖ [SSE Manager] Redis connection established")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º background –∑–∞–¥–∞—á–∏
            self.pubsub_task = asyncio.create_task(self._pubsub_worker())
            self.heartbeat_task = asyncio.create_task(self._heartbeat_worker())
            self.cleanup_task = asyncio.create_task(self._cleanup_worker())
            
            logger.info("‚úÖ [SSE Manager] Background tasks started")
            
        except Exception as e:
            logger.error(f"‚ùå [SSE Manager] Failed to initialize: {e}")
            raise
    
    async def shutdown(self):
        """Graceful shutdown"""
        logger.info("üîÑ [SSE Manager] Shutting down...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º background –∑–∞–¥–∞—á–∏
        for task in [self.pubsub_task, self.heartbeat_task, self.cleanup_task]:
            if task and not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if self.redis:
            await self.redis.close()
        
        logger.info("‚úÖ [SSE Manager] Shutdown complete")
    
    async def add_event_to_stream(self, dialog_id: int, event_data: dict):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Redis Stream –¥–ª—è SSE –∫–ª–∏–µ–Ω—Ç–æ–≤
        –≠—Ç–æ –¥–æ–ø–æ–ª–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Pub/Sub –º–µ—Ö–∞–Ω–∏–∑–º
        """
        try:
            stream_key = f"sse:dialog:{dialog_id}"
            event_id = await self.redis.xadd(
                stream_key,
                {"data": json.dumps(event_data)},
                maxlen=1000  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–æ–±—ã—Ç–∏–π
            )
            
            logger.debug(f"üìù [SSE Manager] Added event to stream {stream_key}: {event_id}")
            return event_id
            
        except Exception as e:
            logger.error(f"‚ùå [SSE Manager] Failed to add event to stream: {e}")
            sse_stats['redis_errors'] += 1
            raise

    async def broadcast_event(self, dialog_id: int, event_data: dict) -> Optional[str]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Stream –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞"""
        try:
            event_id = await self.add_event_to_stream(dialog_id, event_data)
            sse_formatted = self._format_sse_event(event_data, event_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞
            if dialog_id in sse_connections:
                for client_id in list(sse_connections[dialog_id]):
                    queue = self.client_queues.get(client_id)
                    if queue is not None:
                        try:
                            await queue.put(sse_formatted)
                            sse_stats['events_sent'] += 1
                        except Exception as qe:
                            logger.error(f"‚ùå [SSE Manager] Failed to enqueue event for {client_id}: {qe}")
            return event_id
        except Exception as e:
            logger.error(f"‚ùå [SSE Manager] Failed to broadcast event: {e}")
            return None
    
    async def get_events_since(self, dialog_id: int, last_event_id: str = None, limit: int = 50) -> List[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ Stream –Ω–∞—á–∏–Ω–∞—è —Å last_event_id
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–≥–æ–Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        """
        try:
            stream_key = f"sse:dialog:{dialog_id}"
            
            # –ï—Å–ª–∏ last_event_id –Ω–µ —É–∫–∞–∑–∞–Ω, —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
            if not last_event_id:
                start_id = "$"  # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Redis Stream ID)
                if not self._is_valid_stream_id(last_event_id):
                    logger.warning(f"‚ö†Ô∏è [SSE Manager] Invalid last_event_id format: {last_event_id}")
                    start_id = "$"
                else:
                    start_id = f"({last_event_id}"  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º last_event_id
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            events = await self.redis.xread({stream_key: start_id}, count=limit, block=0)
            
            result = []
            if events:
                for stream, messages in events:
                    for event_id, fields in messages:
                        try:
                            data = json.loads(fields['data'])
                            result.append({
                                'id': event_id,
                                'data': data
                            })
                        except (json.JSONDecodeError, KeyError) as e:
                            logger.error(f"‚ùå [SSE Manager] Failed to parse event {event_id}: {e}")
                            continue
            
            logger.debug(f"üì• [SSE Manager] Retrieved {len(result)} events for dialog {dialog_id}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå [SSE Manager] Failed to get events since {last_event_id}: {e}")
            sse_stats['redis_errors'] += 1
            return []
    
    def _is_valid_stream_id(self, stream_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ Redis Stream ID (timestamp-sequence)"""
        try:
            parts = stream_id.split('-')
            return len(parts) == 2 and parts[0].isdigit() and parts[1].isdigit()
        except:
            return False
    
    async def create_sse_stream(
        self, 
        dialog_id: int, 
        client_id: str,
        last_event_id: str = None,
        origin: str = None,
        user_agent: str = None,
        auth_type: str = 'unknown'
    ) -> AsyncGenerator[str, None]:
        """
        –°–æ–∑–¥–∞–µ—Ç SSE stream –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤—ã–µ
        """
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = SSEClient(
            client_id=client_id,
            dialog_id=dialog_id,
            connected_at=time.time(),
            last_event_id=last_event_id,
            origin=origin,
            user_agent=user_agent,
            auth_type=auth_type
        )
        
        sse_clients[client_id] = client
        
        if dialog_id not in sse_connections:
            sse_connections[dialog_id] = set()
        sse_connections[dialog_id].add(client_id)
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –∫–ª–∏–µ–Ω—Ç–∞
        self.client_queues[client_id] = asyncio.Queue()
        
        sse_stats['active_connections'] += 1
        sse_stats['total_connections'] += 1
        
        logger.info(f"üîå [SSE Manager] Client {client_id} connected to dialog {dialog_id} ({auth_type})")
        logger.info(f"üìä [SSE Manager] Active connections for dialog {dialog_id}: {len(sse_connections[dialog_id])}")
        
        try:
            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º replay —Å–æ–±—ã—Ç–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å last_event_id
            if last_event_id:
                historical_events = await self.get_events_since(dialog_id, last_event_id, limit=100)
                for event in historical_events:
                    yield self._format_sse_event(event['data'], event['id'])
                    sse_stats['events_sent'] += 1
                
                logger.info(f"üì§ [SSE Manager] Sent {len(historical_events)} historical events to {client_id}")
            
            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            elif not last_event_id:
                recent_events = await self.get_events_since(dialog_id, None, limit=10)
                for event in recent_events:
                    yield self._format_sse_event(event['data'], event['id'])
                    sse_stats['events_sent'] += 1
                
                logger.info(f"üì§ [SSE Manager] Sent {len(recent_events)} recent events to {client_id}")
            
            # 3. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –æ—Ç–¥–∞—ë–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞ + heartbeat
            queue = self.client_queues.get(client_id)
            while client_id in sse_clients:
                try:
                    # –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è heartbeat
                    item = await asyncio.wait_for(queue.get(), timeout=25.0)
                    yield item
                except asyncio.TimeoutError:
                    # Heartbeat –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ lastEventId)
                    heartbeat_line = ": heartbeat\n\n"
                    yield heartbeat_line
                    sse_stats['heartbeats_sent'] += 1
                
        except asyncio.CancelledError:
            logger.info(f"üîå [SSE Manager] Client {client_id} disconnected (cancelled)")
        except Exception as e:
            logger.error(f"‚ùå [SSE Manager] Error in SSE stream for {client_id}: {e}")
        finally:
            # Cleanup
            self._cleanup_client(client_id)
    
    def _cleanup_client(self, client_id: str):
        """–£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö"""
        if client_id in sse_clients:
            client = sse_clients[client_id]
            dialog_id = client.dialog_id
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ connections
            if dialog_id in sse_connections:
                sse_connections[dialog_id].discard(client_id)
                if len(sse_connections[dialog_id]) == 0:
                    del sse_connections[dialog_id]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ clients
            del sse_clients[client_id]
            # –£–¥–∞–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–ª–∏–µ–Ω—Ç–∞
            self.client_queues.pop(client_id, None)
            
            sse_stats['active_connections'] = max(0, sse_stats['active_connections'] - 1)
            
            logger.info(f"üîå [SSE Manager] Client {client_id} cleanup completed")
            logger.info(f"üìä [SSE Manager] Remaining connections for dialog {dialog_id}: {len(sse_connections.get(dialog_id, []))}")
    
    def _format_sse_event(self, data: dict, event_id: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ SSE —Ñ–æ—Ä–º–∞—Ç"""
        lines = []
        
        if event_id:
            lines.append(f"id: {event_id}")
        
        lines.append("event: message")
        lines.append(f"data: {json.dumps(data)}")
        lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        
        return "\n".join(lines) + "\n"
    
    async def _pubsub_worker(self):
        """
        Background –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Redis Pub/Sub 
        –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ SSE –∫–ª–∏–µ–Ω—Ç–æ–≤
        """
        try:
            pubsub = self.redis.pubsub()
            # –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã ws:dialog:*
            await pubsub.psubscribe("ws:dialog:*")
            logger.info("‚úÖ [SSE Manager] Subscribed (pattern) to Redis Pub/Sub ws:dialog:*")
            
            async for message in pubsub.listen():
                if message['type'] == 'pmessage':
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º dialog_id –∏–∑ –∫–∞–Ω–∞–ª–∞
                        channel = message['channel']
                        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç ws:dialog:<id>
                        dialog_id = int(channel.split(':')[-1])
                        
                        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        event_data = json.loads(message['data'])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Stream –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
                        event_id = await self.add_event_to_stream(dialog_id, event_data)
                        sse_formatted = self._format_sse_event(event_data, event_id)
                        if dialog_id in sse_connections:
                            for client_id in list(sse_connections[dialog_id]):
                                queue = self.client_queues.get(client_id)
                                if queue is not None:
                                    try:
                                        await queue.put(sse_formatted)
                                        sse_stats['events_sent'] += 1
                                    except Exception as qe:
                                        logger.error(f"‚ùå [SSE Manager] Failed to enqueue pubsub event for {client_id}: {qe}")
                        logger.debug(f"üì§ [SSE Manager] Enqueued event for dialog {dialog_id} to active SSE clients")
                        
                    except Exception as e:
                        logger.error(f"‚ùå [SSE Manager] Error processing pubsub message: {e}")
                        sse_stats['redis_errors'] += 1
        
        except asyncio.CancelledError:
            logger.info("üîÑ [SSE Manager] Pub/Sub worker cancelled")
        except Exception as e:
            logger.error(f"‚ùå [SSE Manager] Pub/Sub worker error: {e}")
        finally:
            try:
                await pubsub.unsubscribe()
                await pubsub.close()
            except:
                pass
    
    async def _heartbeat_worker(self):
        """
        Background –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ heartbeat —Å–æ–±—ã—Ç–∏–π
        –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        """
        try:
            while True:
                await asyncio.sleep(30)  # Heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                if sse_clients:
                    logger.debug(f"üíì [SSE Manager] Scheduling heartbeat to {len(sse_clients)} SSE clients")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π-—Ö–∞ÃÅ—Ä—Ç–±–∏—Ç –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –æ—á–µ—Ä–µ–¥—è–º
                    for client_id in list(sse_clients.keys()):
                        queue = self.client_queues.get(client_id)
                        if queue is not None:
                            try:
                                await queue.put(": heartbeat\n\n")
                                sse_stats['heartbeats_sent'] += 1
                            except Exception:
                                pass
                
        except asyncio.CancelledError:
            logger.info("üîÑ [SSE Manager] Heartbeat worker cancelled")
        except Exception as e:
            logger.error(f"‚ùå [SSE Manager] Heartbeat worker error: {e}")
    
    async def _cleanup_worker(self):
        """
        Background –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö Stream –∑–∞–ø–∏—Å–µ–π
        """
        try:
            while True:
                await asyncio.sleep(3600)  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ stream –∫–ª—é—á–∏
                    stream_keys = await self.redis.keys("sse:dialog:*")
                    
                    for key in stream_keys:
                        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
                        await self.redis.xtrim(key, maxlen=1000, approximate=True)
                    
                    logger.info(f"üßπ [SSE Manager] Cleaned up {len(stream_keys)} Redis Streams")
                    
                except Exception as e:
                    logger.error(f"‚ùå [SSE Manager] Cleanup error: {e}")
                
        except asyncio.CancelledError:
            logger.info("üîÑ [SSE Manager] Cleanup worker cancelled")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
sse_manager = SSEManager()

# Utility —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
async def push_sse_event(dialog_id: int, event_data: dict):
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è SSE –∫–ª–∏–µ–Ω—Ç–æ–≤
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º push_dialog_message
    """
    try:
        await sse_manager.broadcast_event(dialog_id, event_data)
    except Exception as e:
        logger.error(f"‚ùå [SSE] Failed to push event for dialog {dialog_id}: {e}")

def get_sse_stats() -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å websocket_manager)"""
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    admin_connections = sum(1 for client_id in sse_clients.keys() if client_id.startswith('admin_'))
    site_connections = sum(1 for client_id in sse_clients.keys() if client_id.startswith('site_'))
    widget_connections = sum(1 for client_id in sse_clients.keys() if client_id.startswith('widget_'))
    
    return {
        **sse_stats,
        'active_dialogs': len(sse_connections),
        'clients_per_dialog': {
            dialog_id: len(client_ids) 
            for dialog_id, client_ids in sse_connections.items()
        },
        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å websocket_manager
        'connection_details': {
            'admin_connections': admin_connections,
            'site_connections': site_connections,
            'widget_connections': widget_connections,
            'total_connections': len(sse_clients)
        }
    }

# Authentication helpers (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ websocket_manager.py)
async def validate_sse_auth(
    dialog_id: int,
    token: str = None,
    site_token: str = None, 
    assistant_id: int = None,
    origin: str = None
) -> tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid, auth_type)
    """
    try:
        # Admin token
        if token:
            # TODO: implement JWT validation
            return True, "admin"
        
        # Site token
        if site_token:
            # For SSE, we may not have Origin header, so we validate token structure only
            if origin and not _is_domain_allowed_by_token(origin, site_token):
                return False, "forbidden_domain"
            
            # If no origin, validate token structure only (SSE-friendly)
            try:
                from core.app_config import SITE_SECRET
                payload = jwt.decode(site_token, SITE_SECRET, algorithms=['HS256'], options={"verify_exp": False})
                if payload.get('type') == 'site' and payload.get('user_id'):
                    return True, "site"
            except Exception:
                pass
                
            return False, "invalid_site_token"
        
        # Widget mode (assistant_id)
        if assistant_id:
            # TODO: validate assistant exists and is active
            return True, "widget"
        
        return False, "missing_auth"
        
    except Exception as e:
        logger.error(f"‚ùå [SSE Auth] Validation error: {e}")
        return False, "auth_error"