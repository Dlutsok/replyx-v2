"""
SSE Service –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Server-Sent Events –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
–ó–∞–º–µ–Ω—è–µ—Ç WebSocket manager + ws-gateway —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
"""
import asyncio
import json
import logging
import time
from collections import defaultdict
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set, Any

import redis.asyncio as redis
from sqlalchemy.orm import Session

from database import models
from services.events_pubsub import get_events_pubsub

logger = logging.getLogger(__name__)


class SSEService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –∏ —Å–æ–±—ã—Ç–∏—è–º–∏"""
    
    def __init__(self, redis_url: str = None):
        self.redis_url = redis_url
        self.redis_client: Optional[redis.Redis] = None
        self.pubsub_client: Optional[redis.Redis] = None
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ –¥–∏–∞–ª–æ–≥–∞–º
        self.dialog_clients: Dict[int, Set[str]] = defaultdict(set)
        
        # –û—á–µ—Ä–µ–¥–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.client_queues: Dict[str, asyncio.Queue] = {}
        
        # Redis Pub/Sub –ø–æ–¥–ø–∏—Å—á–∏–∫
        self.pubsub_task: Optional[asyncio.Task] = None
        self.is_running = False
        
        # –°–æ–±—ã—Ç–∏—è pubsub –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.events_pubsub = get_events_pubsub()
        
    async def _get_redis(self) -> redis.Redis:
        """–ü–æ–ª—É—á–∞–µ—Ç Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è streams"""
        if not self.redis_client:
            from core.app_config import REDIS_URL
            self.redis_client = redis.from_url(
                self.redis_url or REDIS_URL,
                decode_responses=True,
                retry_on_timeout=True
            )
            await self.redis_client.ping()
            logger.info("‚úÖ SSE Redis client connected")
        return self.redis_client
    
    async def _get_pubsub_redis(self) -> redis.Redis:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è pub/sub"""
        if not self.pubsub_client:
            from core.app_config import REDIS_URL
            self.pubsub_client = redis.from_url(
                self.redis_url or REDIS_URL,
                decode_responses=True
            )
            await self.pubsub_client.ping()
            logger.info("‚úÖ SSE PubSub Redis client connected")
        return self.pubsub_client
    
    def _make_stream_key(self, dialog_id: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á Redis Stream –¥–ª—è –¥–∏–∞–ª–æ–≥–∞"""
        return f"sse:dialog:{dialog_id}"
    
    def _generate_event_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è SSE"""
        return f"{int(time.time() * 1000)}-{id(self)}"
    
    async def start_pubsub_listener(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª—å Redis Pub/Sub –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
        if self.is_running:
            logger.warning("SSE PubSub listener already running")
            return
        
        self.is_running = True
        self.pubsub_task = asyncio.create_task(self._pubsub_listener_loop())
        logger.info("üéß SSE PubSub listener started")
    
    async def _pubsub_listener_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–ª—É—à–∞—Ç–µ–ª—è PubSub"""
        try:
            client = await self._get_pubsub_redis()
            pubsub = client.pubsub()
            await pubsub.psubscribe("ws:dialog:*")
            
            logger.info("üîî SSE subscribed to ws:dialog:* events")
            
            async for message in pubsub.listen():
                try:
                    if message['type'] == 'pmessage':
                        channel = message['channel']
                        data = message['data']
                        
                        if not data:
                            continue
                        
                        # –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏–µ
                        event = json.loads(data)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º dialog_id
                        dialog_id = int(channel.split(':')[-1])
                        
                        logger.debug(f"üéß SSE received pubsub: dialog={dialog_id}, type={event.get('type')}")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                        await self._handle_pubsub_event(dialog_id, event)
                        
                except Exception as e:
                    logger.error(f"Error processing pubsub message: {e}", exc_info=True)
        
        except Exception as e:
            logger.error(f"PubSub listener error: {e}", exc_info=True)
        finally:
            if pubsub:
                await pubsub.unsubscribe()
                await pubsub.aclose()
            self.is_running = False
            logger.info("üîå SSE PubSub listener stopped")
    
    async def _handle_pubsub_event(self, dialog_id: int, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ Redis PubSub"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SSE event ID
            event_id = self._generate_event_id()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis Stream –¥–ª—è replay
            await self._save_to_stream(dialog_id, event_id, event)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º SSE –∫–ª–∏–µ–Ω—Ç–∞–º
            await self._broadcast_to_clients(dialog_id, event_id, event)
            
        except Exception as e:
            logger.error(f"Error handling pubsub event for dialog {dialog_id}: {e}")
    
    async def _save_to_stream(self, dialog_id: int, event_id: str, event: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Redis Stream –¥–ª—è replay"""
        try:
            client = await self._get_redis()
            stream_key = self._make_stream_key(dialog_id)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è stream
            stream_data = {
                'event_id': event_id,
                'event_type': event.get('type', 'message'),
                'data': json.dumps(event, ensure_ascii=False),
                'timestamp': datetime.utcnow().isoformat()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ stream
            await client.xadd(stream_key, stream_data)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä stream (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–æ–±—ã—Ç–∏–π)
            await client.xtrim(stream_key, maxlen=1000, approximate=True)
            
            logger.debug(f"üíæ Saved event to stream: dialog={dialog_id}, event_id={event_id}")
            
        except Exception as e:
            logger.error(f"Error saving to stream for dialog {dialog_id}: {e}")
    
    async def _broadcast_to_clients(self, dialog_id: int, event_id: str, event: Dict[str, Any]):
        """–†–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º SSE –∫–ª–∏–µ–Ω—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞"""
        if dialog_id not in self.dialog_clients:
            logger.debug(f"No SSE clients for dialog {dialog_id}")
            return
        
        sse_event = {
            'id': event_id,
            'event': event.get('type', 'message'),
            'data': event
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞
        clients_count = 0
        for client_id in list(self.dialog_clients[dialog_id]):
            if client_id in self.client_queues:
                try:
                    await self.client_queues[client_id].put(sse_event)
                    clients_count += 1
                except Exception as e:
                    logger.error(f"Error sending to SSE client {client_id}: {e}")
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    await self.remove_client(dialog_id, client_id)
        
        if clients_count > 0:
            logger.debug(f"üì§ Broadcasted SSE event to {clients_count} clients: dialog={dialog_id}")
    
    async def add_client(self, dialog_id: int, client_id: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç SSE –∫–ª–∏–µ–Ω—Ç–∞"""
        self.dialog_clients[dialog_id].add(client_id)
        self.client_queues[client_id] = asyncio.Queue()
        
        logger.info(f"‚ûï SSE client added: dialog={dialog_id}, client={client_id}, "
                   f"total_clients={len(self.dialog_clients[dialog_id])}")
    
    async def remove_client(self, dialog_id: int, client_id: str):
        """–£–¥–∞–ª—è–µ—Ç SSE –∫–ª–∏–µ–Ω—Ç–∞"""
        if client_id in self.client_queues:
            del self.client_queues[client_id]
        
        if dialog_id in self.dialog_clients:
            self.dialog_clients[dialog_id].discard(client_id)
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –Ω–∞–±–æ—Ä—ã
            if not self.dialog_clients[dialog_id]:
                del self.dialog_clients[dialog_id]
        
        logger.info(f"‚ûñ SSE client removed: dialog={dialog_id}, client={client_id}")
    
    async def get_events_for_client(self, dialog_id: int, client_id: str, timeout: float = 5.0) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ SSE –∫–ª–∏–µ–Ω—Ç–∞"""
        if client_id not in self.client_queues:
            return []
        
        events = []
        queue = self.client_queues[client_id]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            event = await asyncio.wait_for(queue.get(), timeout=timeout)
            events.append(event)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            while not queue.empty():
                try:
                    event = await asyncio.wait_for(queue.get(), timeout=0.1)
                    events.append(event)
                except asyncio.TimeoutError:
                    break
            
        except asyncio.TimeoutError:
            # –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pass
        
        return events
    
    async def get_missed_events(self, dialog_id: int, last_event_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Redis Stream"""
        try:
            client = await self._get_redis()
            stream_key = self._make_stream_key(dialog_id)
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ last_event_id
            events = await client.xrange(stream_key, min=f"({last_event_id}", count=50)
            
            result = []
            for stream_id, fields in events:
                try:
                    event_data = {
                        'id': fields['event_id'],
                        'event': fields['event_type'],
                        'data': json.loads(fields['data'])
                    }
                    result.append(event_data)
                except Exception as e:
                    logger.error(f"Error parsing stream event {stream_id}: {e}")
            
            return result
            
        except Exception as e:
            logger.error(f"Error getting missed events for dialog {dialog_id}: {e}")
            return []
    
    async def get_recent_messages(self, dialog_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            client = await self._get_redis()
            stream_key = self._make_stream_key(dialog_id)
            
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            events = await client.xrevrange(stream_key, count=limit)
            
            result = []
            for stream_id, fields in reversed(events):  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫
                try:
                    event_data = {
                        'id': fields['event_id'],
                        'event': fields['event_type'],
                        'data': json.loads(fields['data'])
                    }
                    result.append(event_data)
                except Exception as e:
                    logger.error(f"Error parsing stream event {stream_id}: {e}")
            
            return result
            
        except Exception as e:
            logger.error(f"Error getting recent messages for dialog {dialog_id}: {e}")
            return []
    
    async def get_health_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è SSE —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
            client = await self._get_redis()
            await client.ping()
            redis_ok = True
        except Exception:
            redis_ok = False
        
        return {
            "pubsub_running": self.is_running,
            "redis_connected": redis_ok,
            "active_dialogs": len(self.dialog_clients),
            "total_clients": sum(len(clients) for clients in self.dialog_clients.values()),
            "client_queues": len(self.client_queues)
        }
    
    async def get_connection_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        dialog_stats = {}
        for dialog_id, clients in self.dialog_clients.items():
            dialog_stats[str(dialog_id)] = {
                "client_count": len(clients),
                "clients": list(clients)
            }
        
        return {
            "dialog_stats": dialog_stats,
            "total_dialogs": len(self.dialog_clients),
            "total_clients": sum(len(clients) for clients in self.dialog_clients.values())
        }
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SSE —Å–µ—Ä–≤–∏—Å"""
        if self.pubsub_task:
            self.pubsub_task.cancel()
            try:
                await self.pubsub_task
            except asyncio.CancelledError:
                pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
        for client_id in list(self.client_queues.keys()):
            del self.client_queues[client_id]
        
        self.dialog_clients.clear()
        
        if self.redis_client:
            await self.redis_client.aclose()
        
        if self.pubsub_client:
            await self.pubsub_client.aclose()
        
        logger.info("üõë SSE Service stopped")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_sse_service: Optional[SSEService] = None

def get_sse_service() -> SSEService:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SSE —Å–µ—Ä–≤–∏—Å–∞"""
    global _sse_service
    if not _sse_service:
        _sse_service = SSEService()
    return _sse_service