"""
WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
"""
import asyncio
from typing import Dict, List
import time
import logging
from fastapi import WebSocket, WebSocketDisconnect, Depends, Query
from sqlalchemy.orm import Session
from database import models, auth
from core.site_auth import get_current_site_user_simple

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ dialog_id
ws_connections: Dict[int, List[WebSocket]] = {}
ws_site_connections: Dict[int, List[WebSocket]] = {}

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: last_pong, —Å–æ–∑–¥–∞–Ω–æ, —Å—á—ë—Ç—á–∏–∫–∏
ws_meta: Dict[int, Dict[WebSocket, Dict[str, float]]] = {}
ws_site_meta: Dict[int, Dict[WebSocket, Dict[str, float]]] = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ sequence numbers –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
_sequence_counter = 0

# –õ–∏–º–∏—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
MAX_CONNECTIONS_PER_DIALOG = 50
MAX_TOTAL_CONNECTIONS = 1000
PING_INTERVAL_SECONDS = 25
PONG_TIMEOUT_SECONDS = 40

logger = logging.getLogger(__name__)

async def _register_connection(bucket: Dict[int, List[WebSocket]], meta_bucket: Dict[int, Dict[WebSocket, Dict[str, float]]], dialog_id: int, websocket: WebSocket) -> bool:
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
    total = sum(len(lst) for lst in bucket.values())
    if total >= MAX_TOTAL_CONNECTIONS:
        await websocket.close(code=1013)
        return False
    # –õ–∏–º–∏—Ç –Ω–∞ –¥–∏–∞–ª–æ–≥
    conns = bucket.get(dialog_id, [])
    if len(conns) >= MAX_CONNECTIONS_PER_DIALOG:
        await websocket.close(code=1013)
        return False
    if dialog_id not in bucket:
        bucket[dialog_id] = []
    if dialog_id not in meta_bucket:
        meta_bucket[dialog_id] = {}
    bucket[dialog_id].append(websocket)
    meta_bucket[dialog_id][websocket] = {"created": time.time(), "last_pong": time.time()}
    return True

async def _unregister_connection(bucket: Dict[int, List[WebSocket]], meta_bucket: Dict[int, Dict[WebSocket, Dict[str, float]]], dialog_id: int, websocket: WebSocket):
    try:
        if dialog_id in bucket and websocket in bucket[dialog_id]:
            bucket[dialog_id].remove(websocket)
        if dialog_id in meta_bucket and websocket in meta_bucket[dialog_id]:
            del meta_bucket[dialog_id][websocket]
    except Exception:
        pass

async def _heartbeat_loop(dialog_id: int, websocket: WebSocket, meta_bucket: Dict[int, Dict[WebSocket, Dict[str, float]]]):
    try:
        while True:
            await asyncio.sleep(PING_INTERVAL_SECONDS)
            # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–∞–ª–æ –∏–∑ –º–µ—Ç—ã ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
            if dialog_id not in meta_bucket or websocket not in meta_bucket[dialog_id]:
                break
            try:
                await websocket.send_text("__ping__")
            except Exception:
                break
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ pong
            last_pong = meta_bucket[dialog_id][websocket].get("last_pong", 0)
            if time.time() - last_pong > PONG_TIMEOUT_SECONDS:
                try:
                    await websocket.close(code=1002)
                finally:
                    break
    except Exception:
        pass

async def _receive_loop(dialog_id: int, websocket: WebSocket, meta_bucket: Dict[int, Dict[WebSocket, Dict[str, float]]]):
    try:
        while True:
            data = await websocket.receive_text()
            if data == "__pong__":
                if dialog_id in meta_bucket and websocket in meta_bucket[dialog_id]:
                    meta_bucket[dialog_id][websocket]["last_pong"] = time.time()
            # –ò–≥–Ω–æ—Ä –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await asyncio.sleep(0)
    except WebSocketDisconnect:
        pass
    except Exception:
        pass

async def dialog_websocket_endpoint(websocket: WebSocket, dialog_id: int, token: str = None, db: Session = None):
    """WebSocket endpoint –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É (JWT) –¥–ª—è WebSocket
    user = None
    if token:
        try:
            from core.auth import get_user_from_token
            user = get_user_from_token(token, db)
            if not user:
                await websocket.close(code=4001, reason="Invalid token")
                return
        except Exception as e:
            print(f"‚ùå [WebSocket] Auth error: {e}")
            await websocket.close(code=4001, reason="Auth failed")
            return
    await websocket.accept()
    ok = await _register_connection(ws_connections, ws_meta, dialog_id, websocket)
    if not ok:
        return
    print(f"üîå [Admin] WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –¥–∏–∞–ª–æ–≥—É {dialog_id}")
    print(f"üìä [Admin] Total connections for dialog {dialog_id}: {len(ws_connections[dialog_id])}")
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: –ø—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π (pong) –∏ heartbeat
    receive_task = asyncio.create_task(_receive_loop(dialog_id, websocket, ws_meta))
    heartbeat_task = asyncio.create_task(_heartbeat_loop(dialog_id, websocket, ws_meta))
    try:
        await asyncio.wait([receive_task, heartbeat_task], return_when=asyncio.FIRST_COMPLETED)
    finally:
        receive_task.cancel()
        heartbeat_task.cancel()
        await _unregister_connection(ws_connections, ws_meta, dialog_id, websocket)
        print(f"üîå [Admin] WebSocket –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –¥–∏–∞–ª–æ–≥–∞ {dialog_id}")
        print(f"üìä [Admin] Remaining connections for dialog {dialog_id}: {len(ws_connections.get(dialog_id, []))}")

async def site_dialog_websocket_endpoint(websocket: WebSocket, dialog_id: int, site_token: str = Query(None), db: Session = None):
    """WebSocket endpoint –¥–ª—è site –¥–∏–∞–ª–æ–≥–æ–≤"""
    user = None
    try:
        user = get_current_site_user_simple(site_token, db)
    except Exception:
        await websocket.close(code=4001)
        return
    await websocket.accept()
    ok = await _register_connection(ws_site_connections, ws_site_meta, dialog_id, websocket)
    if not ok:
        return
    receive_task = asyncio.create_task(_receive_loop(dialog_id, websocket, ws_site_meta))
    heartbeat_task = asyncio.create_task(_heartbeat_loop(dialog_id, websocket, ws_site_meta))
    try:
        await asyncio.wait([receive_task, heartbeat_task], return_when=asyncio.FIRST_COMPLETED)
    finally:
        receive_task.cancel()
        heartbeat_task.cancel()
        await _unregister_connection(ws_site_connections, ws_site_meta, dialog_id, websocket)

async def widget_dialog_websocket_endpoint(websocket: WebSocket, dialog_id: int, assistant_id: int, db: Session = None):
    """WebSocket endpoint –¥–ª—è widget –¥–∏–∞–ª–æ–≥–æ–≤"""
    print(f"üîå [Widget] WebSocket connection attempt for dialog {dialog_id}, assistant {assistant_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    assistant = db.query(models.Assistant).filter(models.Assistant.id == assistant_id).first()
    if not assistant:
        print(f"‚ùå [Widget] Assistant {assistant_id} not found")
        await websocket.close(code=4004)
        return
    
    await websocket.accept()
    print(f"‚úÖ [Widget] WebSocket accepted for dialog {dialog_id}")
    
    ok = await _register_connection(ws_site_connections, ws_site_meta, dialog_id, websocket)
    if not ok:
        return
    print(f"üìä [Widget] Total connections for dialog {dialog_id}: {len(ws_site_connections[dialog_id])}")
    receive_task = asyncio.create_task(_receive_loop(dialog_id, websocket, ws_site_meta))
    heartbeat_task = asyncio.create_task(_heartbeat_loop(dialog_id, websocket, ws_site_meta))
    try:
        await asyncio.wait([receive_task, heartbeat_task], return_when=asyncio.FIRST_COMPLETED)
    finally:
        receive_task.cancel()
        heartbeat_task.cancel()
        print(f"üîå [Widget] WebSocket disconnected for dialog {dialog_id}")
        await _unregister_connection(ws_site_connections, ws_site_meta, dialog_id, websocket)
        print(f"üìä [Widget] Remaining connections for dialog {dialog_id}: {len(ws_site_connections.get(dialog_id, []))}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É—à–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞
async def push_dialog_message(dialog_id: int, message: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞ (–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å)"""
    conns = ws_connections.get(dialog_id, [])
    print(f"üîç [WebSocketManager] Push to ADMIN dialog {dialog_id}: {len(conns)} connections")
    print(f"üì® [WebSocketManager] Admin message: {message}")
    
    if not conns:
        print(f"‚ö†Ô∏è [WebSocketManager] No ADMIN WebSocket connections found for dialog {dialog_id}")
        print(f"üìä [WebSocketManager] Available ADMIN dialogs: {list(ws_connections.keys())}")
        return
    
    sent_count = 0
    for ws in conns:
        try:
            await ws.send_json(message)
            sent_count += 1
            print(f"‚úÖ [WebSocketManager] Message sent via ADMIN WebSocket")
        except Exception as e:
            print(f"‚ùå [WebSocketManager] Failed to send ADMIN WebSocket message: {e}")
    
    print(f"üìä [WebSocketManager] Sent to {sent_count}/{len(conns)} ADMIN connections")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É—à–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º site-–¥–∏–∞–ª–æ–≥–∞
async def push_site_dialog_message(dialog_id: int, message: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º site-–¥–∏–∞–ª–æ–≥–∞ (–≤–∏–¥–∂–µ—Ç—ã)"""
    conns = ws_site_connections.get(dialog_id, [])
    print(f"üîç [WebSocketManager] Push to SITE/WIDGET dialog {dialog_id}: {len(conns)} connections")
    print(f"üì® [WebSocketManager] Site/Widget message: {message}")
    
    if not conns:
        print(f"‚ö†Ô∏è [WebSocketManager] No SITE/WIDGET WebSocket connections found for dialog {dialog_id}")
        print(f"üìä [WebSocketManager] Available SITE/WIDGET dialogs: {list(ws_site_connections.keys())}")
        return
    
    sent_count = 0
    for ws in conns:
        try:
            await ws.send_json(message)
            sent_count += 1
            print(f"‚úÖ [WebSocketManager] Message sent via SITE/WIDGET WebSocket")
        except Exception as e:
            print(f"‚ùå [WebSocketManager] Failed to send SITE/WIDGET WebSocket message: {e}")
    
    print(f"üìä [WebSocketManager] Sent to {sent_count}/{len(conns)} SITE/WIDGET connections")

def _get_next_sequence() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π sequence number –¥–ª—è —Å–æ–±—ã—Ç–∏–π"""
    global _sequence_counter
    _sequence_counter += 1
    return _sequence_counter

async def push_handoff_requested(dialog_id: int, reason: str, queue_position: int = None, metadata: dict = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ handoff_requested –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞"""
    event = {
        "type": "handoff_requested",
        "dialog_id": dialog_id,
        "reason": reason,
        "seq": _get_next_sequence(),
        "timestamp": time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime())
    }
    
    if queue_position is not None:
        event["queue_position"] = queue_position
    
    if metadata:
        event["metadata"] = metadata
    
    print(f"üì® [WebSocketManager] Handoff requested event: {event}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—ã—á–Ω—ã–µ –∏ site connections
    await push_dialog_message(dialog_id, event)
    await push_site_dialog_message(dialog_id, event)

async def push_handoff_started(dialog_id: int, manager_info: dict, metadata: dict = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ handoff_started –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞"""
    event = {
        "type": "handoff_started", 
        "dialog_id": dialog_id,
        "manager": manager_info,  # {"id": int, "name": str, "avatar": str}
        "seq": _get_next_sequence(),
        "timestamp": time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime())
    }
    
    if metadata:
        event["metadata"] = metadata
    
    print(f"üì® [WebSocketManager] Handoff started event: {event}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—ã—á–Ω—ã–µ –∏ site connections
    await push_dialog_message(dialog_id, event)
    await push_site_dialog_message(dialog_id, event)

async def push_handoff_released(dialog_id: int, metadata: dict = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ handoff_released –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞"""
    event = {
        "type": "handoff_released",
        "dialog_id": dialog_id,
        "seq": _get_next_sequence(),
        "timestamp": time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime())
    }
    
    if metadata:
        event["metadata"] = metadata
    
    print(f"üì® [WebSocketManager] Handoff released event: {event}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—ã—á–Ω—ã–µ –∏ site connections
    await push_dialog_message(dialog_id, event)
    await push_site_dialog_message(dialog_id, event)

async def push_handoff_cancelled(dialog_id: int, reason: str = None, metadata: dict = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ handoff_cancelled –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞"""
    event = {
        "type": "handoff_cancelled",
        "dialog_id": dialog_id,
        "seq": _get_next_sequence(),
        "timestamp": time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime())
    }
    
    if reason:
        event["reason"] = reason
    
    if metadata:
        event["metadata"] = metadata
    
    print(f"üì® [WebSocketManager] Handoff cancelled event: {event}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—ã—á–Ω—ã–µ –∏ site connections
    await push_dialog_message(dialog_id, event)
    await push_site_dialog_message(dialog_id, event)

async def push_operator_handling(dialog_id: int, message_text: str, metadata: dict = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ operator_handling –∫–æ–≥–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥"""
    event = {
        "type": "operator_handling",
        "dialog_id": dialog_id,
        "message": message_text,
        "seq": _get_next_sequence(),
        "timestamp": time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime())
    }
    
    if metadata:
        event["metadata"] = metadata
    
    print(f"üì® [WebSocketManager] Operator handling event: {event}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—ã—á–Ω—ã–µ –∏ site connections
    await push_dialog_message(dialog_id, event)
    await push_site_dialog_message(dialog_id, event)