"""
WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
"""
import asyncio
from typing import Dict, List
from fastapi import WebSocket, WebSocketDisconnect, Depends, Query
from sqlalchemy.orm import Session
from database import models, auth
from core.site_auth import get_current_site_user_simple

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ dialog_id
ws_connections: Dict[int, List[WebSocket]] = {}
ws_site_connections: Dict[int, List[WebSocket]] = {}

async def dialog_websocket_endpoint(websocket: WebSocket, dialog_id: int, token: str = None, db: Session = None):
    """WebSocket endpoint –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    # –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É (JWT)
    user = None
    if token:
        try:
            user = auth.get_current_user(token, db)
        except Exception as e:
            await websocket.close(code=4001)
            return
    await websocket.accept()
    if dialog_id not in ws_connections:
        ws_connections[dialog_id] = []
    ws_connections[dialog_id].append(websocket)
    print(f"WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –¥–∏–∞–ª–æ–≥—É {dialog_id}")
    try:
        while True:
            data = await websocket.receive_text()
            # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –ø—É—à–∏–º –Ω–æ–≤—ã–µ
            await asyncio.sleep(0.1)
    except WebSocketDisconnect:
        ws_connections[dialog_id].remove(websocket)
        print(f"WebSocket –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –¥–∏–∞–ª–æ–≥–∞ {dialog_id}")

async def site_dialog_websocket_endpoint(websocket: WebSocket, dialog_id: int, site_token: str = Query(None), db: Session = None):
    """WebSocket endpoint –¥–ª—è site –¥–∏–∞–ª–æ–≥–æ–≤"""
    user = None
    try:
        user = get_current_site_user_simple(site_token, db)
    except Exception:
        await websocket.close(code=4001)
        return
    await websocket.accept()
    if dialog_id not in ws_site_connections:
        ws_site_connections[dialog_id] = []
    ws_site_connections[dialog_id].append(websocket)
    try:
        while True:
            await websocket.receive_text()  # ping-pong, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ
            await asyncio.sleep(0.1)
    except WebSocketDisconnect:
        ws_site_connections[dialog_id].remove(websocket)

async def widget_dialog_websocket_endpoint(websocket: WebSocket, dialog_id: int, assistant_id: int, db: Session = None):
    """WebSocket endpoint –¥–ª—è widget –¥–∏–∞–ª–æ–≥–æ–≤"""
    print(f"üîå [Widget] WebSocket connection attempt for dialog {dialog_id}, assistant {assistant_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    assistant = db.query(models.Assistant).filter(models.Assistant.id == assistant_id).first()
    if not assistant:
        print(f"‚ùå [Widget] Assistant {assistant_id} not found")
        await websocket.close(code=4004)
        return
    
    await websocket.accept()
    print(f"‚úÖ [Widget] WebSocket accepted for dialog {dialog_id}")
    
    if dialog_id not in ws_site_connections:
        ws_site_connections[dialog_id] = []
    ws_site_connections[dialog_id].append(websocket)
    print(f"üìä [Widget] Total connections for dialog {dialog_id}: {len(ws_site_connections[dialog_id])}")
    
    try:
        while True:
            await websocket.receive_text()  # ping-pong, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ
            await asyncio.sleep(0.1)
    except WebSocketDisconnect:
        print(f"üîå [Widget] WebSocket disconnected for dialog {dialog_id}")
        if dialog_id in ws_site_connections:
            ws_site_connections[dialog_id].remove(websocket)
            print(f"üìä [Widget] Remaining connections for dialog {dialog_id}: {len(ws_site_connections[dialog_id])}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É—à–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞
async def push_dialog_message(dialog_id: int, message: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞"""
    conns = ws_connections.get(dialog_id, [])
    for ws in conns:
        try:
            await ws.send_json(message)
        except Exception:
            pass

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É—à–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º site-–¥–∏–∞–ª–æ–≥–∞
async def push_site_dialog_message(dialog_id: int, message: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º site-–¥–∏–∞–ª–æ–≥–∞"""
    conns = ws_site_connections.get(dialog_id, [])
    print(f"üîç [WebSocketManager] Push message to dialog {dialog_id}: {len(conns)} connections")
    print(f"üì® [WebSocketManager] Message: {message}")
    
    if not conns:
        print(f"‚ö†Ô∏è [WebSocketManager] No WebSocket connections found for dialog {dialog_id}")
        print(f"üìä [WebSocketManager] Available dialogs: {list(ws_site_connections.keys())}")
        return
    
    sent_count = 0
    for ws in conns:
        try:
            await ws.send_json(message)
            sent_count += 1
            print(f"‚úÖ [WebSocketManager] Message sent via WebSocket")
        except Exception as e:
            print(f"‚ùå [WebSocketManager] Failed to send WebSocket message: {e}")
    
    print(f"üìä [WebSocketManager] Sent to {sent_count}/{len(conns)} connections")