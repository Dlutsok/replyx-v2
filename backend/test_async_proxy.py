#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–∫—Å–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π —Ä–∞–±–æ—Ç—ã
"""

import asyncio
import time
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ PATH
backend_path = Path(__file__).parent
sys.path.insert(0, str(backend_path))

from ai.ai_providers import get_ai_completion


async def test_concurrent_requests():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    test_messages = [
        [{"role": "user", "content": f"–°–∫–∞–∂–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ: {i}"}]
        for i in range(5)
    ]
    
    start_time = time.time()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [
        get_ai_completion(messages, model="gpt-4o-mini")
        for messages in test_messages
    ]
    
    print(f"üì§ –ó–∞–ø—É—â–µ–Ω–æ {len(tasks)} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        results = await asyncio.wait_for(
            asyncio.gather(*tasks, return_exceptions=True), 
            timeout=60.0
        )
        
        total_time = time.time() - start_time
        
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f}s")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_count = 0
        error_count = 0
        
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                print(f"‚ùå –ó–∞–ø—Ä–æ—Å {i+1}: {result}")
                error_count += 1
            else:
                print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i+1}: —É—Å–ø–µ—à–µ–Ω (–ø—Ä–æ–≤–∞–π–¥–µ—Ä: {result.get('provider_used', 'unknown')})")
                success_count += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"   üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(tasks)/total_time:.2f} req/s")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª—Å—è
        if total_time < 30.0:  # –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –ù–ï –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è - –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ!")
        else:
            print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ - –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ")
            
    except asyncio.TimeoutError:
        print("‚ùå –¢–∞–π–º–∞—É—Ç - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–∏—Å–ª–∏!")
        return False
    
    return success_count > 0


async def test_proxy_failover():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ failover –ø—Ä–æ–∫—Å–∏...")
    
    try:
        result = await asyncio.wait_for(
            get_ai_completion([{"role": "user", "content": "Test failover"}]),
            timeout=30.0
        )
        
        print(f"‚úÖ Failover —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {result.get('provider_used', 'unknown')}")
        if 'proxy_used' in result:
            print(f"üîó –ü—Ä–æ–∫—Å–∏: {result['proxy_used']}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ failover: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–∫—Å–∏ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test1_ok = await test_concurrent_requests()
    
    # –¢–µ—Å—Ç 2: Failover
    test2_ok = await test_proxy_failover()
    
    print("\n" + "=" * 50)
    
    if test1_ok and test2_ok:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return 0
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)