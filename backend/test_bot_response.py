#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê –ë–û–¢–ê

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –±–æ—Ç —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞–Ω–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã.
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.connection import SessionLocal
from database import models
from sqlalchemy import text
import json
from ai.ai_token_manager import ai_token_manager

def test_bot_knowledge():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –±–æ—Ç–æ–º"""
    db = SessionLocal()
    
    try:
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê –ë–û–¢–ê DAN")
        print("=" * 50)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user_id = 1  # admin@example.com
        assistant_id = 67  # Dan
        test_messages = [
            "–∫—Ç–æ —Ç—ã?",
            "–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã?", 
            "—á—Ç–æ –≤—ã —É–º–µ–µ—Ç–µ?",
            "–∫–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?"
        ]
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user_id}")
        print(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ID={assistant_id}")
        print(f"üí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_messages)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ)
        knowledge_entries = db.query(models.UserKnowledge).filter(
            models.UserKnowledge.user_id == user_id,
            models.UserKnowledge.assistant_id == assistant_id
        ).all()
        
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–Ω–∞–Ω–∏–π: {len(knowledge_entries)}")
        
        documents = []
        for entry in knowledge_entries:
            if entry.type == 'summary':
                try:
                    chunks = json.loads(entry.content)
                    documents.extend(chunks)
                except Exception:
                    documents.append(entry.content)
            else:
                documents.append(entry.content)
        
        if documents:
            docs_text = '\n---\n'.join(documents)
            print(f"üìÑ –î–ª–∏–Ω–∞ –∑–Ω–∞–Ω–∏–π: {len(docs_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö
            if '–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã' in docs_text.lower() or '–ø–Ω‚Äì–ø—Ç' in docs_text.lower():
                print("‚úÖ –ó–Ω–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã")
            else:
                print("‚ùå –ó–Ω–∞–Ω–∏—è –ù–ï —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã")
            
            # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            
            print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ì–û –°–¢–ò–õ–Ø")
            print("=" * 60)
            
            for i, test_message in enumerate(test_messages, 1):
                print(f"\n{i}. –í–û–ü–†–û–°: '{test_message}'")
                print("-" * 40)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                current_prompt = [
                    {"role": "system", "content": f"–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:\n\n{docs_text}"},
                    {"role": "system", "content": "–í—ã ‚Äî –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–ê–ª—å—Ñ–∞–°—Ñ–µ—Ä–∞¬ª, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–π—Å—è –Ω–∞ –æ–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏–Ω–≥–∞—Ö. –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: –¥–µ–ª–æ–≤–æ–π, –≤–µ–∂–ª–∏–≤—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É. –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤."},
                    {"role": "user", "content": test_message}
                ]
                
                try:
                    completion = ai_token_manager.make_openai_request(
                        messages=current_prompt,
                        model="gpt-4o",
                        user_id=user_id,
                        assistant_id=assistant_id,
                        temperature=0.3,
                        max_tokens=300
                    )
                    
                    bot_response = completion.choices[0].message.content.strip()
                    
                    print(f"–û–¢–í–ï–¢: {bot_response}")
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
                    professional_score = 0
                    feedback = []
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–º–∞–π–ª–∏–∫–æ–≤
                    if not any(emoji in bot_response for emoji in ['üòä', 'üöÄ', '‚ú®', 'üéì', 'üõ†Ô∏è', 'üí°', 'üî•', '‚ö°', 'üéØ', 'üåü']):
                        professional_score += 1
                        feedback.append("‚úÖ –ù–µ—Ç —Å–º–∞–π–ª–∏–∫–æ–≤")
                    else:
                        feedback.append("‚ùå –°–æ–¥–µ—Ä–∂–∏—Ç —Å–º–∞–π–ª–∏–∫–∏")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è "–í—ã"
                    if '–≤—ã' in bot_response.lower() or '–≤–∞—Å' in bot_response.lower() or '–≤–∞–º' in bot_response.lower():
                        professional_score += 1
                        feedback.append("‚úÖ –í–µ–∂–ª–∏–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ")
                    else:
                        feedback.append("‚ùå –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏ (—ë–ª–æ—á–∫–∏)
                    if '¬´' in bot_response and '¬ª' in bot_response:
                        professional_score += 1
                        feedback.append("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–∏—Ä–µ
                    if '‚Äî' in bot_response:
                        professional_score += 1
                        feedback.append("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ç–∏—Ä–µ")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–æ–≤—ã—Ö —Ñ—Ä–∞–∑
                    business_phrases = ['–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', '–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å', '—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç']
                    if any(phrase in bot_response.lower() for phrase in business_phrases):
                        professional_score += 1
                        feedback.append("‚úÖ –î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å")
                    else:
                        feedback.append("‚ùå –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å")
                    
                    print(f"–û–¶–ï–ù–ö–ê –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò: {professional_score}/5")
                    for fb in feedback:
                        print(f"  {fb}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    
                print()
        else:
            print("‚ùå –£ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–Ω–∞–Ω–∏–π")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    finally:
        db.close()

if __name__ == "__main__":
    test_bot_knowledge()