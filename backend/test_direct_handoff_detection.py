#!/usr/bin/env python3
"""
–¢–µ—Å—Ç handoff detection –Ω–∞–ø—Ä—è–º—É—é - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä
"""
import sys
import os
from pathlib import Path

# Add the backend path
backend_path = Path(__file__).parent
sys.path.insert(0, str(backend_path))

# Test direct handoff detection
def test_direct_handoff_detection():
    print("üß™ –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û HANDOFF DETECTION")
    print("=" * 60)
    
    try:
        from services.improved_handoff_detector import ImprovedHandoffDetector
        
        detector = ImprovedHandoffDetector()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        test_phrases = [
            "–æ–ø–µ—Ä–∞—Ç–æ—Ä",
            "–∞ —á–µ–ª–æ–≤–µ–∫–∞ –º–æ–∂–Ω–æ –º–Ω–µ?",
            "–º–æ–¥–µ—à—å –º–µ–Ω—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞?",
            "–ø—Ä–∏–≤–µ—Ç",  # should NOT trigger handoff
            "—Å–ø–∞—Å–∏–±–æ"  # should NOT trigger handoff
        ]
        
        for phrase in test_phrases:
            should_handoff, reason, details = detector.should_request_handoff(
                user_text=phrase
            )
            
            print(f"üìù –¢–µ–∫—Å—Ç: '{phrase}'")
            print(f"   Should handoff: {should_handoff}")
            print(f"   Reason: {reason}")
            print(f"   Score: {details.get('total_score', 0):.2f}")
            print(f"   Patterns: {[p['description'] for p in details.get('matched_patterns', [])]}")
            print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_direct_handoff_detection()
    if success:
        print("‚úÖ DIRECT HANDOFF DETECTION TEST COMPLETED")
    else:
        print("‚ùå DIRECT HANDOFF DETECTION TEST FAILED")