#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã—Ö –ø—Ä–æ–∫—Å–∏
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
from dotenv import load_dotenv
load_dotenv("../.env")

from ai.proxy_manager import get_proxy_manager
from ai.ai_providers import OpenAIProvider
from ai.proxy_manager import ProxyConfig, CircuitState
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_proxy_system():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–∫—Å–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã—Ö –ø—Ä–æ–∫—Å–∏")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º ProxyManager
    print("\n1. üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ProxyManager")
    try:
        proxy_manager = get_proxy_manager()
        print(f"‚úÖ ProxyManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(proxy_manager.proxies)} –ø—Ä–æ–∫—Å–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = proxy_manager.get_proxy_metrics()
        print(f"   üìà –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: {metrics['total_proxies']}")
        print(f"   üìà –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: {metrics['available_proxies']}")
        print(f"   üìà –í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {metrics['all_proxies_down']}")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø—Ä–æ–∫—Å–∏
        for proxy_info in metrics['proxies']:
            print(f"   üîó –ü—Ä–æ–∫—Å–∏ '{proxy_info['name']}': {proxy_info['circuit_state']} (–ó–∞–ø—Ä–æ—Å–æ–≤: {proxy_info['requests_total']})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ProxyManager: {e}")
        return False
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–∫—Å–∏
    print("\n2. üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∫—Å–∏")
    try:
        available_proxy = proxy_manager.get_available_proxy()
        if available_proxy:
            print(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–∫—Å–∏: {available_proxy.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {available_proxy.priority})")
        else:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        return False
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAIProvider (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API)
    print("\n3. ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAIProvider")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å API –∫–ª—é—á–æ–º –∏–∑ env
        api_key = os.getenv('OPENAI_API_KEY', 'test-key')
        openai_provider = OpenAIProvider(api_key=api_key)
        print(f"‚úÖ OpenAIProvider –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ProxyManager —Å {len(openai_provider.proxy_manager.proxies)} –ø—Ä–æ–∫—Å–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAIProvider: {e}")
        return False
    
    # 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ–∫—Å–∏
    print("\n4. üö´ –°–∏–º—É–ª–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É primary –ø—Ä–æ–∫—Å–∏")
    try:
        # –ù–∞—Ö–æ–¥–∏–º primary –ø—Ä–æ–∫—Å–∏
        primary_proxy = None
        for proxy in proxy_manager.proxies:
            if proxy.name == "primary":
                primary_proxy = proxy
                break
        
        if primary_proxy:
            print(f"   –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ primary –ø—Ä–æ–∫—Å–∏: {primary_proxy.circuit_state}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            primary_proxy.circuit_state = CircuitState.OPEN
            primary_proxy.failure_count = 5
            print(f"   üî¥ Primary –ø—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (—Å–∏–º—É–ª—è—Ü–∏—è)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ secondary
            available_proxy = proxy_manager.get_available_proxy()
            if available_proxy and available_proxy.name == "secondary":
                print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∞—Å—å –Ω–∞ secondary –ø—Ä–æ–∫—Å–∏")
            else:
                print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∞—Å—å –Ω–∞ secondary –ø—Ä–æ–∫—Å–∏")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            primary_proxy.circuit_state = CircuitState.CLOSED
            primary_proxy.failure_count = 0
            print(f"   üü¢ Primary –ø—Ä–æ–∫—Å–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ùå Primary –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        return False
    
    # 5. –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    print("\n5. üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    try:
        final_metrics = proxy_manager.get_proxy_metrics()
        print(f"   üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {'Healthy' if not final_metrics['all_proxies_down'] else 'Unhealthy'}")
        print(f"   üìä –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: {final_metrics['available_proxies']}/{final_metrics['total_proxies']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã—Ö –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

if __name__ == "__main__":
    result = asyncio.run(test_proxy_system())
    sys.exit(0 if result else 1)