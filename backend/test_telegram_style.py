#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ò–õ–Ø TELEGRAM –ë–û–¢–ê

–≠–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram –±–æ—Ç—É —á–µ—Ä–µ–∑ API /bot/ai-response
–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è.
"""

import requests
import json

def test_telegram_bot_style():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º Telegram)
    test_cases = [
        {"message": "–ø—Ä–∏–≤–µ—Ç", "expected": "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"},
        {"message": "–∫—Ç–æ —Ç—ã?", "expected": "–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"},
        {"message": "–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã?", "expected": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"},
        {"message": "—á—Ç–æ –≤—ã —É–º–µ–µ—Ç–µ?", "expected": "—Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥"},
        {"message": "—Å–ø–∞—Å–∏–±–æ", "expected": "–≤–µ–∂–ª–∏–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"}
    ]
    
    api_url = "http://localhost:8000/api/bot/ai-response"
    
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ò–õ–Ø TELEGRAM –ë–û–¢–ê")
    print("=" * 60)
    print(f"API: {api_url}")
    print(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: Dan (ID=67)")
    print()
    
    for i, test_case in enumerate(test_cases, 1):
        message = test_case["message"]
        expected = test_case["expected"]
        
        print(f"{i}. –¢–ï–°–¢: '{message}' (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected})")
        print("-" * 50)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
        payload = {
            "user_id": 1,  # admin@example.com
            "message": message,
            "assistant_id": 67,  # Dan
            "dialog_id": None
        }
        
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
            response = requests.post(api_url, json=payload, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                bot_response = data.get("response", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
                
                print(f"–û–¢–í–ï–¢: {bot_response}")
                
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                score = analyze_professionalism(bot_response)
                print(f"–û–¶–ï–ù–ö–ê –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò: {score['score']}/5")
                
                for feedback in score['feedback']:
                    print(f"  {feedback}")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
        print()

def analyze_professionalism(text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞"""
    score = 0
    feedback = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–º–∞–π–ª–∏–∫–æ–≤
    emojis = ['üòä', 'üöÄ', '‚ú®', 'üéì', 'üõ†Ô∏è', 'üí°', 'üî•', '‚ö°', 'üéØ', 'üåü', 'üëã', 'ü§ñ']
    if not any(emoji in text for emoji in emojis):
        score += 1
        feedback.append("‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–º–∞–π–ª–∏–∫–∏ –∏ —ç–º–æ–¥–∑–∏")
    else:
        feedback.append("‚ùå –°–æ–¥–µ—Ä–∂–∏—Ç —Å–º–∞–π–ª–∏–∫–∏ –∏–ª–∏ —ç–º–æ–¥–∑–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–∂–ª–∏–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
    polite_forms = ['–≤—ã', '–≤–∞—Å', '–≤–∞–º', '–≤–∞—à', '–≤–∞—à–∞', '–≤–∞—à–µ', '–≤–∞—à–∏']
    if any(form in text.lower() for form in polite_forms):
        score += 1
        feedback.append("‚úÖ –í–µ–∂–ª–∏–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ '–í—ã'")
    else:
        feedback.append("‚ùå –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
    if '¬´' in text and '¬ª' in text:
        score += 1
        feedback.append("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏-—ë–ª–æ—á–∫–∏")
    
    if '‚Äî' in text:
        score += 1
        feedback.append("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–æ–≤—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
    business_terms = [
        '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', '–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å', 
        '—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '—É—Å–ª—É–≥–∏',
        '–∫–æ–º–ø–∞–Ω–∏—è', '—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', '—Ä–µ—à–µ–Ω–∏–µ'
    ]
    
    if any(term in text.lower() for term in business_terms):
        score += 1
        feedback.append("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–ª–æ–≤—É—é –ª–µ–∫—Å–∏–∫—É")
    else:
        feedback.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–ª–æ–≤–∞—è –ª–µ–∫—Å–∏–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    if '‚Ä¢' in text or '-' in text or any(str(i) in text for i in range(1, 6)):
        feedback.append("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–∞—á–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–ª–∏—à–Ω—é—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    emotional_words = ['–æ–±–æ–∂–∞—é', '–∑–¥–æ—Ä–æ–≤–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å–Ω–æ', '–∫—Ä—É—Ç–æ']
    if not any(word in text.lower() for word in emotional_words):
        feedback.append("‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–ª–∏—à–Ω—è—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
    else:
        feedback.append("‚ùå –ò–∑–ª–∏—à–Ω—è—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
    
    return {"score": score, "feedback": feedback}

if __name__ == "__main__":
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    input()
    
    test_telegram_bot_style()