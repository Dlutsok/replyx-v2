#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –±–æ—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –≤—ã–¥–∞—é—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.connection import get_db
from database import models
from api.bots import get_bot_ai_response
from sqlalchemy.orm import Session

def test_working_hours_response():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –±–æ—Ç –Ω–µ –≤—ã–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã")
    print("=" * 60)
    
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        user = db.query(models.User).first()
        if not user:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
        assistant = db.query(models.Assistant).filter(
            models.Assistant.user_id == user.id,
            models.Assistant.is_active == True
        ).first()
        
        if not assistant:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
        print(f"üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user.email}")
        print(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistant.name}")
        print(f"üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {assistant.system_prompt[:100]}...")
        print()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        test_questions = [
            "–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã?",
            "–ö–æ–≥–¥–∞ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?",
            "–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã?",
            "–° –∫–∞–∫–æ–≥–æ –¥–æ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è?",
            "–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ—Å—å –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç–µ—Å—å?",
            "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏"
        ]
        
        suspicious_phrases = [
            "9:00", "18:00", "09:00",
            "–ø–Ω-–ø—Ç", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–ø—è—Ç–Ω–∏—Ü–∞",
            "—Å 9 –¥–æ 18", "9 –¥–æ 18",
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É"
        ]
        
        results = {
            'total_tests': len(test_questions),
            'passed': 0,
            'failed': 0,
            'issues': []
        }
        
        for i, question in enumerate(test_questions, 1):
            print(f"üìã –¢–µ—Å—Ç {i}/{len(test_questions)}: '{question}'")
            
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                request_data = {
                    'user_id': user.id,
                    'message': question,
                    'assistant_id': assistant.id
                }
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
                response = get_bot_ai_response(request_data, db)
                
                if 'error' in response:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {response['error']}")
                    results['issues'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ '{question}': {response['error']}")
                    continue
                
                bot_response = response.get('response', '')
                print(f"   ü§ñ –û—Ç–≤–µ—Ç: {bot_response[:150]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑
                found_suspicious = []
                for phrase in suspicious_phrases:
                    if phrase.lower() in bot_response.lower():
                        found_suspicious.append(phrase)
                
                if found_suspicious:
                    print(f"   ‚ùå –ù–ê–ô–î–ï–ù–´ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –§–†–ê–ó–´: {found_suspicious}")
                    results['failed'] += 1
                    results['issues'].append(f"–í –æ—Ç–≤–µ—Ç–µ –Ω–∞ '{question}' –Ω–∞–π–¥–µ–Ω—ã —Ñ—Ä–∞–∑—ã: {found_suspicious}")
                else:
                    print(f"   ‚úÖ –û—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π - –Ω–µ—Ç —Ö–∞—Ä–¥–∫–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã")
                    results['passed'] += 1
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
                results['failed'] += 1
                results['issues'].append(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ '{question}': {str(e)}")
            
            print()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {results['total_tests']}")
        print(f"   ‚úÖ –ü—Ä–æ—à–ª–∏: {results['passed']}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {results['failed']}")
        
        if results['issues']:
            print("\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in results['issues']:
                print(f"   ‚Ä¢ {issue}")
        
        success_rate = (results['passed'] / results['total_tests']) * 100
        print(f"\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_rate:.1f}%")
        
        if results['failed'] == 0:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –•–∞—Ä–¥–∫–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            return True
        else:
            print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: {results['failed']} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞.")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        return False
    finally:
        db.close()

if __name__ == "__main__":
    test_working_hours_response()