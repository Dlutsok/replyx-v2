"""
–§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –±–æ—Ç–∞ –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

from database import models
from sqlalchemy.orm import Session
import requests
import logging
from core.app_config import BOT_SERVICE_URL

logger = logging.getLogger(__name__)

def full_bot_cleanup(user_id: int, assistant_id: int = None, db: Session = None):
    """
    –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        assistant_id: ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–µ—Å–ª–∏ None - –æ—á–∏—â–∞–µ—Ç –≤—Å–µ—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    from cache.redis_cache import chatai_cache
    from services.embeddings_service import embeddings_service
    
    if not db:
        from database.connection import SessionLocal
        db = SessionLocal()
        should_close = True
    else:
        should_close = False
    
    try:
        logger.info(f"üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç {assistant_id}")
        
        # 1. –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chatai_cache.invalidate_user_cache(user_id)
        
        if assistant_id:
            # –û—á–∏—â–∞–µ–º –∫—ç—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            chatai_cache.invalidate_assistant_cache(assistant_id)
            chatai_cache.invalidate_knowledge_cache(user_id, assistant_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∑–Ω–∞–Ω–∏–π
            assistant = db.query(models.Assistant).filter(
                models.Assistant.id == assistant_id
            ).first()
            if assistant:
                assistant.knowledge_version = (assistant.knowledge_version or 0) + 1
                db.commit()
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            bot_instances = db.query(models.BotInstance).filter(
                models.BotInstance.assistant_id == assistant_id,
                models.BotInstance.is_active == True
            ).all()
            
        else:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            assistants = db.query(models.Assistant).filter(
                models.Assistant.user_id == user_id
            ).all()
            
            for assistant in assistants:
                chatai_cache.invalidate_assistant_cache(assistant.id)
                chatai_cache.invalidate_knowledge_cache(user_id, assistant.id)
                assistant.knowledge_version = (assistant.knowledge_version or 0) + 1
            
            db.commit()
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot_instances = db.query(models.BotInstance).filter(
                models.BotInstance.user_id == user_id,
                models.BotInstance.is_active == True
            ).all()
        
        # 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–æ–≤
        if bot_instances:
            bot_ids = [bot.id for bot in bot_instances]
            
            try:
                # –û—á–∏—â–∞–µ–º –∫—ç—à bot manager (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ–ª–≥–æ)
                requests.post(
                    f"{BOT_SERVICE_URL}/clear-cache",
                    json={'bot_ids': bot_ids},
                    timeout=1
                )
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–æ–≤ (–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç)
                requests.post(
                    f"{BOT_SERVICE_URL}/hot-reload-bots",
                    json={'bot_ids': bot_ids},
                    timeout=1
                )
                logger.info(f"‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(bot_ids)} –±–æ—Ç–æ–≤ (async, –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç)")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤ (–ø—Ä–æ–ø—É—â–µ–Ω–æ): {e}")
        
        logger.info("‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    finally:
        if should_close:
            db.close()

def enhanced_document_deletion(doc_id: int, user_id: int, db: Session):
    """
    –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        doc_id: ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    from services.embeddings_service import embeddings_service
    from cache.redis_cache import chatai_cache
    
    logger.info(f"üóëÔ∏è  –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_id}")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        doc = db.query(models.Document).filter(
            models.Document.id == doc_id,
            models.Document.user_id == user_id
        ).first()
        
        if not doc:
            logger.warning(f"–î–æ–∫—É–º–µ–Ω—Ç {doc_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∑–Ω–∞–Ω–∏–π
        deleted_knowledge = db.query(models.UserKnowledge).filter(
            models.UserKnowledge.doc_id == doc_id
        ).delete(synchronize_session=False)
        
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–Ω–∞–Ω–∏–π: {deleted_knowledge}")
        
        # 3. –£–¥–∞–ª—è–µ–º –≤—Å–µ embeddings –¥–æ–∫—É–º–µ–Ω—Ç–∞
        deleted_embeddings = embeddings_service.delete_document_embeddings(doc_id, db)
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ embeddings: {deleted_embeddings}")
        
        # 4. –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
        filename = doc.filename
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–∑ S3
            from services.s3_storage_service import get_s3_service
            s3_service = get_s3_service()
            if s3_service:
                # –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –ø–∞–ø–∫–∏ documents
                object_key = s3_service.get_user_object_key(user_id, filename, "documents")
                s3_deleted = s3_service.delete_file(object_key)
                if s3_deleted:
                    logger.info(f"–§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ S3: {object_key}")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ S3: {object_key}")
            else:
                # Fallback: —É–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                from validators.file_validator import file_validator
                import os
                local_path = file_validator.get_safe_upload_path(user_id, filename)
                if os.path.exists(local_path):
                    os.remove(local_path)
                    logger.info(f"–§–∞–π–ª —É–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {local_path}")
                else:
                    logger.warning(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")

        # 5. –£–¥–∞–ª—è–µ–º —Å–∞–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –ë–î
        db.delete(doc)
        
        # 6. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
        assistants = db.query(models.Assistant).filter(
            models.Assistant.user_id == user_id
        ).all()
        
        # 7. –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ –∑–Ω–∞–Ω–∏–π –≤—Å–µ—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
        for assistant in assistants:
            embeddings_service.increment_knowledge_version(assistant.id, db)
        
        # 8. –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫—ç—à–µ–π
        chatai_cache.invalidate_user_cache(user_id)
        for assistant in assistants:
            chatai_cache.invalidate_assistant_cache(assistant.id)
            chatai_cache.invalidate_knowledge_cache(user_id, assistant.id)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫—ç—à–µ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            try:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –∑–Ω–∞–Ω–∏–π –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫—ç—à–µ–π
                assistant.knowledge_version = (assistant.knowledge_version or 0) + 10
                db.commit()
                
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫—ç—à–∏
                chatai_cache.clear_pattern(f"assistant:{assistant.id}:*")
                chatai_cache.clear_pattern(f"knowledge:{user_id}:{assistant.id}:*")
                chatai_cache.clear_pattern(f"embeddings:{assistant.id}:*")
                
                logger.info(f"–û—á–∏—â–µ–Ω—ã –≤—Å–µ –∫—ç—à–∏ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant.id}")
            except Exception as e:
                logger.warning(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant.id} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
        
        # –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫—ç—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            chatai_cache.clear_pattern(f"user:{user_id}:*")
            chatai_cache.clear_pattern(f"documents:{user_id}:*")
            logger.info(f"–û—á–∏—â–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫—ç—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.warning(f"–û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫—ç—à–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
        
        # 9. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot_instances = db.query(models.BotInstance).filter(
            models.BotInstance.user_id == user_id,
            models.BotInstance.is_active == True
        ).all()
        
        if bot_instances:
            bot_ids = [bot.id for bot in bot_instances]
            
            try:
                requests.post(
                    f"{BOT_SERVICE_URL}/clear-cache",
                    json={'bot_ids': bot_ids},
                    timeout=1
                )
                requests.post(
                    f"{BOT_SERVICE_URL}/hot-reload-bots",
                    json={'bot_ids': bot_ids},
                    timeout=1
                )
                logger.info(f"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(bot_ids)} –±–æ—Ç–æ–≤ (async, –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç)")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤ (–ø—Ä–æ–ø—É—â–µ–Ω–æ): {e}")
        
        # 9. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º PROJECT_ROOT/uploads)
        import os
        try:
            from core.app_config import PROJECT_ROOT  # type: ignore
            base_dir = os.path.join(str(PROJECT_ROOT), "uploads")
        except Exception:
            base_dir = "uploads"
        file_path = os.path.join(base_dir, str(user_id), doc.filename)
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                logger.info(f"–§–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        db.commit()
        logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {doc.filename} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        db.rollback()
        return False

def delete_assistant_files(user_id: int, assistant_id: int, db: Session) -> int:
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É."""
    import os
    try:
        from core.app_config import PROJECT_ROOT  # type: ignore
        base_dir = os.path.join(str(PROJECT_ROOT), "uploads")
    except Exception:
        base_dir = "uploads"
    
    deleted = 0
    doc_ids = [row[0] for row in db.query(models.UserKnowledge.doc_id).filter(
        models.UserKnowledge.user_id == user_id,
        models.UserKnowledge.assistant_id == assistant_id
    ).distinct().all()]
    
    if not doc_ids:
        return 0
    
    docs = db.query(models.Document).filter(
        models.Document.user_id == user_id,
        models.Document.id.in_(doc_ids)
    ).all()
    
    for d in docs:
        path = os.path.join(base_dir, str(user_id), d.filename)
        if os.path.exists(path):
            try:
                os.remove(path)
                deleted += 1
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}: {path}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {path}: {e}")
    return deleted

def enhanced_knowledge_deletion(knowledge_id: int, user_id: int, db: Session):
    """
    –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–Ω–∞–Ω–∏–π —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
    
    Args:
        knowledge_id: ID –∑–∞–ø–∏—Å–∏ –∑–Ω–∞–Ω–∏–π
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    from cache.redis_cache import chatai_cache
    from services.embeddings_service import embeddings_service
    
    logger.info(f"üóëÔ∏è  –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏—è {knowledge_id}")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∑–Ω–∞–Ω–∏—è
        knowledge = db.query(models.UserKnowledge).filter(
            models.UserKnowledge.id == knowledge_id,
            models.UserKnowledge.user_id == user_id
        ).first()
        
        if not knowledge:
            logger.warning(f"–ó–Ω–∞–Ω–∏–µ {knowledge_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        doc_id = knowledge.doc_id
        assistant_id = knowledge.assistant_id
        
        # 2. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∑–Ω–∞–Ω–∏—è
        db.delete(knowledge)
        
        # 3. –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞–Ω–∏–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞, —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ embeddings
        remaining_knowledge = db.query(models.UserKnowledge).filter(
            models.UserKnowledge.doc_id == doc_id,
            models.UserKnowledge.id != knowledge_id
        ).count()
        
        if remaining_knowledge == 0:
            deleted_embeddings = embeddings_service.delete_document_embeddings(doc_id, db)
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ embeddings –¥–æ–∫—É–º–µ–Ω—Ç–∞: {deleted_embeddings}")
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ –∑–Ω–∞–Ω–∏–π
        if assistant_id:
            embeddings_service.increment_knowledge_version(assistant_id, db)
            chatai_cache.invalidate_assistant_cache(assistant_id)
            chatai_cache.invalidate_knowledge_cache(user_id, assistant_id)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            assistants = db.query(models.Assistant).filter(
                models.Assistant.user_id == user_id
            ).all()
            
            for assistant in assistants:
                embeddings_service.increment_knowledge_version(assistant.id, db)
                chatai_cache.invalidate_assistant_cache(assistant.id)
                chatai_cache.invalidate_knowledge_cache(user_id, assistant.id)
        
        # 5. –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chatai_cache.invalidate_user_cache(user_id)
        
        # 6. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–æ–≤
        bot_instances = db.query(models.BotInstance).filter(
            models.BotInstance.user_id == user_id,
            models.BotInstance.is_active == True
        ).all()
        
        if bot_instances:
            bot_ids = [bot.id for bot in bot_instances]
            
            try:
                requests.post(
                    f"{BOT_SERVICE_URL}/hot-reload-bots",
                    json={'bot_ids': bot_ids},
                    timeout=1
                )
                logger.info(f"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(bot_ids)} –±–æ—Ç–æ–≤ (async, –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç)")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤ (–ø—Ä–æ–ø—É—â–µ–Ω–æ): {e}")
        
        db.commit()
        logger.info("‚úÖ –ó–Ω–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è: {e}")
        db.rollback()
        return False