/**
 * üì° –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ú–ï–ñ–ü–†–û–¶–ï–°–°–ù–û–ì–û –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø (IPC)
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –Ω–∞–¥–µ–∂–Ω—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é –º–µ–∂–¥—É –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏ –≤–æ—Ä–∫–µ—Ä–∞–º–∏
 */

class IPCManager {
    constructor() {
        this.messageHandlers = new Map();
        this.responseCallbacks = new Map();
        this.messageId = 0;
        
        this.setupProcessHandlers();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞
     */
    setupProcessHandlers() {
        process.on('message', (message) => {
            this.handleMessage(message);
        });
        
        process.on('disconnect', () => {
            console.log('üîå IPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');
            process.exit(0);
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    handleMessage(message) {
        const { type, messageId, data, error } = message;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
        if (messageId && this.responseCallbacks.has(messageId)) {
            const callback = this.responseCallbacks.get(messageId);
            this.responseCallbacks.delete(messageId);
            
            if (error) {
                callback.reject(new Error(error));
            } else {
                callback.resolve(data);
            }
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const handler = this.messageHandlers.get(type);
        if (handler) {
            try {
                const result = handler(data);
                
                // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                if (messageId) {
                    this.sendResponse(messageId, result);
                }
            } catch (error) {
                if (messageId) {
                    this.sendError(messageId, error.message);
                }
            }
        }
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    on(type, handler) {
        this.messageHandlers.set(type, handler);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    send(type, data) {
        if (process.send) {
            process.send({
                type: type,
                data: data,
                timestamp: Date.now(),
                pid: process.pid
            });
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞
     */
    request(type, data, timeout = 30000) {
        return new Promise((resolve, reject) => {
            if (!process.send) {
                reject(new Error('IPC –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω'));
                return;
            }
            
            const messageId = ++this.messageId;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback
            this.responseCallbacks.set(messageId, { resolve, reject });
            
            // –¢–∞–π–º–∞—É—Ç
            setTimeout(() => {
                if (this.responseCallbacks.has(messageId)) {
                    this.responseCallbacks.delete(messageId);
                    reject(new Error(`IPC request timeout: ${type}`));
                }
            }, timeout);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            process.send({
                type: type,
                messageId: messageId,
                data: data,
                timestamp: Date.now(),
                pid: process.pid
            });
        });
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å
     */
    sendResponse(messageId, data) {
        if (process.send) {
            process.send({
                type: 'response',
                messageId: messageId,
                data: data,
                timestamp: Date.now(),
                pid: process.pid
            });
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
     */
    sendError(messageId, error) {
        if (process.send) {
            process.send({
                type: 'response',
                messageId: messageId,
                error: error,
                timestamp: Date.now(),
                pid: process.pid
            });
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞
     */
    log(level, message, meta = {}) {
        this.send('log', {
            level: level,
            message: message,
            meta: meta
        });
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫
     */
    metrics(metrics) {
        this.send('metrics', metrics);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat
     */
    heartbeat(data = {}) {
        this.send('heartbeat', {
            timestamp: Date.now(),
            uptime: process.uptime() * 1000,
            memoryUsage: process.memoryUsage(),
            ...data
        });
    }
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è IPC —Å–æ–æ–±—â–µ–Ω–∏–π
 */
class IPCFormatter {
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
     */
    static command(command, data = {}) {
        return {
            type: 'command',
            command: command,
            data: data,
            timestamp: Date.now()
        };
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     */
    static event(event, data = {}) {
        return {
            type: 'event',
            event: event,
            data: data,
            timestamp: Date.now()
        };
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    static status(status, data = {}) {
        return {
            type: 'status',
            status: status,
            data: data,
            timestamp: Date.now()
        };
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
     */
    static error(error, context = {}) {
        return {
            type: 'error',
            error: {
                message: error.message || error,
                stack: error.stack,
                code: error.code
            },
            context: context,
            timestamp: Date.now()
        };
    }
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
 */
class IPCQueue {
    constructor(maxSize = 1000) {
        this.queue = [];
        this.maxSize = maxSize;
        this.processing = false;
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
     */
    enqueue(message) {
        if (this.queue.length >= this.maxSize) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            this.queue.shift();
        }
        
        this.queue.push({
            ...message,
            queuedAt: Date.now()
        });
        
        this.processQueue();
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
     */
    async processQueue() {
        if (this.processing || this.queue.length === 0) {
            return;
        }
        
        this.processing = true;
        
        while (this.queue.length > 0) {
            const message = this.queue.shift();
            
            try {
                if (process.send) {
                    process.send(message);
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await new Promise(resolve => setTimeout(resolve, 1));
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ IPC —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
                this.queue.unshift(message);
                break;
            }
        }
        
        this.processing = false;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
     */
    size() {
        return this.queue.length;
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
     */
    clear() {
        this.queue = [];
    }
}

module.exports = {
    IPCManager,
    IPCFormatter,
    IPCQueue
}; 