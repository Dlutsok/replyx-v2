#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ email –≤ Receipt –¥–ª—è –∫–∞—Å—Å–æ–≤–æ–≥–æ —á–µ–∫–∞
"""

import sys
import os
sys.path.append('backend')

from database.connection import get_db
from database.models import User, Payment
from sqlalchemy.orm import Session

def check_user_emails():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ email —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("=== –ü–†–û–í–ï–†–ö–ê EMAIL –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===")
    
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).all()
        
        print(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(users)}")
        print()
        
        users_with_email = 0
        users_without_email = 0
        
        for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            if user.email and user.email.strip():
                users_with_email += 1
                print(f"‚úÖ ID {user.id}: {user.email} (—Å–æ–∑–¥–∞–Ω: {user.created_at.strftime('%Y-%m-%d')})")
            else:
                users_without_email += 1
                print(f"‚ùå ID {user.id}: EMAIL –û–¢–°–£–¢–°–¢–í–£–ï–¢ (—Å–æ–∑–¥–∞–Ω: {user.created_at.strftime('%Y-%m-%d')})")
        
        print(f"\n–ò—Ç–æ–≥–æ:")
        print(f"- –° email: {users_with_email}")
        print(f"- –ë–µ–∑ email: {users_without_email}")
        
        if users_without_email > 0:
            print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –£ {users_without_email} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email!")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    finally:
        db.close()

def check_recent_payments():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –∏ –∏—Ö customer_email"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –ü–õ–ê–¢–ï–ñ–ï–ô ===")
    
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–ª–∞—Ç–µ–∂–µ–π
        payments = db.query(Payment).order_by(Payment.created_at.desc()).limit(10).all()
        
        print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:")
        print()
        
        for payment in payments:
            user = db.query(User).filter(User.id == payment.user_id).first()
            
            print(f"–ü–ª–∞—Ç–µ–∂ {payment.order_id}:")
            print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {payment.user_id}")
            print(f"  - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.email if user else '–ù–ï –ù–ê–ô–î–ï–ù'}")
            print(f"  - customer_email –≤ –ø–ª–∞—Ç–µ–∂–µ: {payment.customer_email}")
            print(f"  - –°—Ç–∞—Ç—É—Å: {payment.status}")
            print(f"  - –°–æ–∑–¥–∞–Ω: {payment.created_at}")
            print()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
    finally:
        db.close()

def analyze_email_logic():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–¥–∞—á–∏ email"""
    print("=== –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –ü–ï–†–ï–î–ê–ß–ò EMAIL ===")
    print()
    
    # –ß–∏—Ç–∞–µ–º –∫–æ–¥
    with open('backend/api/tinkoff_payments.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    lines = content.split('\n')
    
    print("–ö–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞:")
    print()
    
    for i, line in enumerate(lines, 1):
        line_clean = line.strip()
        if any(keyword in line_clean for keyword in ['email: str = Form', 'user_email =', 'if email:', 'Email\':', 'logger.warning']):
            print(f"–°—Ç—Ä–æ–∫–∞ {i}: {line_clean}")
    
    print()
    print("=== –í–´–í–û–î–´ ===")
    print("1. –í create_payment email –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π: email: str = Form(None)")
    print("2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback: user_email = email or current_user.email") 
    print("3. Receipt —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ email –Ω–µ –ø—É—Å—Ç–æ–π: if email:")
    print("4. –ï—Å—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: logger.warning –µ—Å–ª–∏ email –ø—É—Å—Ç–æ–π")

if __name__ == "__main__":
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–î–ê–ß–ò EMAIL –î–õ–Ø –ö–ê–°–°–û–í–û–ì–û –ß–ï–ö–ê")
    print("=" * 60)
    
    check_user_emails()
    check_recent_payments() 
    analyze_email_logic()
    
    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend –Ω–∞ –Ω–∞–ª–∏—á–∏–µ '‚ö†Ô∏è –ù–µ—Ç email –¥–ª—è Receipt'")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω email –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ current_user.email –Ω–µ None –≤ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
