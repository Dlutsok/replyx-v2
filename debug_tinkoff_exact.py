#!/usr/bin/env python3
"""
–¢–æ—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å T-Bank API
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –∫–æ–¥–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
"""

import hashlib
import requests
import json
from datetime import datetime
import uuid
import os

# –î–∞–Ω–Ω—ã–µ –∏–∑ .env
TERMINAL_KEY = "1757348842151DEMO"
SECRET_KEY = "lczutIQhGoZoZrgW"
SANDBOX_URL = "https://rest-api-test.tinkoff.ru/v2/"

def our_normalize_value(value):
    """–ù–∞—à–∞ —Ç–µ–∫—É—â–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è"""
    if isinstance(value, bool):
        return 'true' if value else 'false'
    return str(value)

def our_calculate_signature(data: dict) -> str:
    """–ù–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏"""
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ –ø–æ–¥–ø–∏—Å–∏, –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ None
    items = [(k, v) for k, v in data.items() 
             if k not in ['token', 'Token'] and v is not None and str(v).strip() != '']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∫–∞–∫ Password
    items.append(('Password', SECRET_KEY))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º (ASCII —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)
    items.sort(key=lambda kv: kv[0])
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
    normalized_values = [our_normalize_value(v) for _, v in items]
    concatenated_string = ''.join(normalized_values)
    
    print(f"üîê –ù–ê–®–ê –ü–û–î–ü–ò–°–¨:")
    print(f"   –ö–ª—é—á–∏: {[k for k, _ in items if k != 'Password']}")
    print(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {normalized_values[:-1]}")  # –ë–µ–∑ –ø–∞—Ä–æ–ª—è
    print(f"   –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {len(concatenated_string)}")
    
    return hashlib.sha256(concatenated_string.encode('utf-8')).hexdigest()

def etalon_calculate_signature(data: dict) -> str:
    """–≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ T-Bank"""
    # –ò—Å–∫–ª—é—á–∞–µ–º Token, Receipt –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    items = []
    for k, v in data.items():
        if k in ['Token', 'Receipt']:  # Receipt –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è!
            continue
        if v is None or str(v).strip() == '':
            continue
        items.append((k, v))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    items.append(('Password', SECRET_KEY))
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    items.sort(key=lambda kv: kv[0])
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±—É–ª–µ–≤—ã—Ö
    normalized = []
    for _, v in items:
        if isinstance(v, bool):
            normalized.append('true' if v else 'false')
        else:
            normalized.append(str(v))
    
    concatenated = ''.join(normalized)
    
    print(f"üîê –≠–¢–ê–õ–û–ù–ù–ê–Ø –ü–û–î–ü–ò–°–¨:")
    print(f"   –ö–ª—é—á–∏: {[k for k, _ in items if k != 'Password']}")
    print(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {normalized[:-1]}")  # –ë–µ–∑ –ø–∞—Ä–æ–ª—è
    print(f"   –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {len(concatenated)}")
    
    return hashlib.sha256(concatenated.encode('utf-8')).hexdigest()

def test_minimal_request():
    """–¢–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–æ–ª–µ–π"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ 1: –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –ó–ê–ü–†–û–°")
    print("=" * 60)
    
    order_id = f"min_{int(datetime.utcnow().timestamp())}_{str(uuid.uuid4())[:8]}"
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    data = {
        'TerminalKey': TERMINAL_KEY,
        'Amount': 10000,  # 100 —Ä—É–±–ª–µ–π
        'OrderId': order_id,
        'Description': '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç'
    }
    
    print(f"üìã –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    
    # –ù–∞—à–∞ –ø–æ–¥–ø–∏—Å—å
    our_token = our_calculate_signature(data.copy())
    
    # –≠—Ç–∞–ª–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å
    etalon_token = etalon_calculate_signature(data.copy())
    
    print(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –ü–û–î–ü–ò–°–ï–ô:")
    print(f"   –ù–∞—à–∞:     {our_token}")
    print(f"   –≠—Ç–∞–ª–æ–Ω:   {etalon_token}")
    print(f"   –°–æ–≤–ø–∞–¥–∞—é—Ç: {'‚úÖ' if our_token == etalon_token else '‚ùå'}")
    
    # –ó–∞–ø—Ä–æ—Å –∫ API
    data['Token'] = our_token
    
    try:
        response = requests.post(
            f"{SANDBOX_URL}Init",
            json=data,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        print(f"\nüì° –û–¢–í–ï–¢ API:")
        print(f"   HTTP: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"   JSON: {json.dumps(result, ensure_ascii=False, indent=2)}")
            return result.get('Success', False)
        else:
            print(f"   –û—à–∏–±–∫–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"   –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_with_receipt():
    """–¢–µ—Å—Ç —Å Receipt –æ–±—ä–µ–∫—Ç–æ–º"""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢ 2: –° RECEIPT –û–ë–™–ï–ö–¢–û–ú")
    print("=" * 60)
    
    order_id = f"receipt_{int(datetime.utcnow().timestamp())}_{str(uuid.uuid4())[:8]}"
    
    # –î–∞–Ω–Ω—ã–µ —Å Receipt
    data = {
        'TerminalKey': TERMINAL_KEY,
        'Amount': 10000,
        'OrderId': order_id,
        'Description': '–¢–µ—Å—Ç —Å —á–µ–∫–æ–º',
        'Receipt': {
            'Email': 'test@example.com',
            'Taxation': 'usn_income',
            'Items': [{
                'Name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
                'Price': 10000,
                'Quantity': 1,
                'Amount': 10000,
                'Tax': 'none'
            }]
        }
    }
    
    print(f"üìã –î–∞–Ω–Ω—ã–µ —Å Receipt:")
    print(json.dumps(data, ensure_ascii=False, indent=2))
    
    # –ù–∞—à–∞ –ø–æ–¥–ø–∏—Å—å (–Ω–µ –∏—Å–∫–ª—é—á–∞–µ—Ç Receipt)
    our_token = our_calculate_signature(data.copy())
    
    # –≠—Ç–∞–ª–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å (–∏—Å–∫–ª—é—á–∞–µ—Ç Receipt)
    etalon_token = etalon_calculate_signature(data.copy())
    
    print(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –ü–û–î–ü–ò–°–ï–ô –° RECEIPT:")
    print(f"   –ù–∞—à–∞ (—Å Receipt):    {our_token}")
    print(f"   –≠—Ç–∞–ª–æ–Ω (–±–µ–∑ Receipt): {etalon_token}")
    print(f"   –°–æ–≤–ø–∞–¥–∞—é—Ç: {'‚úÖ' if our_token == etalon_token else '‚ùå'}")
    
    # –¢–µ—Å—Ç —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
    data['Token'] = etalon_token
    
    try:
        response = requests.post(
            f"{SANDBOX_URL}Init",
            json=data,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        print(f"\nüì° –û–¢–í–ï–¢ API –° –≠–¢–ê–õ–û–ù–ù–û–ô –ü–û–î–ü–ò–°–¨–Æ:")
        print(f"   HTTP: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"   JSON: {json.dumps(result, ensure_ascii=False, indent=2)}")
            return result.get('Success', False)
        else:
            print(f"   –û—à–∏–±–∫–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"   –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    print(f"üöÄ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê T-BANK API")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîë Terminal: {TERMINAL_KEY}")
    print(f"üåê URL: {SANDBOX_URL}")
    print()
    
    # –¢–µ—Å—Ç 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    min_works = test_minimal_request()
    
    # –¢–µ—Å—Ç 2: –° Receipt
    receipt_works = test_with_receipt()
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
    print("=" * 60)
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {'‚úÖ' if min_works else '‚ùå'}")
    print(f"–° Receipt –æ–±—ä–µ–∫—Ç–æ–º:  {'‚úÖ' if receipt_works else '‚ùå'}")
    
    if not min_works and not receipt_works:
        print("\nüö® –ü–†–û–ë–õ–ï–ú–ê: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–æ–≤—Å–µ–º")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ T-Bank Business")
    elif min_works and not receipt_works:
        print("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: Receipt –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ Receipt –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
    elif receipt_works:
        print("\nüéâ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢: Receipt –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")

if __name__ == "__main__":
    main()