import { useState, useEffect, useCallback, useRef } from 'react';
import { createPortal } from 'react-dom';
import { FiMessageCircle, FiGlobe } from 'react-icons/fi';
import MessageHistory from './MessageHistory';
import DialogFooter from './DialogFooter';
import styles from './DialogModal.module.css';
import { API_URL } from '../../config/api';
import { useNotifications } from '../../hooks/useNotifications';

const DialogModal = ({ 
  isOpen, 
  onClose, 
  dialogId, 
  initialDialog = null 
}) => {
  const [dialog, setDialog] = useState(initialDialog);
  const [messages, setMessages] = useState([]);
  const [isTakenOver, setIsTakenOver] = useState(false);
  const [loading, setLoading] = useState(false);
  const [messagesLoading, setMessagesLoading] = useState(false);
  const [takeoverLoading, setTakeoverLoading] = useState(false);
  const [sendLoading, setSendLoading] = useState(false);
  const [error, setError] = useState('');
  const [messageError, setMessageError] = useState('');
  const [wsConnected, setWsConnected] = useState(false);
  const [wsError, setWsError] = useState(null);
  const [useFallback, setUseFallback] = useState(false);
  const { showError } = useNotifications();
  
  const websocketRef = useRef(null);
  const reconnectTimeoutRef = useRef(null);
  const reconnectAttemptsRef = useRef(0);
  const pollingIntervalRef = useRef(null);
  const maxReconnectAttempts = 5;
  const fallbackPollingInterval = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è fallback polling

  const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;

  // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  const connectWebSocket = useCallback(() => {
    if (!dialogId || !token || !isOpen) return;

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (websocketRef.current) {
      websocketRef.current.close();
    }

    try {
      const wsProtocol = API_URL.startsWith('https') ? 'wss' : 'ws';
      const wsHost = API_URL.replace(/^https?:\/\//, '');
      const wsUrl = `${wsProtocol}://${wsHost}/ws/dialogs/${dialogId}?token=${encodeURIComponent(token)}`;
      console.log('üîå [DialogModal] Connecting to WebSocket:', wsUrl);
      
      const ws = new WebSocket(wsUrl);
      websocketRef.current = ws;

      ws.onopen = () => {
        console.log('‚úÖ [DialogModal] WebSocket connected');
        setWsConnected(true);
        setWsError(null);
        reconnectAttemptsRef.current = 0;
      };

      ws.onmessage = (event) => {
        try {
          let data;
          if (event.data === '__ping__') {
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping
            if (ws.readyState === WebSocket.OPEN) {
              ws.send('__pong__');
            }
            return;
          }

          try {
            data = JSON.parse(event.data);
          } catch {
            // –ï—Å–ª–∏ –Ω–µ JSON, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return;
          }

          console.log('üì® [DialogModal] WebSocket message received:', data);

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          if (data.id && data.sender && data.text) {
            console.log('üì• [DialogModal] Adding new message from WebSocket:', data);
            setMessages(prevMessages => {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              const exists = prevMessages.some(msg => msg.id === data.id);
              if (exists) {
                console.log('‚ö†Ô∏è [DialogModal] Message already exists, skipping:', data.id);
                return prevMessages;
              }
              
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              console.log('‚úÖ [DialogModal] Message added to state:', data.id);
              return [...prevMessages, data];
            });
          }

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è handoff
          if (data.type === 'handoff_started') {
            setIsTakenOver(true);
          } else if (data.type === 'handoff_released') {
            setIsTakenOver(false);
          }

        } catch (err) {
          console.error('‚ùå [DialogModal] Error processing WebSocket message:', err);
        }
      };

      ws.onerror = (error) => {
        console.error('‚ùå [DialogModal] WebSocket error:', error);
        setWsError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      };

      ws.onclose = (event) => {
        console.log('üîå [DialogModal] WebSocket closed:', event.code, event.reason);
        setWsConnected(false);
        websocketRef.current = null;

        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö (–∫—Ä–æ–º–µ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è)
        if (isOpen && event.code !== 1000 && reconnectAttemptsRef.current < maxReconnectAttempts) {
          reconnectAttemptsRef.current++;
          const delay = Math.min(1000 * Math.pow(2, reconnectAttemptsRef.current), 10000);
          console.log(`üîÑ [DialogModal] Reconnecting in ${delay}ms (attempt ${reconnectAttemptsRef.current})`);
          
          reconnectTimeoutRef.current = setTimeout(() => {
            connectWebSocket();
          }, delay);
        } else if (isOpen && reconnectAttemptsRef.current >= maxReconnectAttempts) {
          // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback polling –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫
          console.log('‚ö†Ô∏è [DialogModal] WebSocket reconnection failed, switching to polling fallback');
          setUseFallback(true);
          startFallbackPolling();
        }
      };

    } catch (err) {
      console.error('‚ùå [DialogModal] Failed to create WebSocket:', err);
      setWsError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è');
    }
  }, [dialogId, token, isOpen]);

  const disconnectWebSocket = useCallback(() => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }

    if (websocketRef.current) {
      websocketRef.current.close(1000, 'Dialog modal closed');
      websocketRef.current = null;
    }

    setWsConnected(false);
    setWsError(null);
    reconnectAttemptsRef.current = 0;
  }, []);

  // Fallback polling –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ WebSocket –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
  const startFallbackPolling = useCallback(() => {
    if (!dialogId || !token || pollingIntervalRef.current) return;

    console.log('üîÑ [DialogModal] Starting fallback polling');
    
    const pollMessages = async () => {
      try {
        const response = await fetch(`/api/dialogs/${dialogId}/messages`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });

        if (response.ok) {
          const messagesData = await response.json();
          setMessages(prevMessages => {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (messagesData.length !== prevMessages.length) {
              console.log(`üîÑ [DialogModal] Polling update: ${prevMessages.length} -> ${messagesData.length} messages`);
              return messagesData;
            }
            return prevMessages;
          });
        }
      } catch (err) {
        console.error('‚ùå [DialogModal] Polling error:', err);
      }
    };

    // –ü–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    pollMessages();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    pollingIntervalRef.current = setInterval(pollMessages, fallbackPollingInterval);
  }, [dialogId, token]);

  const stopFallbackPolling = useCallback(() => {
    if (pollingIntervalRef.current) {
      clearInterval(pollingIntervalRef.current);
      pollingIntervalRef.current = null;
      console.log('‚èπÔ∏è [DialogModal] Stopped fallback polling');
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞
  const loadDialog = useCallback(async () => {
    if (!dialogId || !token) return;

    try {
      setLoading(true);
      const response = await fetch(`/api/dialogs/${dialogId}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (!response.ok) {
        throw new Error('–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const dialogData = await response.json();
      setDialog(dialogData);
      // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –¥–∏–∞–ª–æ–≥ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–º –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–∞—Ö 'requested' –∏–ª–∏ 'active'
      setIsTakenOver(dialogData.handoff_status === 'requested' || dialogData.handoff_status === 'active');
    } catch (err) {
      setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–∞');
    } finally {
      setLoading(false);
    }
  }, [dialogId, token]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  const loadMessages = useCallback(async () => {
    if (!dialogId || !token) return;

    try {
      setMessagesLoading(true);
      const response = await fetch(`/api/dialogs/${dialogId}/messages`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
      }

      const messagesData = await response.json();
      setMessages(messagesData);
    } catch (err) {
      setMessageError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
    } finally {
      setMessagesLoading(false);
    }
  }, [dialogId, token]);

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç –¥–∏–∞–ª–æ–≥–∞
  const handleTakeover = async () => {
    if (!dialogId || !token) return;

    try {
      setTakeoverLoading(true);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞
      const statusResponse = await fetch(`/api/dialogs/${dialogId}/handoff/status`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      let currentStatus = 'none';
      if (statusResponse.ok) {
        const statusData = await statusResponse.json();
        currentStatus = statusData.status;
        console.log('Current dialog handoff status:', currentStatus);
      }
      
      // –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'requested', —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º handoff
      if (currentStatus !== 'requested') {
        console.log('Dialog not in requested state, requesting handoff first...');
        const requestResponse = await fetch(`/api/dialogs/${dialogId}/handoff/request`, {
          method: 'POST',
          headers: { 
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            reason: 'manual',
            request_id: crypto.randomUUID()
          })
        });
        
        if (!requestResponse.ok) {
          const errorData = await requestResponse.json().catch(() => ({}));
          throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ handoff');
        }
        
        console.log('Handoff requested successfully');
      }
      
      // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º takeover
      const takeoverResponse = await fetch(`/api/dialogs/${dialogId}/handoff/takeover`, {
        method: 'POST',
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({})
      });

      if (!takeoverResponse.ok) {
        const errorData = await takeoverResponse.json().catch(() => ({}));
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –¥–∏–∞–ª–æ–≥–∞');
      }

      const responseData = await takeoverResponse.json();
      console.log('Takeover successful:', responseData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      setIsTakenOver(responseData.status === 'active');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º dialog –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (dialog) {
        setDialog({
          ...dialog,
          handoff_status: responseData.status,
          assigned_manager_id: responseData.assigned_manager?.id
        });
      }
    } catch (err) {
      console.error('Takeover error:', err);
      setError(err.message || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –¥–∏–∞–ª–æ–≥–∞');
    } finally {
      setTakeoverLoading(false);
    }
  };

  // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
  const handleRelease = async () => {
    if (!dialogId || !token) return;

    try {
      setTakeoverLoading(true);
      const response = await fetch(`/api/dialogs/${dialogId}/handoff/release`, {
        method: 'POST',
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({})
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞');
      }

      const responseData = await response.json();
      // –î–∏–∞–ª–æ–≥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω - AI —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å
      setIsTakenOver(false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º dialog –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (dialog) {
        setDialog({
          ...dialog,
          handoff_status: responseData.status,
          assigned_manager_id: null
        });
      }
    } catch (err) {
      setError(err.message || '–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞');
    } finally {
      setTakeoverLoading(false);
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = async (messageText) => {
    console.log('üîÑ [FRONTEND] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
    console.log('üîÑ [FRONTEND] Dialog ID:', dialogId);
    console.log('üîÑ [FRONTEND] Token –µ—Å—Ç—å:', !!token);
    console.log('üîÑ [FRONTEND] –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', messageText);

    if (!dialogId || !token || !messageText.trim()) {
      const errorMsg = !dialogId ? 'ID –¥–∏–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' :
                      !token ? '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' :
                      !messageText.trim() ? '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É—Å—Ç–æ–π' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.error('‚ùå [FRONTEND] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', errorMsg);
      setMessageError(errorMsg);
      return;
    }

    try {
      setSendLoading(true);
      setMessageError('');

      const requestBody = {
        sender: 'manager',
        text: messageText
      };

      console.log('üîÑ [FRONTEND] –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', requestBody);
      console.log('üîÑ [FRONTEND] URL –∑–∞–ø—Ä–æ—Å–∞:', `/api/dialogs/${dialogId}/messages`);

      const response = await fetch(`/api/dialogs/${dialogId}/messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });

      console.log('üîÑ [FRONTEND] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, response.statusText);

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('‚ùå [FRONTEND] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorData);

        let errorMessage = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è';
        if (response.status === 402) {
          errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è';
        } else if (response.status === 403) {
          errorMessage = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ';
        } else if (response.status === 404) {
          errorMessage = '–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω';
        } else if (errorData.detail) {
          errorMessage = errorData.detail;
        }

        throw new Error(errorMessage);
      }

      const responseData = await response.json();
      console.log('‚úÖ [FRONTEND] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', responseData);

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω
      // WebSocket –º–æ–∂–µ—Ç –Ω–µ —É—Å–ø–µ—Ç—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
      if (wsConnected && responseData.id) {
        setMessages(prevMessages => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const exists = prevMessages.some(msg => msg.id === responseData.id);
          if (!exists) {
            return [...prevMessages, responseData];
          }
          return prevMessages;
        });
      }

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (!wsConnected) {
        console.log('üîÑ [FRONTEND] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)...');
        await loadMessages();
        console.log('‚úÖ [FRONTEND] –°–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      } else {
        console.log('‚úÖ [FRONTEND] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ');
      }
    } catch (err) {
      console.error('‚ùå [FRONTEND] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err);
      const errorMessage = err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
      setMessageError(errorMessage);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      showError(errorMessage, {
        title: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'
      });

      throw err;
    } finally {
      setSendLoading(false);
    }
  };

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  const handleClose = () => {
    setMessages([]);
    setError('');
    setMessageError('');
    setIsTakenOver(false);
    setWsConnected(false);
    setWsError(null);
    setUseFallback(false);
    disconnectWebSocket();
    stopFallbackPolling();
    onClose();
  };

  // –ö–ª–∏–∫ –ø–æ –æ–≤–µ—Ä–ª–µ—é
  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget) {
      handleClose();
    }
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
  useEffect(() => {
    if (isOpen && dialogId) {
      if (!useFallback) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        connectWebSocket();
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback polling
        startFallbackPolling();
      }
    } else {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∞
      disconnectWebSocket();
      stopFallbackPolling();
    }

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      disconnectWebSocket();
      stopFallbackPolling();
    };
  }, [isOpen, dialogId, useFallback, connectWebSocket, disconnectWebSocket, startFallbackPolling, stopFallbackPolling]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∞
  useEffect(() => {
    if (isOpen && dialogId) {
      if (!initialDialog) {
        loadDialog();
      } else {
        setDialog(initialDialog);
        // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –¥–∏–∞–ª–æ–≥ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–º –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–∞—Ö 'requested' –∏–ª–∏ 'active'
        setIsTakenOver(initialDialog.handoff_status === 'requested' || initialDialog.handoff_status === 'active');
      }
      loadMessages();
    }
  }, [isOpen, dialogId, initialDialog, loadDialog, loadMessages]);

  // –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω
  if (isOpen && error && !dialog) {
    return createPortal(
      <div
        className={styles.modalOverlay}
        onClick={handleOverlayClick}
      >
        <div className={styles.errorModal}>
          <h3>–û—à–∏–±–∫–∞</h3>
          <p>{error}</p>
          <button onClick={handleClose} className={styles.errorButton}>
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>,
      document.body
    );
  }

  // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –Ω–∏—á–µ–≥–æ
  if (!isOpen) return null;

  return createPortal(
    <div
      className={styles.modalOverlay}
      onClick={handleOverlayClick}
    >
      <div className={styles.dialogModal}>
            {/* Floating close button in top-right corner */}
            <button
              className={styles.floatingClose}
              onClick={handleClose}
              aria-label="–ó–∞–∫—Ä—ã—Ç—å"
            >
              √ó
            </button>
            <div className={styles.dialogContent}>
            {loading || !dialog ? (
              <div className={styles.loadingContainer}>
                <div className={styles.spinner}>
                  ‚ü≥
                </div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–∞...</p>
              </div>
            ) : (
              <div className={styles.modalBody}>
                {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —á–∞—Ç */}
                <div className={styles.chatPane}>
                  {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
                  <div className={styles.connectionStatus}>
                    <div className={`${styles.statusDot} ${wsConnected ? styles.connected : useFallback ? styles.fallback : styles.disconnected}`} />
                    <span className={styles.statusText}>
                      {wsConnected 
                        ? 'Real-time –ø–æ–¥–∫–ª—é—á–µ–Ω–æ' 
                        : useFallback 
                          ? '–†–µ–∂–∏–º –æ–ø—Ä–æ—Å–∞ (fallback)' 
                          : wsError 
                            ? `–û—à–∏–±–∫–∞: ${wsError}` 
                            : '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'
                      }
                    </span>
                  </div>
                  
                  <div className={styles.chatScroll}>
                    <MessageHistory
                      messages={messages}
                      loading={messagesLoading}
                      error={messageError}
                    />
                  </div>

                  <div className={styles.chatFooter}>
                    <DialogFooter
                      dialog={dialog}
                      isTakenOver={isTakenOver}
                      onTakeover={handleTakeover}
                      onRelease={handleRelease}
                      onSendMessage={handleSendMessage}
                      loading={takeoverLoading}
                      sendLoading={sendLoading}
                      error={messageError}
                    />
                  </div>
                </div>

                {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –≤–∏–∑–∏—Ç–µ (–≤–∏–∑—É–∞–ª, –±–µ–∑ –±—ç–∫–∞) */}
                <aside className={styles.infoPane}>
                  <div className={styles.infoSection}>
                    <div className={styles.infoHeader}>–û –∫–ª–∏–µ–Ω—Ç–µ</div>
                    <div className={styles.clientCard}>
                      <div className={styles.clientRow}>
                        <div className={styles.avatarCircle}>{(dialog?.name || dialog?.telegram_username || '–ì–æ—Å—Ç—å')?.[0] || 'üë§'}</div>
                        <div>
                          <div className={styles.clientName}>{dialog?.name || dialog?.telegram_username || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</div>
                          <div className={styles.clientTag}>–ù–æ–≤—ã–π</div>
                        </div>
                      </div>
                      <div className={styles.clientDesc}>–û–ø–∏—Å–∞–Ω–∏–µ</div>
                      <div className={styles.inlineActions}>
                        <button className={styles.ghostButton}>–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É</button>
                        <button className={styles.ghostButton}>–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</button>
                      </div>
                    </div>
                  </div>

                  <div className={styles.infoSection}>
                    <div className={styles.infoHeader}>–û –¥–∏–∞–ª–æ–≥–µ</div>
                    <div className={styles.infoCard}>
                      <div className={styles.metaItem}>
                        <span className={styles.metaLabel}>–ù–∏–∫ –≤ Telegram</span>
                        <span className={styles.metaValue}>{dialog?.telegram_username ? `@${dialog.telegram_username}` : '‚Äî'}</span>
                      </div>
                      <div className={styles.metaItem}>
                        <span className={styles.metaLabel}>–ö–∞–Ω–∞–ª</span>
                        <span className={styles.metaValue}>
                          <div className="flex items-center gap-1">
                            {dialog?.channel_type === 'telegram' ? (
                              <>
                                <FiMessageCircle className="w-3 h-3" />
                                <span>Telegram</span>
                              </>
                            ) : (
                              <>
                                <FiGlobe className="w-3 h-3" />
                                <span>–°–∞–π—Ç</span>
                              </>
                            )}
                          </div>
                        </span>
                      </div>
                      <div className={styles.metaItem}>
                        <span className={styles.metaLabel}>–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è</span>
                        <span className={styles.metaMuted}>–ù–µ —É–∫–∞–∑–∞–Ω–∞</span>
                      </div>
                    </div>
                  </div>

                  <div className={styles.infoSection}>
                    <div className={styles.infoHeader}>–ö–æ–Ω—Ç–∞–∫—Ç—ã</div>
                    <div className={styles.infoCard}>
                      <div className={styles.metaItem}>
                        <span className={styles.metaLabel}>Email</span>
                        <span className={styles.metaValue}>{dialog?.email || '‚Äî'}</span>
                      </div>
                      <div className={styles.metaItem}>
                        <span className={styles.metaLabel}>–¢–µ–ª–µ—Ñ–æ–Ω</span>
                        <span className={styles.metaValue}>{dialog?.phone || '‚Äî'}</span>
                      </div>
                      <button className={styles.linkButton}>–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω/–ø–æ—á—Ç—É</button>
                    </div>
                  </div>

                  <div className={styles.infoSection}>
                    <div className={styles.infoHeader}>–ê—Ç—Ä–∏–±—É—Ç—ã</div>
                    <div className={styles.infoCard}>
                      <div className={styles.metaMuted}>–ê—Ç—Ä–∏–±—É—Ç–æ–≤ –Ω–µ—Ç</div>
                      <button className={styles.linkButton}>–î–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö</button>
                    </div>
                  </div>

                  <div className={styles.infoSection}>
                    <div className={styles.infoHeader}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∏–∑–∏—Ç–µ</div>
                    <div className={styles.infoCard}>
                      <div className={styles.metaItem}>
                        <span className={styles.metaLabel}>–ò—Å—Ç–æ—á–Ω–∏–∫–∏</span>
                        <span className={styles.metaValue}>–ü—Ä—è–º–æ–π –≤—Ö–æ–¥</span>
                      </div>
                      <div className={styles.metaItem}>
                        <span className={styles.metaLabel}>–ó–∞—Ö–æ–¥—ã</span>
                        <span className={styles.metaValue}>2-–π –∑–∞—Ö–æ–¥</span>
                      </div>
                      <div className={styles.metaItem}>
                        <span className={styles.metaLabel}>–ì–æ—Ä–æ–¥</span>
                        <span className={styles.metaValue}>‚Äî</span>
                      </div>
                    </div>
                  </div>
                </aside>
              </div>
            )}
            
            {error && (
              <div className={styles.errorNotification}>
                {error}
                <button onClick={() => setError('')}>‚úï</button>
              </div>
            )}
            </div>
      </div>
    </div>,
    document.body
  );
};

export default DialogModal;