import React, { useState, useEffect } from 'react';
import { 
  FiX, FiArrowRight, FiArrowLeft, FiCheck, FiZap, FiMessageSquare, 
  FiSettings, FiUser, FiFileText, FiPlay, FiCheckCircle, FiInfo,
  FiSun, FiTarget, FiTrendingUp, FiUsers, FiHeart, FiCpu,
  FiMic, FiEye, FiBook, FiShield
} from 'react-icons/fi';
import styles from '../../styles/components/BotCreationWizard.module.css';
import { useNotifications } from '../../hooks/useNotifications';

const BotCreationWizard = ({ isOpen, onClose, onComplete, user }) => {
  const { showSuccess, showError, showWarning, showInfo } = useNotifications();
  const [currentStep, setCurrentStep] = useState(1);
  const [botData, setBotData] = useState({
    name: '',
    description: '',
    systemPrompt: '',
    personality: 'helpful',
    language: 'ru',
    industry: '',
    useCase: '',
    tone: 'friendly',
    expertise: [],
    integrations: []
  });
  const [isCreating, setIsCreating] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);
  const [createdBotId, setCreatedBotId] = useState(null);
  const [currentExample, setCurrentExample] = useState(0);

  const steps = [
    {
      id: 1,
      title: '–¶–µ–ª—å –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ',
      subtitle: '–û–ø—Ä–µ–¥–µ–ª–∏–º, —á—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç',
      icon: FiTarget,
      fields: ['name', 'industry', 'useCase']
    },
    {
      id: 2,
      title: '–õ–∏—á–Ω–æ—Å—Ç—å –∏ —Å—Ç–∏–ª—å',
      subtitle: '–ù–∞—Å—Ç—Ä–æ–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –º–∞–Ω–µ—Ä—É –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞',
      icon: FiHeart,
      fields: ['personality', 'tone', 'expertise']
    },
    {
      id: 3,
      title: '–î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
      subtitle: '–°–æ–∑–¥–∞–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é',
      icon: FiCpu,
      fields: ['description', 'systemPrompt']
    },
    {
      id: 4,
      title: '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫',
      subtitle: '–ó–∞–ø—É—Å—Ç–∏–º –≤–∞—à–µ–≥–æ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞',
      icon: FiPlay,
      fields: []
    },
    {
      id: 5,
      title: '–ì–¥–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç',
      subtitle: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞',
      icon: FiZap,
      fields: ['integrations']
    }
  ];

  const industries = [
    { value: 'sales', label: '–ü—Ä–æ–¥–∞–∂–∏', icon: 'üíº', description: '–ü–æ–º–æ—â—å –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö, –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è' },
    { value: 'support', label: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', icon: 'üéß', description: '–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, FAQ' },
    { value: 'education', label: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', icon: 'üìö', description: '–û–±—É—á–µ–Ω–∏–µ, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏' },
    { value: 'healthcare', label: '–ú–µ–¥–∏—Ü–∏–Ω–∞', icon: 'üè•', description: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏' },
    { value: 'retail', label: '–†–∏—Ç–µ–π–ª', icon: 'üõçÔ∏è', description: '–ü–æ–º–æ—â—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º' },
    { value: 'finance', label: '–§–∏–Ω–∞–Ω—Å—ã', icon: 'üí∞', description: '–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' },
    { value: 'realestate', label: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', icon: 'üè†', description: '–ü–æ–º–æ—â—å —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é' },
    { value: 'other', label: '–î—Ä—É–≥–æ–µ', icon: '‚ö°', description: '–î—Ä—É–≥–∞—è —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' }
  ];

  const useCases = {
    sales: [
      { value: 'lead_qualification', label: '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤', description: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤' },
      { value: 'product_consultation', label: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º', description: '–ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤' },
      { value: 'appointment_booking', label: '–ó–∞–ø–∏—Å—å –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏', description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏' }
    ],
    support: [
      { value: 'faq_assistant', label: 'FAQ –ø–æ–º–æ—â–Ω–∏–∫', description: '–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã' },
      { value: 'technical_support', label: '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', description: '–†–µ—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º' },
      { value: 'order_tracking', label: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–æ–≤' }
    ],
    education: [
      { value: 'tutor', label: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä', description: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ' },
      { value: 'course_assistant', label: '–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫—É—Ä—Å–∞–º', description: '–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è' },
      { value: 'exam_prep', label: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º', description: '–ü–æ–º–æ—â—å –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Ç–µ—Å—Ç–∞–º' }
    ],
    healthcare: [
      { value: 'symptom_checker', label: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤', description: '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤' },
      { value: 'appointment_scheduler', label: '–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É', description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–∏–µ–º–æ–≤' },
      { value: 'medication_reminder', label: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö', description: '–ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∏–µ–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤' }
    ],
    retail: [
      { value: 'personal_shopper', label: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —à–æ–ø–ø–µ—Ä', description: '–ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–æ–≤' },
      { value: 'size_consultant', label: '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º', description: '–ü–æ–¥–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞' },
      { value: 'style_advisor', label: '–°—Ç–∏–ª–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', description: '–°–æ–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª—é –∏ –º–æ–¥–µ' }
    ],
    finance: [
      { value: 'budget_planner', label: '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—é–¥–∂–µ—Ç–∞', description: '–ü–æ–º–æ—â—å –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤' },
      { value: 'investment_advisor', label: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫', description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º' },
      { value: 'loan_assistant', label: '–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö' }
    ],
    realestate: [
      { value: 'property_search', label: '–ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', description: '–ü–æ–º–æ—â—å –≤ –ø–æ–∏—Å–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤' },
      { value: 'valuation_assistant', label: '–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏', description: '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤' },
      { value: 'market_analyst', label: '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏' }
    ],
    other: [
      { value: 'general_assistant', label: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫', description: '–ü–æ–º–æ—â—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö' },
      { value: 'custom_solution', label: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ', description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏' }
    ]
  };

  const personalities = [
    { 
      value: 'helpful', 
      label: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫', 
      icon: 'üòä',
      description: '–¢–µ–ø–ª—ã–π, –æ—Ç–∑—ã–≤—á–∏–≤—ã–π, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å',
      example: '–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä'
    },
    { 
      value: 'professional', 
      label: '–î–µ–ª–æ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç', 
      icon: 'üíº',
      description: '–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π, —á–µ—Ç–∫–∏–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π',
      example: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.'
    },
    { 
      value: 'creative', 
      label: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä', 
      icon: 'üé®',
      description: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
      example: '–í–∞—É! –ö–∞–∫–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∑–∞–¥–∞—á–∞! –î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! ‚ú®'
    },
    { 
      value: 'analytical', 
      label: '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —É–º', 
      icon: 'üìä',
      description: '–õ–æ–≥–∏—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –¥–µ—Ç–∞–ª—å–Ω—ã–π',
      example: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ—à–∞–≥–æ–≤–æ. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–π–¥–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.'
    },
    { 
      value: 'mentor', 
      label: '–ú—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫', 
      icon: 'üéì',
      description: '–¢–µ—Ä–ø–µ–ª–∏–≤—ã–π, –æ–±—É—á–∞—é—â–∏–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π',
      example: '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ, –∏ —Ç—ã –ø–æ–π–º–µ—à—å –ø—Ä–∏–Ω—Ü–∏–ø.'
    },
    { 
      value: 'energetic', 
      label: '–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –º–æ—Ç–∏–≤–∞—Ç–æ—Ä', 
      icon: '‚ö°',
      description: '–ê–∫—Ç–∏–≤–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π',
      example: '–î–∞–≤–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! –£ –Ω–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! –í–ø–µ—Ä–µ–¥ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π! üöÄ'
    }
  ];

  const tones = [
    { value: 'friendly', label: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', description: '–¢–µ–ø–ª—ã–π –∏ –ø—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–π' },
    { value: 'formal', label: '–§–æ—Ä–º–∞–ª—å–Ω—ã–π', description: '–í–µ–∂–ª–∏–≤—ã–π –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π' },
    { value: 'casual', label: '–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π', description: '–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π –∏ –ø—Ä–æ—Å—Ç–æ–π' },
    { value: 'enthusiastic', label: '–í–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω—ã–π', description: '–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π' }
  ];

  const expertiseAreas = [
    { value: 'customer_service', label: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤', icon: 'ü§ù' },
    { value: 'sales_techniques', label: '–¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–¥–∞–∂', icon: 'üìà' },
    { value: 'product_knowledge', label: '–ó–Ω–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', icon: 'üì¶' },
    { value: 'technical_support', label: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', icon: 'üîß' },
    { value: 'marketing', label: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', icon: 'üì¢' },
    { value: 'analytics', label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', icon: 'üìä' },
    { value: 'psychology', label: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –æ–±—â–µ–Ω–∏—è', icon: 'üß†' },
    { value: 'negotiation', label: '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', icon: 'ü§ù' }
  ];

  const integrationOptions = [
    {
      value: 'website_widget',
      label: '–í–∏–¥–∂–µ—Ç –Ω–∞ —Å–∞–π—Ç',
      icon: 'üåê',
      description: '–í—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Ç-–±–æ—Ç–∞ –Ω–∞ –≤–∞—à —Å–∞–π—Ç',
      difficulty: '–õ–µ–≥–∫–æ',
      time: '5 –º–∏–Ω—É—Ç',
      features: ['–ì–æ—Ç–æ–≤—ã–π –∫–æ–¥', '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∑–∞–π–Ω–∞', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞']
    },
    {
      value: 'telegram',
      label: 'Telegram –±–æ—Ç',
      icon: 'üí¨',
      description: '–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –≤ Telegram',
      difficulty: '–°—Ä–µ–¥–Ω–µ',
      time: '10 –º–∏–Ω—É—Ç',
      features: ['–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–ì—Ä—É–ø–ø—ã']
    },
    {
      value: 'whatsapp',
      label: 'WhatsApp Business',
      icon: 'üì±',
      description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WhatsApp Business',
      difficulty: '–°—Ä–µ–¥–Ω–µ',
      time: '15 –º–∏–Ω—É—Ç',
      features: ['API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã', '–ö–∞—Ç–∞–ª–æ–≥']
    },
    {
      value: 'vk',
      label: '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
      icon: 'üîµ',
      description: '–ë–æ—Ç –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤ –í–ö',
      difficulty: '–°—Ä–µ–¥–Ω–µ',
      time: '10 –º–∏–Ω—É—Ç',
      features: ['–ì—Ä—É–ø–ø—ã –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', '–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã', '–†–∞—Å—Å—ã–ª–∫–∏']
    },
    {
      value: 'api',
      label: 'API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
      icon: '‚öôÔ∏è',
      description: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ API',
      difficulty: '–°–ª–æ–∂–Ω–æ',
      time: '30+ –º–∏–Ω—É—Ç',
      features: ['REST API', 'Webhooks', '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è']
    },
    {
      value: 'iframe',
      label: '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–∞—Ç',
      icon: 'üíª',
      description: 'Iframe –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è',
      difficulty: '–õ–µ–≥–∫–æ',
      time: '2 –º–∏–Ω—É—Ç—ã',
      features: ['–ì–æ—Ç–æ–≤—ã–π –∫–æ–¥', '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π', '–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è']
    }
  ];

  const examples = [
    {
      industry: 'sales',
      useCase: 'lead_qualification',
      name: '–°–µ–π–ª—Å–ë–æ—Ç –ü—Ä–æ',
      description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º, –∫–æ—Ç–æ—Ä—ã–π –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ª–∏–¥–æ–≤, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏.',
      personality: 'professional',
      tone: 'friendly'
    },
    {
      industry: 'support',
      useCase: 'faq_assistant',
      name: '–°–∞–ø–ø–æ—Ä—Ç–ì–µ–Ω–∏–π',
      description: '–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–µ—à–∞–µ—Ç —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.',
      personality: 'helpful',
      tone: 'friendly'
    },
    {
      industry: 'education',
      useCase: 'tutor',
      name: '–£—á–∏—Ç–µ–ª—åAI',
      description: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º –∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤ –æ–±—É—á–µ–Ω–∏–∏.',
      personality: 'mentor',
      tone: 'friendly'
    }
  ];

  useEffect(() => {
    if (isOpen) {
      setCurrentStep(1);
      setIsCompleted(false);
      setCreatedBotId(null);
      setBotData({
        name: '',
        description: '',
        systemPrompt: '',
        personality: 'helpful',
        language: 'ru',
        industry: '',
        useCase: '',
        tone: 'friendly',
        expertise: [],
        integrations: []
      });
    }
  }, [isOpen]);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentExample((prev) => (prev + 1) % examples.length);
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  const handleNext = () => {
    if (currentStep < steps.length) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrev = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleInputChange = (field, value) => {
    setBotData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleExpertiseToggle = (expertise) => {
    setBotData(prev => ({
      ...prev,
      expertise: prev.expertise.includes(expertise)
        ? prev.expertise.filter(e => e !== expertise)
        : [...prev.expertise, expertise]
    }));
  };

  const handleIntegrationToggle = (integration) => {
    setBotData(prev => ({
      ...prev,
      integrations: prev.integrations.includes(integration)
        ? prev.integrations.filter(i => i !== integration)
        : [...prev.integrations, integration]
    }));
  };

  const useExample = (example) => {
    setBotData(prev => ({
      ...prev,
      ...example
    }));
  };

  const getSystemPromptForBot = () => {
    const selectedPersonality = personalities.find(p => p.value === botData.personality);
    const selectedIndustry = industries.find(i => i.value === botData.industry);
    const selectedUseCase = useCases[botData.industry]?.find(u => u.value === botData.useCase);
    
    let prompt = `–¢—ã ${selectedPersonality?.label.toLowerCase()} –≤ —Å—Ñ–µ—Ä–µ "${selectedIndustry?.label}". `;
    
    if (selectedUseCase) {
      prompt += `–¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: ${selectedUseCase.description}. `;
    }
    
    prompt += `\n\n–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: ${botData.tone === 'friendly' ? '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —Ç–µ–ø–ª—ã–π' : 
                                        botData.tone === 'formal' ? '–≤–µ–∂–ª–∏–≤—ã–π –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π' :
                                        botData.tone === 'casual' ? '–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∏ –ø—Ä–æ—Å—Ç–æ–π' :
                                        '—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π'}. `;
    
    if (botData.expertise.length > 0) {
      const expertiseLabels = botData.expertise.map(e => 
        expertiseAreas.find(ea => ea.value === e)?.label
      ).join(', ');
      prompt += `\n\n–¢–≤–æ–∏ –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã: ${expertiseLabels}. `;
    }
    
    prompt += `\n\n–í—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∏—á—å –µ–≥–æ —Ü–µ–ª–µ–π, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º –∫ –¥–µ—Ç–∞–ª—è–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.`;
    
    return prompt;
  };

  const handleCreateBot = async () => {
    setIsCreating(true);
    
    try {
      const token = localStorage.getItem('token');
      const systemPrompt = botData.systemPrompt || getSystemPromptForBot();
      
      const response = await fetch('/api/assistants', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          name: botData.name,
          description: botData.description,
          system_prompt: systemPrompt,
          personality: botData.personality,
          language: botData.language
        })
      });

      if (response.ok) {
        const newBot = await response.json();
        setCreatedBotId(newBot.id);
        setIsCompleted(true);
        
        // –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ
        try {
          await fetch('/api/users/onboarding/mark-bot-created', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
        } catch (onboardingError) {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', onboardingError);
        }
        
      } else {
        const errorData = await response.text();
        console.error('–û—à–∏–±–∫–∞ API:', errorData);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:', error);
      showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', { title: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è' });
    } finally {
      setIsCreating(false);
    }
  };

  const handleComplete = () => {
    onComplete();
    onClose();
  };

  const isStepValid = (step) => {
    switch (step) {
      case 1:
        return botData.name.trim() && botData.industry && botData.useCase;
      case 2:
        return botData.personality && botData.tone;
      case 3:
        return botData.description.trim();
      case 4:
        return true;
      case 5:
        return botData.integrations.length > 0;
      default:
        return false;
    }
  };

  if (!isOpen) return null;

  return (
    <div className={styles.overlay}>
      <div className={styles.modal}>
        <div className={styles.header}>
          <div className={styles.titleSection}>
            <h2 className={styles.title}>–°–æ–∑–¥–∞–Ω–∏–µ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞</h2>
            <p className={styles.subtitle}>
              –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ –∑–∞ 5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤
            </p>
          </div>
          <button 
            className={styles.closeButton}
            onClick={onClose}
          >
            <FiX size={24} />
          </button>
        </div>

        <div className={styles.progressBar}>
          {steps.map((step, index) => (
            <div 
              key={step.id}
              className={`${styles.progressStep} ${
                step.id <= currentStep ? styles.active : ''
              } ${step.id < currentStep ? styles.completed : ''}`}
            >
              <div className={styles.stepNumber}>
                {step.id < currentStep ? <FiCheck size={16} /> : step.id}
              </div>
              <span className={styles.stepLabel}>{step.title}</span>
            </div>
          ))}
        </div>

        <div className={styles.content}>
          {currentStep === 1 && (
            <div className={styles.stepContent}>
              <div className={styles.stepHeader}>
                <FiTarget className={styles.stepIcon} />
                <div>
                  <h3 className={styles.stepTitle}>–¶–µ–ª—å –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ</h3>
                  <p className={styles.stepDescription}>
                    –û–ø—Ä–µ–¥–µ–ª–∏–º, –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–∞—Ç—å
                  </p>
                </div>
              </div>

              <div className={styles.form}>
                <div className={styles.field}>
                  <label className={styles.label}>
                    <FiSun className={styles.labelIcon} />
                    –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ *
                  </label>
                  <div className={styles.industryGrid}>
                    {industries.map((industry) => (
                      <div
                        key={industry.value}
                        className={`${styles.industryCard} ${
                          botData.industry === industry.value ? styles.selected : ''
                        }`}
                        onClick={() => handleInputChange('industry', industry.value)}
                      >
                        <div className={styles.industryIcon}>{industry.icon}</div>
                        <h4 className={styles.industryTitle}>{industry.label}</h4>
                        <p className={styles.industryDescription}>{industry.description}</p>
                      </div>
                    ))}
                  </div>
                </div>

                {botData.industry && (
                  <div className={styles.field}>
                    <label className={styles.label}>
                      <FiTarget className={styles.labelIcon} />
                      –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ *
                    </label>
                    <div className={styles.useCaseGrid}>
                      {useCases[botData.industry]?.map((useCase) => (
                        <div
                          key={useCase.value}
                          className={`${styles.useCaseCard} ${
                            botData.useCase === useCase.value ? styles.selected : ''
                          }`}
                          onClick={() => handleInputChange('useCase', useCase.value)}
                        >
                          <h4 className={styles.useCaseTitle}>{useCase.label}</h4>
                          <p className={styles.useCaseDescription}>{useCase.description}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <div className={styles.field}>
                  <label className={styles.label}>
                    <FiUser className={styles.labelIcon} />
                    –ò–º—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ *
                  </label>
                  <input
                    type="text"
                    className={styles.input}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–µ–π–ª—Å–ë–æ—Ç –ü—Ä–æ, –°–∞–ø–ø–æ—Ä—Ç–ì–µ–Ω–∏–π, –£—á–∏—Ç–µ–ª—åAI"
                    value={botData.name}
                    onChange={(e) => handleInputChange('name', e.target.value)}
                  />
                  <div className={styles.hint}>
                    <FiInfo size={14} />
                    –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–µ—Å—è –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –±–æ—Ç–∞
                  </div>
                </div>

                {examples.length > 0 && (
                  <div className={styles.exampleCard}>
                    <div className={styles.exampleHeader}>
                      <FiSun className={styles.exampleIcon} />
                      <span>–ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</span>
                    </div>
                    <div className={styles.exampleContent}>
                      <h4>{examples[currentExample].name}</h4>
                      <p>{examples[currentExample].description}</p>
                      <button 
                        className={styles.useExampleButton}
                        onClick={() => useExample(examples[currentExample])}
                      >
                        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {currentStep === 2 && (
            <div className={styles.stepContent}>
              <div className={styles.stepHeader}>
                <FiHeart className={styles.stepIcon} />
                <div>
                  <h3 className={styles.stepTitle}>–õ–∏—á–Ω–æ—Å—Ç—å –∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è</h3>
                  <p className={styles.stepDescription}>
                    –ù–∞—Å—Ç—Ä–æ–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ - –æ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–æ —Å—Ç—Ä–æ–≥–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
                  </p>
                </div>
              </div>

              <div className={styles.form}>
                <div className={styles.field}>
                  <label className={styles.label}>
                    <FiHeart className={styles.labelIcon} />
                    –¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ *
                  </label>
                  <div className={styles.personalityGrid}>
                    {personalities.map((personality) => (
                      <div
                        key={personality.value}
                        className={`${styles.personalityCard} ${
                          botData.personality === personality.value ? styles.selected : ''
                        }`}
                        onClick={() => handleInputChange('personality', personality.value)}
                      >
                        <div className={styles.personalityIcon}>{personality.icon}</div>
                        <h4 className={styles.personalityTitle}>{personality.label}</h4>
                        <p className={styles.personalityDescription}>{personality.description}</p>
                        <div className={styles.personalityExample}>
                          <strong>–ü—Ä–∏–º–µ—Ä:</strong> "{personality.example}"
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className={styles.field}>
                  <label className={styles.label}>
                    <FiMic className={styles.labelIcon} />
                    –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è *
                  </label>
                  <div className={styles.toneGrid}>
                    {tones.map((tone) => (
                      <div
                        key={tone.value}
                        className={`${styles.toneCard} ${
                          botData.tone === tone.value ? styles.selected : ''
                        }`}
                        onClick={() => handleInputChange('tone', tone.value)}
                      >
                        <h4 className={styles.toneTitle}>{tone.label}</h4>
                        <p className={styles.toneDescription}>{tone.description}</p>
                      </div>
                    ))}
                  </div>
                </div>

                <div className={styles.field}>
                  <label className={styles.label}>
                    <FiCpu className={styles.labelIcon} />
                    –û–±–ª–∞—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                  </label>
                  <div className={styles.expertiseGrid}>
                    {expertiseAreas.map((expertise) => (
                      <div
                        key={expertise.value}
                        className={`${styles.expertiseCard} ${
                          botData.expertise.includes(expertise.value) ? styles.selected : ''
                        }`}
                        onClick={() => handleExpertiseToggle(expertise.value)}
                      >
                        <span className={styles.expertiseIcon}>{expertise.icon}</span>
                        <span className={styles.expertiseLabel}>{expertise.label}</span>
                      </div>
                    ))}
                  </div>
                  <div className={styles.hint}>
                    <FiInfo size={14} />
                    –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–º
                  </div>
                </div>
              </div>
            </div>
          )}

          {currentStep === 3 && (
            <div className={styles.stepContent}>
              <div className={styles.stepHeader}>
                <FiCpu className={styles.stepIcon} />
                <div>
                  <h3 className={styles.stepTitle}>–î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</h3>
                  <p className={styles.stepDescription}>
                    –û–ø–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–¥–∏–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                  </p>
                </div>
              </div>

              <div className={styles.form}>
                <div className={styles.field}>
                  <label className={styles.label}>
                    <FiFileText className={styles.labelIcon} />
                    –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ *
                  </label>
                  <textarea
                    className={styles.textarea}
                    placeholder={`–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —É–º–µ–µ—Ç –≤–∞—à –±–æ—Ç:
‚Ä¢ –ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–∞–µ—Ç
‚Ä¢ –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–∞–µ—Ç  
‚Ä¢ –ö–∞–∫ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–µ—Ç

–ü—Ä–∏–º–µ—Ä: "–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º –º–∞–≥–∞–∑–∏–Ω–∞ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä, –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã. –£–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏–∑ 5000+ —Ç–æ–≤–∞—Ä–æ–≤."`}
                    value={botData.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    rows={6}
                  />
                  <div className={styles.hint}>
                    <FiInfo size={14} />
                    –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –±–æ—Ç—É –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏
                  </div>
                </div>

                <div className={styles.field}>
                  <label className={styles.label}>
                    <FiSettings className={styles.labelIcon} />
                    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É (—Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                  </label>
                  <div className={styles.promptPreview}>
                    <div className={styles.promptPreviewHeader}>
                      <FiEye size={16} />
                      <span>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</span>
                    </div>
                    <div className={styles.promptPreviewContent}>
                      {getSystemPromptForBot()}
                    </div>
                  </div>
                  <textarea
                    className={styles.textarea}
                    placeholder="–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é..."
                    value={botData.systemPrompt}
                    onChange={(e) => handleInputChange('systemPrompt', e.target.value)}
                    rows={4}
                  />
                  <div className={styles.hint}>
                    <FiInfo size={14} />
                    –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é
                  </div>
                </div>
              </div>
            </div>
          )}

          {currentStep === 4 && !isCompleted && (
            <div className={styles.stepContent}>
              <div className={styles.stepHeader}>
                <FiPlay className={styles.stepIcon} />
                <div>
                  <h3 className={styles.stepTitle}>–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫</h3>
                  <p className={styles.stepDescription}>
                    –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à–µ–≥–æ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                  </p>
                </div>
              </div>

              <div className={styles.summaryCard}>
                <h4 className={styles.summaryTitle}>ü§ñ –ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</h4>
                <div className={styles.summaryGrid}>
                  <div className={styles.summaryItem}>
                    <strong>üè∑Ô∏è –ò–º—è:</strong> {botData.name}
                  </div>
                  <div className={styles.summaryItem}>
                    <strong>üè¢ –°—Ñ–µ—Ä–∞:</strong> {industries.find(i => i.value === botData.industry)?.label}
                  </div>
                  <div className={styles.summaryItem}>
                    <strong>üéØ –ó–∞–¥–∞—á–∞:</strong> {useCases[botData.industry]?.find(u => u.value === botData.useCase)?.label}
                  </div>
                  <div className={styles.summaryItem}>
                    <strong>üòä –õ–∏—á–Ω–æ—Å—Ç—å:</strong> {personalities.find(p => p.value === botData.personality)?.label}
                  </div>
                  <div className={styles.summaryItem}>
                    <strong>üó£Ô∏è –°—Ç–∏–ª—å:</strong> {tones.find(t => t.value === botData.tone)?.label}
                  </div>
                  {botData.expertise.length > 0 && (
                    <div className={styles.summaryItem}>
                      <strong>üß† –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞:</strong> {botData.expertise.length} –æ–±–ª–∞—Å—Ç–µ–π
                    </div>
                  )}
                </div>
              </div>

              <div className={styles.launchCard}>
                <div className={styles.launchHeader}>
                  <FiZap className={styles.launchIcon} />
                  <div>
                    <h4>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ç–æ–≤—ã!</h4>
                    <p>–ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞</p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {currentStep === 5 && (
            <div className={styles.stepContent}>
              <div className={styles.stepHeader}>
                <FiZap className={styles.stepIcon} />
                <div>
                  <h3 className={styles.stepTitle}>–ö–∞–Ω–∞–ª—ã —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞</h3>
                  <p className={styles.stepDescription}>
                    –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –æ–±—â–∞—Ç—å—Å—è —Å –≤–∞—à–∏–º AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
                  </p>
                </div>
              </div>

              <div className={styles.form}>
                <div className={styles.field}>
                  <label className={styles.label}>
                    <FiZap className={styles.labelIcon} />
                    –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ *
                  </label>
                  <div className={styles.integrationGrid}>
                    {integrationOptions.map((integration) => (
                      <div
                        key={integration.value}
                        className={`${styles.integrationCard} ${
                          botData.integrations.includes(integration.value) ? styles.selected : ''
                        }`}
                        onClick={() => handleIntegrationToggle(integration.value)}
                      >
                        <div className={styles.integrationHeader}>
                          <div className={styles.integrationIcon}>{integration.icon}</div>
                          <div className={styles.integrationInfo}>
                            <h4 className={styles.integrationTitle}>{integration.label}</h4>
                            <p className={styles.integrationDescription}>{integration.description}</p>
                          </div>
                        </div>
                        <div className={styles.integrationMeta}>
                          <div className={styles.integrationDifficulty}>
                            <span className={`${styles.difficultyBadge} ${styles[integration.difficulty.toLowerCase()]}`}>
                              {integration.difficulty}
                            </span>
                            <span className={styles.integrationTime}>‚è±Ô∏è {integration.time}</span>
                          </div>
                          <div className={styles.integrationFeatures}>
                            {integration.features.map((feature, index) => (
                              <span key={index} className={styles.featureTag}>
                                {feature}
                              </span>
                            ))}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                  <div className={styles.hint}>
                    <FiInfo size={14} />
                    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞.
                  </div>
                </div>

                {botData.integrations.length > 0 && (
                  <div className={styles.integrationPreview}>
                    <h4>üöÄ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:</h4>
                    <div className={styles.selectedIntegrations}>
                      {botData.integrations.map((integrationValue) => {
                        const integration = integrationOptions.find(opt => opt.value === integrationValue);
                        return (
                          <div key={integrationValue} className={styles.selectedIntegration}>
                            <span className={styles.selectedIcon}>{integration.icon}</span>
                            <span className={styles.selectedLabel}>{integration.label}</span>
                          </div>
                        );
                      })}
                    </div>
                    <p className={styles.integrationNote}>
                      –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
                    </p>
                  </div>
                )}
              </div>
            </div>
          )}

          {isCompleted && (
            <div className={styles.stepContent}>
              <div className={styles.successContent}>
                <div className={styles.successIcon}>
                  <FiCheckCircle size={64} />
                </div>
                <h3 className={styles.successTitle}>üéâ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</h3>
                <p className={styles.successDescription}>
                  –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç "<strong>{botData.name}</strong>" –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.
                  –¢–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–µ—à–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.
                </p>
                
                <div className={styles.successStats}>
                  <div className={styles.successStat}>
                    <FiUsers size={24} />
                    <span>–ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é</span>
                  </div>
                  <div className={styles.successStat}>
                    <FiCpu size={24} />
                    <span>–û–±—É—á–µ–Ω –∑–∞–¥–∞—á–∞–º</span>
                  </div>
                  <div className={styles.successStat}>
                    <FiShield size={24} />
                    <span>–ë–µ–∑–æ–ø–∞—Å–µ–Ω</span>
                  </div>
                </div>
                
                <div className={styles.successActions}>
                  <a 
                    href="/dialogs" 
                    className={styles.testButton}
                  >
                    <FiMessageSquare size={16} />
                    –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
                  </a>
                  <a 
                    href="/ai-assistant" 
                    className={styles.settingsButton}
                  >
                    <FiSettings size={16} />
                    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                  </a>
                </div>

                <div className={styles.nextStepsCard}>
                  <h4>üöÄ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?</h4>
                  <ul>
                    <li><FiMessageSquare size={16} /> –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–î–∏–∞–ª–æ–≥–∏"</li>
                    <li><FiBook size={16} /> –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"</li>
                    <li><FiTrendingUp size={16} /> –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"</li>
                    <li><FiUsers size={16} /> –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã</li>
                  </ul>
                </div>
              </div>
            </div>
          )}
        </div>

        <div className={styles.footer}>
          <div className={styles.footerLeft}>
            {currentStep > 1 && !isCompleted && (
              <button 
                className={styles.prevButton}
                onClick={handlePrev}
              >
                <FiArrowLeft size={16} />
                –ù–∞–∑–∞–¥
              </button>
            )}
          </div>
          
          <div className={styles.footerRight}>
            {!isCompleted && currentStep < 5 && (
              <button 
                className={`${styles.nextButton} ${!isStepValid(currentStep) ? styles.disabled : ''}`}
                onClick={handleNext}
                disabled={!isStepValid(currentStep)}
              >
                –î–∞–ª–µ–µ
                <FiArrowRight size={16} />
              </button>
            )}
            
            {!isCompleted && currentStep === 5 && (
              <button 
                className={`${styles.createButton} ${!isStepValid(currentStep) ? styles.disabled : ''}`}
                onClick={handleCreateBot}
                disabled={!isStepValid(currentStep) || isCreating}
              >
                {isCreating ? (
                  <>
                    <div className={styles.spinner}></div>
                    –°–æ–∑–¥–∞–µ–º AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...
                  </>
                ) : (
                  <>
                    <FiZap size={20} />
                    –°–æ–∑–¥–∞—Ç—å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                  </>
                )}
              </button>
            )}
            
            {isCompleted && (
              <button 
                className={styles.completeButton}
                onClick={handleComplete}
              >
                <FiCheck size={16} />
                –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default BotCreationWizard;