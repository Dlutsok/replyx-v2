import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  FiCheck, FiX, FiArrowRight, FiArrowLeft, FiUpload, FiLink, 
  FiEye, FiSettings, FiExternalLink, FiRefreshCw, FiCopy,
  FiCheckCircle, FiAlertCircle, FiFile, FiSkipForward, FiGlobe,
  FiCode, FiKey, FiDollarSign
} from 'react-icons/fi';
import styles from '../../styles/components/WebsiteSetupWizard.module.css';

const WebsiteSetupWizard = ({ isOpen, onClose, onComplete, selectedAssistant }) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [stepData, setStepData] = useState({
    siteToken: '',
    embedCode: '',
    tokenGenerated: false,
    generating: false,
    filesUploaded: [],
    uploading: false,
    uploadCost: 0,
    testCompleted: false
  });

  const steps = [
    {
      id: 1,
      title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∂–µ—Ç–∞",
      description: "–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ –∫–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —Å–∞–π—Ç"
    },
    {
      id: 2,
      title: "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π",
      description: "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
    },
    {
      id: 3,
      title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã",
      description: "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–∏–¥–∂–µ—Ç –Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ"
    }
  ];

  const handleNextStep = () => {
    if (currentStep < 3) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const generateTokenAndCode = async () => {
    if (!selectedAssistant) {
      alert('–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω');
      return;
    }

    setStepData(prev => ({ ...prev, generating: true }));
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º embed –∫–æ–¥ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      const response = await fetch(`/api/assistants/${selectedAssistant.id}/embed-code`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        setStepData(prev => ({ 
          ...prev, 
          siteToken: data.token,
          embedCode: data.embed_code,
          tokenGenerated: true,
          generating: false
        }));
      } else {
        alert('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞');
        setStepData(prev => ({ ...prev, generating: false }));
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞');
      setStepData(prev => ({ ...prev, generating: false }));
    }
  };

  const copyToClipboard = async (text, type) => {
    try {
      await navigator.clipboard.writeText(text);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const notification = document.createElement('div');
      notification.textContent = type === 'token' ? '–¢–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!' : '–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!';
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #10b981;
        color: white;
        padding: 12px 20px;
        border-radius: 0.75rem;
        z-index: 10000;
        font-weight: 500;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      `;
      document.body.appendChild(notification);
      setTimeout(() => document.body.removeChild(notification), 2000);
    } catch (err) {
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    }
  };

  const handleFileUpload = async (event) => {
    const files = Array.from(event.target.files);
    const allowedTypes = ['.pdf', '.docx', '.txt', '.csv', '.html', '.ics', '.json', '.ods', '.rtf', '.xml', '.xls', '.xlsx'];
    const maxSize = 10 * 1024 * 1024; // 10MB

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
    const validFiles = [];
    let totalCost = 0;
    for (const file of files) {
      const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
      if (!allowedTypes.includes(fileExtension)) {
        alert(`–§–∞–π–ª ${file.name} –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç`);
        continue;
      }
      if (file.size > maxSize) {
        alert(`–§–∞–π–ª ${file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10 –ú–ë)`);
        continue;
      }
      validFiles.push(file);
      totalCost += 5; // 5 —Ä—É–±–ª–µ–π –∑–∞ —Ñ–∞–π–ª
    }

    if (validFiles.length === 0) return;

    setStepData(prev => ({ ...prev, uploading: true, uploadCost: totalCost }));
    
    try {
      const token = localStorage.getItem('token');
      const uploadedFiles = [];

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
      for (const file of validFiles) {
        const formData = new FormData();
        formData.append('file', file);

        const response = await fetch('/api/documents', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`
          },
          body: formData
        });

        if (response.ok) {
          const result = await response.json();
          uploadedFiles.push({
            name: file.name,
            id: result.id,
            status: 'success'
          });
        } else {
          const error = await response.json();
          uploadedFiles.push({
            name: file.name,
            status: 'error',
            error: error.detail || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
          });
        }
      }

      setStepData(prev => ({ 
        ...prev, 
        filesUploaded: [...prev.filesUploaded, ...uploadedFiles],
        uploading: false
      }));

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const successCount = uploadedFiles.filter(f => f.status === 'success').length;
      const errorCount = uploadedFiles.filter(f => f.status === 'error').length;
      
      if (successCount > 0) {
        alert(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${successCount} —Ñ–∞–π–ª(–æ–≤) –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π`);
      }
      if (errorCount > 0) {
        alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${errorCount} —Ñ–∞–π–ª(–æ–≤)`);
      }

    } catch (error) {
      setStepData(prev => ({ ...prev, uploading: false }));
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
    }
  };

  const openTestDemo = () => {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ–º–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–∏–¥–∂–µ—Ç–æ–º
    const demoUrl = `/chat-iframe?assistant_id=${selectedAssistant?.id}&theme=blue`;
    window.open(demoUrl, '_blank');
  };

  if (!isOpen) return null;

  return (
    <div className={styles.overlay}>
      <motion.div 
        className={styles.wizard}
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.9 }}
      >
        {/* Header */}
        <div className={styles.header}>
          <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–æ–º</h2>
          <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –≤ 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞</p>
          <button className={styles.closeBtn} onClick={onClose}>
            <FiX />
          </button>
        </div>

        {/* Progress */}
        <div className={styles.progress}>
          {steps.map((step, index) => (
            <div key={step.id} className={styles.progressStep}>
              <div className={`${styles.progressCircle} ${
                currentStep > step.id ? styles.completed : 
                currentStep === step.id ? styles.active : styles.pending
              }`}>
                {currentStep > step.id ? <FiCheck /> : step.id}
              </div>
              <div className={styles.progressLabel}>
                <div className={styles.progressTitle}>{step.title}</div>
                <div className={styles.progressDescription}>{step.description}</div>
              </div>
              {index < steps.length - 1 && (
                <div className={`${styles.progressLine} ${
                  currentStep > step.id ? styles.completed : ''
                }`} />
              )}
            </div>
          ))}
        </div>

        {/* Content */}
        <div className={styles.content}>
          <AnimatePresence mode="wait">
            {/* Step 1: Widget Setup */}
            {currentStep === 1 && (
              <motion.div
                key="step1"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                className={styles.step}
              >
                <div className={styles.stepHeader}>
                  <h3>üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∂–µ—Ç–∞</h3>
                  <p>–ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –∫–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∏–¥–∂–µ—Ç–∞ –Ω–∞ –≤–∞—à —Å–∞–π—Ç</p>
                </div>

                <div className={styles.widgetSetup}>
                  {!stepData.tokenGenerated ? (
                    <div className={styles.generateSection}>
                      <div className={styles.assistantInfo}>
                        <FiGlobe className={styles.assistantIcon} />
                        <div>
                          <h4>–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {selectedAssistant?.name}</h4>
                          <p>–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞</p>
                        </div>
                      </div>

                      <button 
                        className={styles.generateBtn}
                        onClick={generateTokenAndCode}
                        disabled={stepData.generating}
                      >
                        {stepData.generating ? (
                          <>
                            <FiRefreshCw className={styles.spin} />
                            –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –∫–æ–¥...
                          </>
                        ) : (
                          <>
                            <FiKey />
                            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –∏ –∫–æ–¥
                          </>
                        )}
                      </button>
                    </div>
                  ) : (
                    <div className={styles.tokenSection}>
                      <div className={styles.successMessage}>
                        <FiCheckCircle className={styles.successIcon} />
                        <div>
                          <div className={styles.successTitle}>
                            –¢–æ–∫–µ–Ω –∏ –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!
                          </div>
                          <div className={styles.successText}>
                            –¢–æ–∫–µ–Ω –±–µ—Å—Å—Ä–æ—á–Ω—ã–π –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
                          </div>
                        </div>
                      </div>

                      {/* Site Token */}
                      <div className={styles.codeBlock}>
                        <div className={styles.codeHeader}>
                          <FiKey />
                          <span>–ë–µ—Å—Å—Ä–æ—á–Ω—ã–π site-—Ç–æ–∫–µ–Ω</span>
                        </div>
                        <div className={styles.codeContent}>
                          <code>{stepData.siteToken}</code>
                          <button 
                            className={styles.copyBtn}
                            onClick={() => copyToClipboard(stepData.siteToken, 'token')}
                          >
                            <FiCopy />
                            –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                          </button>
                        </div>
                      </div>

                      {/* Embed Code */}
                      <div className={styles.codeBlock}>
                        <div className={styles.codeHeader}>
                          <FiCode />
                          <span>Embed-–∫–æ–¥ –¥–ª—è —Å–∞–π—Ç–∞</span>
                        </div>
                        <div className={styles.codeContent}>
                          <code>{stepData.embedCode}</code>
                          <button 
                            className={styles.copyBtn}
                            onClick={() => copyToClipboard(stepData.embedCode, 'code')}
                          >
                            <FiCopy />
                            –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
                          </button>
                        </div>
                      </div>

                      {/* Instructions */}
                      <div className={styles.instructions}>
                        <h4>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:</h4>
                        <ol>
                          <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ embed-–∫–æ–¥ –≤—ã—à–µ</li>
                          <li>–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –≤ HTML –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º —Ç–µ–≥–æ–º <code>&lt;/body&gt;</code></li>
                          <li>–ü–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ —á–∞—Ç-–≤–∏–¥–∂–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —Å–∞–π—Ç–∞</li>
                        </ol>
                        
                        <div className={styles.importantNote}>
                          <FiAlertCircle />
                          <div>
                            <strong>–í–∞–∂–Ω–æ:</strong> –¢–æ–∫–µ–Ω –±–µ—Å—Å—Ä–æ—á–Ω—ã–π –∏ –º–µ–Ω—è—Ç—å –µ–≥–æ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞.
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </motion.div>
            )}

            {/* Step 2: Knowledge Base */}
            {currentStep === 2 && (
              <motion.div
                key="step2"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                className={styles.step}
              >
                <div className={styles.stepHeader}>
                  <h3>üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</h3>
                  <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞</p>
                </div>

                <div className={styles.knowledgeSection}>
                  <div className={styles.uploadSection}>
                    <h4>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤</h4>
                    <p>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, TXT, CSV, HTML, ICS, JSON, ODS, RTF, XML, XLS, XLSX</p>
                    <p>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10 –ú–ë</p>
                    
                    <div className={styles.uploadArea}>
                      <input
                        type="file"
                        id="fileUpload"
                        multiple
                        accept=".pdf,.docx,.txt,.csv,.html,.ics,.json,.ods,.rtf,.xml,.xls,.xlsx"
                        onChange={handleFileUpload}
                        className={styles.fileInput}
                      />
                      <label htmlFor="fileUpload" className={styles.uploadLabel}>
                        {stepData.uploading ? (
                          <>
                            <FiRefreshCw className={styles.spin} />
                            –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã...
                          </>
                        ) : (
                          <>
                            <FiUpload />
                            –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã
                          </>
                        )}
                      </label>
                    </div>

                    {stepData.uploadCost > 0 && (
                      <div className={styles.costInfo}>
                        <FiDollarSign />
                        <span>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: {stepData.uploadCost} ‚ÇΩ</span>
                      </div>
                    )}

                    {stepData.filesUploaded.length > 0 && (
                      <div className={styles.uploadedFiles}>
                        <h5>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h5>
                        {stepData.filesUploaded.map((file, index) => (
                          <div key={index} className={styles.uploadedFile}>
                            <FiFile />
                            <span>{typeof file === 'string' ? file : file.name}</span>
                            {typeof file === 'object' && file.status === 'success' && (
                              <FiCheckCircle className={styles.fileSuccess} />
                            )}
                            {typeof file === 'object' && file.status === 'error' && (
                              <FiAlertCircle className={styles.fileError} title={file.error} />
                            )}
                            {typeof file === 'string' && (
                              <FiCheckCircle className={styles.fileSuccess} />
                            )}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>

                  <div className={styles.linksSection}>
                    <h4>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º</h4>
                    <div className={styles.comingSoon}>
                      <FiLink />
                      <span>–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è</span>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}

            {/* Step 3: Testing */}
            {currentStep === 3 && (
              <motion.div
                key="step3"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                className={styles.step}
              >
                <div className={styles.stepHeader}>
                  <h3>üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã</h3>
                  <p>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É –≤–∏–¥–∂–µ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º</p>
                </div>

                <div className={styles.testSection}>
                  <div className={styles.demoSection}>
                    <h4>–¢–µ—Å—Ç–æ–≤–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è</h4>
                    <p>–û—Ç–∫—Ä–æ–π—Ç–µ –¥–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É–∂–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –≤–∏–¥–∂–µ—Ç–æ–º:</p>
                    
                    <button 
                      className={styles.demoBtn}
                      onClick={openTestDemo}
                    >
                      <FiExternalLink />
                      –û—Ç–∫—Ä—ã—Ç—å –¥–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü—É
                    </button>
                  </div>

                  <div className={styles.testInstructions}>
                    <h4>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:</h4>
                    <ol>
                      <li>–û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à —Å–∞–π—Ç —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º</li>
                      <li>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –≤–∏–¥–∂–µ—Ç–∞ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É</li>
                      <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É</li>
                      <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</li>
                    </ol>
                  </div>

                  <div className={styles.testConfirmation}>
                    <label className={styles.checkbox}>
                      <input 
                        type="checkbox" 
                        checked={stepData.testCompleted}
                        onChange={(e) => setStepData(prev => ({ ...prev, testCompleted: e.target.checked }))}
                      />
                      <span className={styles.checkmark}></span>
                      –Ø –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –≤–∏–¥–∂–µ—Ç –∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                    </label>
                  </div>

                  {stepData.testCompleted && (
                    <div className={styles.successMessage}>
                      <FiCheckCircle className={styles.successIcon} />
                      <div>
                        <div className={styles.successTitle}>
                          –û—Ç–ª–∏—á–Ω–æ! –í–∏–¥–∂–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
                        </div>
                        <div className={styles.successText}>
                          –í–∞—à —Å–∞–π—Ç —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–∞—â–µ–Ω AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Footer */}
        <div className={styles.footer}>
          <button 
            className={styles.prevBtn}
            onClick={handlePrevStep}
            disabled={currentStep === 1}
          >
            <FiArrowLeft />
            –ù–∞–∑–∞–¥
          </button>

          <div className={styles.stepCounter}>
            –®–∞–≥ {currentStep} –∏–∑ {steps.length}
          </div>

          {currentStep < 3 ? (
            <>
              {currentStep === 2 && (
                <button 
                  className={styles.skipBtn}
                  onClick={handleNextStep}
                >
                  <FiSkipForward />
                  –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                </button>
              )}
              <button 
                className={styles.nextBtn}
                onClick={handleNextStep}
                disabled={currentStep === 1 && !stepData.tokenGenerated}
              >
                {currentStep === 2 ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '–î–∞–ª–µ–µ'}
                <FiArrowRight />
              </button>
            </>
          ) : (
            <button 
              className={styles.completeBtn}
              onClick={() => {
                onComplete();
                onClose();
              }}
              disabled={!stepData.testCompleted}
            >
              <FiSettings />
              –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞
            </button>
          )}
        </div>
      </motion.div>
    </div>
  );
};

export default WebsiteSetupWizard;