import { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import { getChannelType } from '../utils/dialogHelpers';
import { API_URL } from '../config/api';
import { useNotifications } from './useNotifications';

/**
 * –•—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ polling –∏–ª–∏ WebSocket
 */
export const useDialogSync = ({ enabled = true, interval = 30000, filters = {} }) => {
  const { showSuccess, showError, showWarning, showInfo } = useNotifications();
  const [dialogs, setDialogs] = useState([]);
  const [bots, setBots] = useState([]);
  const [channels, setChannels] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [wsConnected, setWsConnected] = useState(false);
  const [lastUpdate, setLastUpdate] = useState(null);
  const [errorCount, setErrorCount] = useState(0);
  
  // Pagination state - –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ Load More —Å–∏—Å—Ç–µ–º—É
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize] = useState(50);
  const [totalDialogs, setTotalDialogs] = useState(0);
  const [hasNextPage, setHasNextPage] = useState(false);
  const [loadMoreLoading, setLoadMoreLoading] = useState(false);
  const [allDialogs, setAllDialogs] = useState([]); // –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
  const [handoffDialogs, setHandoffDialogs] = useState([]); // –î–∏–∞–ª–æ–≥–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ handoff
  
  // Refs –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤
  const lastFiltersRef = useRef(null); // –ù–∞—á–∏–Ω–∞–µ–º —Å null –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const lastLoadTimeRef = useRef(0);
  const debounceTimeoutRef = useRef(null);
  const isLoadingRef = useRef(false);
  const cacheRef = useRef(new Map()); // –ö—ç—à –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
  const lastCacheCleanupRef = useRef(0);
  const loadingTimeoutRef = useRef(null);
  const initialLoadDoneRef = useRef(false); // –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (debouncing)
  const MIN_REQUEST_INTERVAL = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
  const CACHE_TTL = 10000; // 10 —Å–µ–∫—É–Ω–¥ –∫—ç—à (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤)
  const CACHE_CLEANUP_INTERVAL = 60000; // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
  const cleanupCache = useCallback(() => {
    const now = Date.now();
    const cache = cacheRef.current;
    
    for (const [key, { timestamp }] of cache.entries()) {
      if (now - timestamp > CACHE_TTL) {
        cache.delete(key);
      }
    }
    
    lastCacheCleanupRef.current = now;
  }, []);

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const performanceMetrics = useRef({
    apiCalls: 0,
    cacheHits: 0,
    errors: 0,
    avgResponseTime: 0
  });

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ handoff (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞)
  const loadHandoffDialogs = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${API_URL}/api/dialogs?status=handoff_requested&limit=100`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      if (response.ok) {
        const data = await response.json();
        setHandoffDialogs(data.items || []);
      }
    } catch (error) {
      console.error('Error loading handoff dialogs:', error);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å debouncing –∏ rate limiting
  const loadData = useCallback(async (forceLoad = false, loadMore = false) => {
    const now = Date.now();
    const startTime = performance.now();
    const timeSinceLastLoad = now - lastLoadTimeRef.current;

    performanceMetrics.current.apiCalls++;
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    if (now - lastCacheCleanupRef.current > CACHE_CLEANUP_INTERVAL) {
      cleanupCache();
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    const pageToLoad = loadMore ? currentPage + 1 : currentPage;
    const cacheKey = JSON.stringify({ filters, page: pageToLoad, pageSize });
    const cached = cacheRef.current.get(cacheKey);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    if (!forceLoad && cached && (now - cached.timestamp < CACHE_TTL)) {
      console.log('üì¶ [useDialogSync] Using cached data for key:', cacheKey);
      performanceMetrics.current.cacheHits++;

      const { data } = cached;
      
      if (loadMore) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∏–∞–ª–æ–≥–∞–º
        setAllDialogs(prev => [...prev, ...data.dialogs]);
        setDialogs(prev => [...prev, ...data.dialogs]);
        setCurrentPage(pageToLoad);
        setLoadMoreLoading(false);
      } else {
        // –ó–∞–º–µ–Ω—è–µ–º –¥–∏–∞–ª–æ–≥–∏ (–æ–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
        setDialogs(data.dialogs);
        setAllDialogs(data.dialogs);
        if (!loadMore) {
          setCurrentPage(1);
        }
      }
      
      setBots(data.bots);
      setChannels(data.channels);
      setTotalDialogs(data.totalDialogs);
      setHasNextPage(data.hasNextPage);
      setLastUpdate(new Date(cached.timestamp));
      setLoading(false);

      // –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const responseTime = performance.now() - startTime;
      console.log('üìä [useDialogSync] Cache hit performance:', {
        responseTime: `${responseTime.toFixed(2)}ms`,
        cacheHit: true,
        totalApiCalls: performanceMetrics.current.apiCalls,
        cacheHitRate: `${((performanceMetrics.current.cacheHits / performanceMetrics.current.apiCalls) * 100).toFixed(1)}%`
      });

      return;
    } else if (cached) {
      console.log('üì¶ [useDialogSync] Cache expired, refreshing data');
    } else {
      console.log('üì¶ [useDialogSync] No cache found for key:', cacheKey);
    }
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã
    if (!forceLoad && timeSinceLastLoad < MIN_REQUEST_INTERVAL) {
      console.log('üö¶ [useDialogSync] Request throttled, too soon since last request');
      return;
    }
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (isLoadingRef.current && !forceLoad) {
      console.log('üö¶ [useDialogSync] Request skipped, already loading');
      return;
    }
    
    console.log('üîÑ [useDialogSync] loadData called at', new Date().toISOString());
    const token = localStorage.getItem('token');
    if (!token) {
      console.error('‚ùå [useDialogSync] No token found');
      setError('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      setLoading(false);
      return;
    }
    
    isLoadingRef.current = true;
    lastLoadTimeRef.current = now;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è
    if (loadingTimeoutRef.current) {
      clearTimeout(loadingTimeoutRef.current);
    }
    
    loadingTimeoutRef.current = setTimeout(() => {
      console.error('‚ö†Ô∏è [useDialogSync] Loading timeout - forcing loading to false');
      setLoading(false);
      isLoadingRef.current = false;
      setError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }, 15000); // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    try {
      setError('');
      console.log('üì° [useDialogSync] Making API calls...', { 
        filters,
        cacheKey,
        currentPage,
        pageSize 
      });
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
      const params = new URLSearchParams({
        page: pageToLoad.toString(),
        limit: pageSize.toString(),
        sort_by: 'last_message_at', // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        sort_order: 'desc' // –ù–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Å–Ω–∞—á–∞–ª–∞
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (filters.search) params.append('search', filters.search);
      if (filters.status && filters.status !== 'all') params.append('status', filters.status);
      if (filters.channel) params.append('channel', filters.channel);
      if (filters.assistant_id) params.append('assistant_id', filters.assistant_id.toString());
      if (filters.time_filter && filters.time_filter !== 'all') params.append('time_filter', filters.time_filter);
      
      console.log('üîç [useDialogSync] Applied filters:', {
        search: filters.search || 'none',
        status: filters.status || 'all',
        channel: filters.channel || 'none',
        assistant_id: filters.assistant_id || 'none',
        time_filter: filters.time_filter || 'all',
        finalParams: params.toString()
      });
      
      const [dialogsRes, filtersRes] = await Promise.all([
        fetch(`${API_URL}/api/dialogs?${params.toString()}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        }),
        fetch(`${API_URL}/api/dialogs/filters-data`, {
          headers: { 'Authorization': `Bearer ${token}` }
        })
      ]);

      console.log('üìä [useDialogSync] API responses:', {
        dialogsOk: dialogsRes.ok,
        dialogsStatus: dialogsRes.status,
        filtersOk: filtersRes.ok, 
        filtersStatus: filtersRes.status
      });

      if (!dialogsRes.ok || !filtersRes.ok) {
        const dialogsError = dialogsRes.ok ? null : await dialogsRes.text();
        const filtersError = filtersRes.ok ? null : await filtersRes.text();
        console.error('‚ùå [useDialogSync] API errors:', { dialogsError, filtersError });
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      }

      const [dialogsData, filtersData] = await Promise.all([
        dialogsRes.json(),
        filtersRes.json()
      ]);

      console.log('üìà [useDialogSync] Data received:', {
        dialogsCount: Array.isArray(dialogsData) ? dialogsData.length : (dialogsData?.items?.length || 0),
        botsCount: Array.isArray(filtersData?.bots) ? filtersData.bots.length : 0,
        channelsCount: Array.isArray(filtersData?.channels) ? filtersData.channels.length : 0,
        dialogsType: typeof dialogsData,
        filtersType: typeof filtersData
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      let processedDialogs = [];
      let total = 0;
      
      if (dialogsData.items && Array.isArray(dialogsData.items)) {
        // –ù–æ–≤—ã–π API —Ñ–æ—Ä–º–∞—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        processedDialogs = dialogsData.items;
        total = dialogsData.total || 0;
        console.log('üìÑ [useDialogSync] Pagination data:', {
          page: dialogsData.page,
          total: dialogsData.total,
          pages: dialogsData.pages,
          limit: dialogsData.limit
        });
      } else if (Array.isArray(dialogsData)) {
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–º–∞—Å—Å–∏–≤)
        processedDialogs = dialogsData;
        total = dialogsData.length;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      if (loadMore) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        setAllDialogs(prev => [...prev, ...processedDialogs]);
        setDialogs(prev => [...prev, ...processedDialogs]);
        setCurrentPage(pageToLoad);
        setLoadMoreLoading(false);
      } else {
        // –ó–∞–º–µ–Ω—è–µ–º –¥–∏–∞–ª–æ–≥–∏ (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã)
        setDialogs(processedDialogs);
        setAllDialogs(processedDialogs);
        if (!loadMore) {
          setCurrentPage(1);
        }
      }
      
      setTotalDialogs(total);
      setHasNextPage(total > (loadMore ? allDialogs.length + processedDialogs.length : processedDialogs.length));
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –Ω–æ–≤–æ–≥–æ API
      setBots(Array.isArray(filtersData?.bots) ? filtersData.bots : []);
      setChannels(Array.isArray(filtersData?.channels) ? filtersData.channels : []);
      setLastUpdate(new Date());
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      setErrorCount(0);
      setError('');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ handoff –æ—Ç–¥–µ–ª—å–Ω–æ
      await loadHandoffDialogs();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
      const cacheData = {
        dialogs: processedDialogs,
        bots: Array.isArray(filtersData?.bots) ? filtersData.bots : [],
        channels: Array.isArray(filtersData?.channels) ? filtersData.channels : [],
        totalDialogs: total,
        hasNextPage: processedDialogs.length === pageSize
      };
      
      cacheRef.current.set(cacheKey, {
        data: cacheData,
        timestamp: now
      });
      
      console.log('‚úÖ [useDialogSync] Data loaded successfully:', {
        finalDialogsCount: processedDialogs.length,
        finalBotsCount: Array.isArray(filtersData?.bots) ? filtersData.bots.length : 0,
        finalChannelsCount: Array.isArray(filtersData?.channels) ? filtersData.channels.length : 0,
        cached: true,
        sampleDialog: processedDialogs[0] ? {
          id: processedDialogs[0].id,
          handoff_status: processedDialogs[0].handoff_status,
          is_taken_over: processedDialogs[0].is_taken_over
        } : 'no dialogs'
      });

      // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const totalResponseTime = performance.now() - startTime;
      const currentAvgTime = performanceMetrics.current.avgResponseTime;
      const newAvgTime = (currentAvgTime * (performanceMetrics.current.apiCalls - 1) + totalResponseTime) / performanceMetrics.current.apiCalls;
      performanceMetrics.current.avgResponseTime = newAvgTime;

      console.log('üìä [useDialogSync] Final performance metrics:', {
        totalResponseTime: `${totalResponseTime.toFixed(2)}ms`,
        avgResponseTime: `${newAvgTime.toFixed(2)}ms`,
        cacheHitRate: `${((performanceMetrics.current.cacheHits / performanceMetrics.current.apiCalls) * 100).toFixed(1)}%`,
        totalApiCalls: performanceMetrics.current.apiCalls,
        totalErrors: performanceMetrics.current.errors
      });

    } catch (err) {
      console.error('‚ùå [useDialogSync] Error loading data:', err);
      const newErrorCount = errorCount + 1;
      setErrorCount(newErrorCount);
      performanceMetrics.current.errors++;
      
      // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
      if (newErrorCount >= 3) {
        setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø–æ–ø—ã—Ç–∫–∞ ${newErrorCount}). –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${Math.min(60, newErrorCount * 10)} —Å–µ–∫—É–Ω–¥.`);
      } else {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      }
    } finally {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
      if (loadingTimeoutRef.current) {
        clearTimeout(loadingTimeoutRef.current);
        loadingTimeoutRef.current = null;
      }
      
      setLoading(false);
      setLoadMoreLoading(false);
      isLoadingRef.current = false;
    }
  }, [filters, currentPage, pageSize]);

  // –§—É–Ω–∫—Ü–∏—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
  const invalidateCache = useCallback(() => {
    console.log('üóëÔ∏è [useDialogSync] Cache invalidated');
    cacheRef.current.clear();
  }, []);

  // Debounced –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const debouncedLoadData = useCallback((immediate = false) => {
    if (debounceTimeoutRef.current) {
      clearTimeout(debounceTimeoutRef.current);
    }
    
    if (immediate) {
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      loadData(true);
    } else {
      debounceTimeoutRef.current = setTimeout(() => {
        loadData(true);
      }, 300); // 300ms debounce
    }
  }, [loadData]);
  
  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const filtersString = useMemo(() => JSON.stringify(filters), [filters]);
  
  // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    const currentFiltersString = JSON.stringify(filters);
    const filtersChanged = lastFiltersRef.current !== null && lastFiltersRef.current !== currentFiltersString;
    const isInitialLoad = !initialLoadDoneRef.current;
    
    console.log('üìã [useDialogSync] Effect triggered:', {
      filtersChanged,
      isInitialLoad,
      initialLoadDone: initialLoadDoneRef.current,
      lastFilters: lastFiltersRef.current,
      currentFilters: currentFiltersString,
      loading,
      isLoadingRef: isLoadingRef.current
    });
    
    if (isInitialLoad) {
      // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      console.log('üîÑ [useDialogSync] Initial load');
      lastFiltersRef.current = currentFiltersString;
      initialLoadDoneRef.current = true;
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      debouncedLoadData(true);
    } else if (filtersChanged) {
      console.log('üîÑ [useDialogSync] Filters changed, triggering debounced reload');
      lastFiltersRef.current = currentFiltersString;
      // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      invalidateCache();
      debouncedLoadData();
    } else {
      console.log('‚è≠Ô∏è [useDialogSync] No changes detected, skipping load');
    }
  }, [filtersString, currentPage, debouncedLoadData, invalidateCache]);

  // Polling –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å adaptive interval –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  useEffect(() => {
    if (!enabled || !interval) return;

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫
    const dynamicInterval = errorCount >= 3 ? 
      Math.min(60000, interval + (errorCount * 10000)) : interval;

    const pollingTimer = setInterval(() => {
      if (!isLoadingRef.current) {
        loadData(false); // –ù–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è polling
        setWsConnected(true); // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      }
    }, dynamicInterval);

    return () => {
      clearInterval(pollingTimer);
      setWsConnected(false);
    };
  }, [enabled, interval, errorCount]); // –£–±–∏—Ä–∞–µ–º loadData –∏ loading –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  
  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (debounceTimeoutRef.current) {
        clearTimeout(debounceTimeoutRef.current);
      }
      if (loadingTimeoutRef.current) {
        clearTimeout(loadingTimeoutRef.current);
      }
    };
  }, []);

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
  const takeoverDialog = useCallback(async (dialogId) => {
    const token = localStorage.getItem('token');
    console.log('Takeover dialog attempt:', dialogId);
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞
      const statusResponse = await fetch(`${API_URL}/api/dialogs/${dialogId}/handoff/status`);
      let currentStatus = 'none';
      
      if (statusResponse.ok) {
        const statusData = await statusResponse.json();
        currentStatus = statusData.status;
        console.log('Current dialog handoff status:', currentStatus);
      }
      
      // –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'requested', —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º handoff
      if (currentStatus !== 'requested') {
        console.log('Dialog not in requested state, requesting handoff first...');
        const requestResponse = await fetch(`${API_URL}/api/dialogs/${dialogId}/handoff/request`, {
          method: 'POST',
          headers: { 
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            reason: 'manual',
            request_id: crypto.randomUUID()
          })
        });
        
        if (!requestResponse.ok) {
          const errorData = await requestResponse.json().catch(() => ({}));
          throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ handoff');
        }
        
        console.log('Handoff requested successfully');
      }
      
      console.log('Making takeover request to:', `${API_URL}/api/dialogs/${dialogId}/handoff/takeover`);
      const response = await fetch(`${API_URL}/api/dialogs/${dialogId}/handoff/takeover`, {
        method: 'POST',
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({})
      });
      
      console.log('Takeover response status:', response.status);
      
      if (response.ok) {
        const result = await response.json();
        console.log('Takeover success:', result);
        invalidateCache(); // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await loadData(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      } else {
        const errorData = await response.json();
        console.error('Takeover error response:', errorData);
        showError(`–û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞: ${errorData.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, { title: '–û—à–∏–±–∫–∞' });
        throw new Error(errorData.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –¥–∏–∞–ª–æ–≥');
      }
    } catch (err) {
      console.error('Error taking over dialog:', err);
      showError(`–û—à–∏–±–∫–∞: ${err.message}`, { title: '–û—à–∏–±–∫–∞' });
      throw err;
    }
  }, [loadData, invalidateCache]);

  const releaseDialog = useCallback(async (dialogId) => {
    const token = localStorage.getItem('token');
    try {
      const response = await fetch(`${API_URL}/api/dialogs/${dialogId}/handoff/release`, {
        method: 'POST',
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({})
      });
      if (response.ok) {
        invalidateCache(); // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await loadData(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      } else {
        const errorData = await response.json();
        throw new Error(errorData.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥');
      }
    } catch (err) {
      console.error('Error releasing dialog:', err);
      throw err;
    }
  }, [loadData, invalidateCache]);

  const cancelHandoff = useCallback(async (dialogId) => {
    const token = localStorage.getItem('token');
    try {
      const response = await fetch(`${API_URL}/api/dialogs/${dialogId}/handoff/cancel`, {
        method: 'POST',
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({})
      });
      if (response.ok) {
        invalidateCache(); // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await loadData(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      } else {
        const errorData = await response.json();
        throw new Error(errorData.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å');
      }
    } catch (err) {
      console.error('Error cancelling handoff:', err);
      throw err;
    }
  }, [loadData, invalidateCache]);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ (Load More)
  const loadMoreDialogs = useCallback(async () => {
    if (hasNextPage && !loadMoreLoading && !loading) {
      setLoadMoreLoading(true);
      try {
        await loadData(false, true); // loadMore = true
      } catch (error) {
        console.error('Error loading more dialogs:', error);
        setLoadMoreLoading(false);
      }
    }
  }, [hasNextPage, loadMoreLoading, loading, loadData]);

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (legacy, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const goToPage = useCallback((page) => {
    if (page >= 1 && page <= Math.ceil(totalDialogs / pageSize) && page !== currentPage && !loading) {
      setCurrentPage(page);
    }
  }, [totalDialogs, pageSize, currentPage, loading]);

  // –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const resetPagination = useCallback(() => {
    setCurrentPage(1);
  }, []);
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤)
  useEffect(() => {
    const shouldReset = currentPage !== 1;
    if (shouldReset) {
      console.log('üîÑ [useDialogSync] Resetting to page 1 due to filter change');
      setCurrentPage(1);
      // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      invalidateCache();
    }
  }, [filtersString, invalidateCache]); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤

  return {
    // –î–∞–Ω–Ω—ã–µ
    dialogs, // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    allDialogs, // –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–¥–ª—è HandoffQueue)
    handoffDialogs, // –î–∏–∞–ª–æ–≥–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ handoff (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤)
    bots,
    channels,
    loading,
    error,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    wsConnected,
    lastUpdate,
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è (Load More —Å–∏—Å—Ç–µ–º–∞)
    currentPage,
    totalDialogs,
    pageSize,
    totalPages: Math.ceil(totalDialogs / pageSize),
    hasNextPage,
    hasPrevPage: currentPage > 1,
    loadMoreLoading,
    
    // –ú–µ—Ç–æ–¥—ã
    loadData: () => loadData(true), // –í—Å–µ–≥–¥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è —Ä—É—á–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    loadMoreDialogs, // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Load More
    loadHandoffDialogs, // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏ handoff
    goToPage,
    resetPagination,
    takeoverDialog,
    releaseDialog,
    cancelHandoff
  };
};