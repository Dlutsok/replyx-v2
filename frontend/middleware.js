import { NextResponse } from 'next/server'

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–æ–º–µ–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 */
function normalizeDomain(domain) {
  if (!domain) return ""
  
  domain = domain.toLowerCase().trim()
  
  // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
  if (domain.startsWith('http://') || domain.startsWith('https://')) {
    try {
      const url = new URL(domain)
      domain = url.hostname
    } catch {
      // Fallback –µ—Å–ª–∏ URL –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
    }
  }
  
  // –£–±–∏—Ä–∞–µ–º www. –ø—Ä–µ—Ñ–∏–∫—Å
  if (domain.startsWith('www.')) {
    domain = domain.substring(4)
  }
  
  // –£–±–∏—Ä–∞–µ–º trailing slash
  domain = domain.replace(/\/$/, '')
  
  return domain
}

/**
 * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–æ–º–µ–Ω–æ–≤ –≤ –º–∞—Å—Å–∏–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
 */
function parseAllowedDomains(domainsStr) {
  if (!domainsStr || !domainsStr.trim()) {
    return []
  }
  
  return domainsStr
    .split(',')
    .map(d => normalizeDomain(d.trim()))
    .filter(d => d.length > 0)
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –≤–∏–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ backend API
 */
async function validateWidgetToken(token, request) {
  try {
    if (!token) {
      console.warn("CSP Middleware: –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
      return null
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º backend URL
    const backendUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'
    
    console.log(`CSP Middleware: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ ${backendUrl}/api/validate-widget-token`)
    
    // –í—ã–∑—ã–≤–∞–µ–º backend API –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
    const response = await fetch(`${backendUrl}/api/validate-widget-token`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        token: token
      })
    })

    if (!response.ok) {
      console.warn(`CSP Middleware: Backend –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status}`)
      return null
    }

    const result = await response.json()
    
    if (!result.valid) {
      console.warn(`CSP Middleware: –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π: ${result.reason}`)
      return null
    }

    console.log(`CSP Middleware: –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –¥–ª—è assistant_id=${result.assistant_id}`)
    
    return {
      valid: true,
      assistant_id: result.assistant_id,
      allowed_domains: result.allowed_domains || '',
      user_id: result.user_id
    }
    
  } catch (e) {
    console.error(`CSP Middleware: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${e.message}`)
    return null
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSP –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
 */
function generateCSPHeader(allowedDomains) {
  // –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  const baseDomains = ["'self'", "https://replyx.ru", "https://www.replyx.ru"]
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω—ã –∏–∑ —Ç–æ–∫–µ–Ω–∞
  for (const domain of allowedDomains) {
    // –î–æ–±–∞–≤–ª—è–µ–º https –≤–∞—Ä–∏–∞–Ω—Ç—ã
    baseDomains.push(`https://${domain}`)
    baseDomains.push(`https://www.${domain}`)
    
    // –í dev —Ä–µ–∂–∏–º–µ —Ç–∞–∫–∂–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º http
    if (domain.includes('localhost') || domain.includes('127.0.0.1') || process.env.NODE_ENV === 'development') {
      baseDomains.push(`http://${domain}`)
    }
  }
  
  // –†–∞–∑—Ä–µ—à–∞–µ–º backend origin –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ (dev/prod)
  let backendOrigin = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'
  try {
    const u = new URL(backendOrigin)
    backendOrigin = `${u.protocol}//${u.host}`
  } catch (e) {
    backendOrigin = 'http://localhost:8000'
  }

  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  const uniqueDomains = [...new Set(baseDomains)]
  const frameAncestors = uniqueDomains.join(' ')
  
  // –ü–æ–ª–Ω—ã–π CSP –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è iframe
  return [
    `frame-ancestors ${frameAncestors}`,
    "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob: https:",
    "script-src 'self' 'unsafe-inline' 'unsafe-eval' https:",
    "style-src 'self' 'unsafe-inline' https:",
    "img-src 'self' data: blob: https:",
    `connect-src 'self' https: wss: ws: ${backendOrigin}`,
    "font-src 'self' https:"
  ].join('; ')
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω—ã–π CSP –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
 */
function generateRestrictiveCSP() {
  return [
    "frame-ancestors 'self'",
    "default-src 'self'",
    "script-src 'self'",
    "style-src 'self'",
    "img-src 'self' data:",
    "connect-src 'self'"
  ].join('; ')
}

/**
 * Middleware –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è iframe —Å—Ç—Ä–∞–Ω–∏—Ü
 */
export async function middleware(request) {
  const { pathname, searchParams } = request.nextUrl
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –∫ iframe —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  if (!pathname.startsWith('/chat-iframe')) {
    return NextResponse.next()
  }
  
  console.log(`üõ°Ô∏è CSP Middleware: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é iframe –∑–∞–ø—Ä–æ—Å: ${pathname}`)
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const siteToken = searchParams.get('site_token')
  
  if (!siteToken) {
    console.warn("CSP Middleware: site_token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω—ã–π CSP
    const response = NextResponse.next()
    response.headers.set('Content-Security-Policy', generateRestrictiveCSP())
    return response
  }
  
  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ backend API
  const tokenInfo = await validateWidgetToken(siteToken, request)
  
  if (!tokenInfo || !tokenInfo.valid) {
    console.warn("CSP Middleware: –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø—Ä–∏–º–µ–Ω—è—é –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω—ã–π CSP")
    const response = NextResponse.next()
    response.headers.set('Content-Security-Policy', generateRestrictiveCSP())
    return response
  }
  
  // –ü–∞—Ä—Å–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  const allowedDomains = parseAllowedDomains(tokenInfo.allowed_domains)
  
  if (allowedDomains.length === 0) {
    console.warn("CSP Middleware: –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤, –ø—Ä–∏–º–µ–Ω—è—é –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω—ã–π CSP")
    const response = NextResponse.next()
    response.headers.set('Content-Security-Policy', generateRestrictiveCSP())
    return response
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π CSP
  const dynamicCSP = generateCSPHeader(allowedDomains)
  
  console.log(`‚úÖ CSP Middleware: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è assistant_id=${tokenInfo.assistant_id}: ${allowedDomains.join(', ')}`)
  console.log(`CSP –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${dynamicCSP}`)
  
  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º CSP –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
  const response = NextResponse.next()
  response.headers.set('Content-Security-Policy', dynamicCSP)
  
  // –£–±–∏—Ä–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π X-Frame-Options (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π CSP)
  
  return response
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ matcher –¥–ª—è middleware
export const config = {
  matcher: [
    '/chat-iframe/:path*'
  ]
}