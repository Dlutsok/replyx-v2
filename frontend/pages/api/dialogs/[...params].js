import { createProxyMiddleware } from 'http-proxy-middleware';

const proxy = createProxyMiddleware({
  target: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',
  changeOrigin: true,
  pathRewrite: {
    '^/api/dialogs': '/api/dialogs', // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  },
  onError: (err, req, res) => {
    console.error('SSE Proxy error:', err.message);
    res.status(500).json({ error: 'Proxy error' });
  },
  onProxyReq: (proxyReq, req, res) => {
    console.log(`üîÑ [SSE Proxy] ${req.method} ${req.url} -> ${proxyReq.path}`);
  },
  onProxyRes: (proxyRes, req, res) => {
    // –î–ª—è SSE –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (req.url.includes('/events')) {
      proxyRes.headers['cache-control'] = 'no-cache';
      proxyRes.headers['connection'] = 'keep-alive';
      proxyRes.headers['content-type'] = 'text/event-stream';
      proxyRes.headers['access-control-allow-origin'] = '*';
      proxyRes.headers['access-control-allow-headers'] = 'Last-Event-ID, Cache-Control';
    }
  },
  // –í–∞–∂–Ω–æ –¥–ª—è SSE: –Ω–µ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
  buffer: false,
  // –î–ª—è SSE –ø–æ—Ç–æ–∫–æ–≤
  selfHandleResponse: false,
  // –¢–∞–π–º–∞—É—Ç –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  timeout: 0,
});

export default function handler(req, res) {
  // –û—Ç–∫–ª—é—á–∞–µ–º Next.js body parsing –¥–ª—è –ø—Ä–æ–∫—Å–∏
  return proxy(req, res);
}

export const config = {
  api: {
    bodyParser: false,
    externalResolver: true,
  },
};
