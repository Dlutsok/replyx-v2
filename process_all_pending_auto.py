#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
"""
import os
import sys
sys.path.append('/Users/dan/Documents/chatAI/MVP 13/backend')

from sqlalchemy.orm import Session
from database.connection import SessionLocal
from database.models import Payment
from services.balance_service import BalanceService
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def process_pending_payment(order_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    db = SessionLocal()
    try:
        payment = db.query(Payment).filter(Payment.order_id == order_id).first()
        
        if not payment:
            logger.error(f"–ü–ª–∞—Ç–µ–∂ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False, 0
        
        if payment.status == 'success':
            logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {order_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return True, 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –±–∞–ª–∞–Ω—Å–∞
        balance_service = BalanceService(db)
        
        logger.info(f"üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ {payment.order_id}: {payment.amount} —Ä—É–± (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {payment.user_id})")
        
        transaction = balance_service.top_up_balance(
            user_id=payment.user_id,
            amount=float(payment.amount),
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫ (–∑–∞–∫–∞–∑ {payment.order_id}) - –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment.status = 'success'
        db.commit()
        
        logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {order_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction.id}")
        
        return True, float(payment.amount)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {order_id}: {e}")
        db.rollback()
        return False, 0
    finally:
        db.close()

def main():
    logger.info("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")
    
    db = SessionLocal()
    try:
        payments = db.query(Payment).filter(Payment.status == 'pending').order_by(Payment.created_at).all()
        
        if not payments:
            logger.info("‚úÖ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            return
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(payments)} –ø–ª–∞—Ç–µ–∂–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total_amount = sum(float(p.amount) for p in payments)
        logger.info(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é: {total_amount:,.2f} —Ä—É–±")
        
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        success_count = 0
        total_processed = 0.0
        
        for i, payment in enumerate(payments, 1):
            logger.info(f"\n[{i}/{len(payments)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {payment.order_id}...")
            success, amount = process_pending_payment(payment.order_id)
            if success:
                success_count += 1
                total_processed += amount
        
        logger.info(f"\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count} –∏–∑ {len(payments)} –ø–ª–∞—Ç–µ–∂–µ–π")
        logger.info(f"   –ü–æ–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É: {total_processed:,.2f} —Ä—É–±")
        logger.info(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫: {len(payments) - success_count}")
        
    finally:
        db.close()

if __name__ == "__main__":
    main()