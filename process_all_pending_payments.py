#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
"""
import os
import sys
sys.path.append('/Users/dan/Documents/chatAI/MVP 13/backend')

from sqlalchemy.orm import Session
from database.connection import SessionLocal
from database.models import Payment
from services.balance_service import BalanceService
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def find_pending_payments():
    """–ù–∞–π—Ç–∏ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending"""
    db = SessionLocal()
    try:
        payments = db.query(Payment).filter(Payment.status == 'pending').order_by(Payment.created_at).all()
        return payments
    finally:
        db.close()

def process_pending_payment(order_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    db = SessionLocal()
    try:
        payment = db.query(Payment).filter(Payment.order_id == order_id).first()
        
        if not payment:
            logger.error(f"–ü–ª–∞—Ç–µ–∂ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        if payment.status == 'success':
            logger.info(f"–ü–ª–∞—Ç–µ–∂ {order_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return True
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –±–∞–ª–∞–Ω—Å–∞
        balance_service = BalanceService(db)
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        logger.info(f"üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ {payment.order_id}:")
        logger.info(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment.user_id}")
        logger.info(f"   –°—É–º–º–∞: {payment.amount} —Ä—É–±")
        logger.info(f"   –°–æ–∑–¥–∞–Ω: {payment.created_at}")
        
        transaction = balance_service.top_up_balance(
            user_id=payment.user_id,
            amount=float(payment.amount),
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫ (–∑–∞–∫–∞–∑ {payment.order_id}) - —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment.status = 'success'
        db.commit()
        
        logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {order_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        logger.info(f"   –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {payment.amount} —Ä—É–±")
        logger.info(f"   ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction.id}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {order_id}: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def main():
    logger.info("üîç –ü–æ–∏—Å–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏
    pending_payments = find_pending_payments()
    
    if not pending_payments:
        logger.info("‚úÖ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        return
    
    logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(pending_payments)} –ø–ª–∞—Ç–µ–∂–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending':")
    
    for payment in pending_payments:
        logger.info(f"  - {payment.order_id}: {payment.amount} —Ä—É–± (—Å–æ–∑–¥–∞–Ω {payment.created_at})")
    
    print("\n" + "="*60)
    response = input(f"–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ {len(pending_payments)} –ø–ª–∞—Ç–µ–∂–µ–π? (y/N): ")
    
    if response.lower() != 'y':
        logger.info("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    success_count = 0
    for payment in pending_payments:
        if process_pending_payment(payment.order_id):
            success_count += 1
        print()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø–ª–∞—Ç–µ–∂–∞–º–∏
    
    logger.info(f"üéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count} –∏–∑ {len(pending_payments)} –ø–ª–∞—Ç–µ–∂–µ–π!")

if __name__ == "__main__":
    main()