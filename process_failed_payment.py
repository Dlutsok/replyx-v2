#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ webhook
"""
import os
import sys
sys.path.append('/Users/dan/Documents/chatAI/MVP 13/backend')

from sqlalchemy.orm import Session
from database.connection import SessionLocal
from database.models import Payment
from services.balance_service import BalanceService
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def process_completed_payment(order_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –≤—Ä—É—á–Ω—É—é"""
    db = SessionLocal()
    try:
        # –ù–∞–π—Ç–∏ –ø–ª–∞—Ç–µ–∂
        payment = db.query(Payment).filter(Payment.order_id == order_id).first()
        
        if not payment:
            logger.error(f"–ü–ª–∞—Ç–µ–∂ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return False
        
        logger.info(f"–ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂: {payment.order_id}")
        logger.info(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment.user_id}")
        logger.info(f"  –°—É–º–º–∞: {payment.amount} —Ä—É–±")
        logger.info(f"  –°—Ç–∞—Ç—É—Å: {payment.status}")
        logger.info(f"  –°–æ–∑–¥–∞–Ω: {payment.created_at}")
        
        if payment.status == 'success':
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ {order_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Å—Ç–∞—Ç—É—Å: success)")
            return True
        
        if payment.status != 'pending':
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ {order_id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å {payment.status}, –æ–∂–∏–¥–∞–ª—Å—è pending")
            response = input(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É? (y/N): ")
            if response.lower() != 'y':
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ...")
        
        # –ü–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ç–∞–∫ –∫–∞–∫ webhook —É–∂–µ –ø—Ä–∏—à–µ–ª —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º CONFIRMED
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –±–∞–ª–∞–Ω—Å–∞
            balance_service = BalanceService(db)
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
            logger.info(f"üí∞ –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {payment.user_id} –Ω–∞ {payment.amount} —Ä—É–±...")
            
            transaction = balance_service.top_up_balance(
                user_id=payment.user_id,
                amount=float(payment.amount),
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫ (–∑–∞–∫–∞–∑ {payment.order_id}) - —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            payment.status = 'success'
            db.commit()
            
            logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {order_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:")
            logger.info(f"   –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {payment.amount} —Ä—É–±")
            logger.info(f"   ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction.id}")
            logger.info(f"   –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: pending ‚Üí success")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ {order_id}: {e}")
            db.rollback()
            return False
    finally:
        db.close()

def main():
    # ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ 2500 —Ä—É–± –∏–∑ –ª–æ–≥–æ–≤
    order_id = "replyx_1757512906_c339838e"
    
    logger.info(f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ {order_id} –≤—Ä—É—á–Ω—É—é...")
    
    success = process_completed_payment(order_id)
    
    if success:
        logger.info("üéâ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂")
        sys.exit(1)

if __name__ == "__main__":
    main()