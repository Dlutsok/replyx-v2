#!/usr/bin/env python3
"""
üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π bootstrap-—Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ReplyX

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  export FIRST_ADMIN_EMAIL="admin@your-domain.com"
  export FIRST_ADMIN_MODE="invite"  # –∏–ª–∏ "interactive"
  export PUBLIC_APP_URL="https://replyx.your-domain.com"
  python scripts/admin_bootstrap.py

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ)
- –ù–µ —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä–æ–ª–∏ –≤ —Ä–µ–ø–æ/–ª–æ–≥–∞—Ö
- Invite-—Ä–µ–∂–∏–º —Å–æ–∑–¥–∞—ë—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
- Interactive-—Ä–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–∏—Ç –ø–∞—Ä–æ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–µ—Ä–µ–∑ getpass
"""

import os
import sys
import secrets
from datetime import datetime, timedelta
from getpass import getpass
from sqlalchemy import select

# –î–æ–±–∞–≤–ª—è–µ–º backend –∫ –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
backend_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'backend')
sys.path.insert(0, backend_path)

from database.connection import SessionLocal
from database.models import User, UserBalance, BalanceTransaction
from core.auth import get_password_hash
from integrations.email_service import EmailService
from decimal import Decimal


def check_admin_exists(db) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"""
    admin_query = select(User).where(User.role == "admin")
    return db.execute(admin_query).first() is not None


def create_admin_balance(db, user: User, initial_balance: Decimal = Decimal('200000.00')):
    """–°–æ–∑–¥–∞—ë—Ç –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π"""
    try:
        # Ensure user.id is available
        if not user.id:
            db.flush()  # Flush to get the user.id
        
        print(f"üí∞ Creating balance for user ID {user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –±–∞–ª–∞–Ω—Å
        existing_balance = db.execute(select(UserBalance).where(UserBalance.user_id == user.id)).scalar_one_or_none()
        
        if existing_balance:
            print(f"üí∞ User already has balance: {existing_balance.balance} —Ä—É–±")
            return existing_balance
        
        # –°–æ–∑–¥–∞—ë–º –±–∞–ª–∞–Ω—Å
        user_balance = UserBalance(
            user_id=user.id,
            balance=initial_balance,
            total_topped_up=initial_balance,  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        db.add(user_balance)
        db.flush()  # Ensure balance is saved before creating transaction
        
        # –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        transaction = BalanceTransaction(
            user_id=user.id,
            amount=initial_balance,
            transaction_type='admin_credit',  # –ê–¥–º–∏–Ω—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ
            description='–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            balance_before=Decimal('0.00'),  # –ë—ã–ª–æ 0
            balance_after=initial_balance,   # –°—Ç–∞–ª–æ 200000
            created_at=datetime.now()
        )
        db.add(transaction)
        
        print(f"üí∞ Created admin balance: {initial_balance} —Ä—É–±")
        return user_balance
        
    except Exception as e:
        print(f"‚ùå Failed to create admin balance: {e}")
        import traceback
        traceback.print_exc()
        raise


def get_or_create_user(db, email: str) -> tuple[User, bool]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (user, was_created)"""
    user_query = select(User).where(User.email == email)
    user = db.execute(user_query).scalar_one_or_none()
    
    if user:
        return user, False
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        email=email,
        role="admin",
        status="active",
        is_email_confirmed=True,
        first_name="Admin",
        welcome_bonus_received=True,  # –ê–¥–º–∏–Ω—É –±–æ–Ω—É—Å –Ω–µ –Ω—É–∂–µ–Ω
        created_at=datetime.now(),
        last_activity=datetime.now(),
        hashed_password=get_password_hash(secrets.token_urlsafe(16))  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
    )
    return user, True


def create_admin_interactive(db, email: str):
    """–°–æ–∑–¥–∞—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å –ø–∞—Ä–æ–ª–µ–º"""
    user, was_created = get_or_create_user(db, email)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ
    print(f"Creating admin: {email}")
    password = getpass("Set password (min 8 chars): ")
    
    if len(password) < 8:
        print("‚ùå Password too short (minimum 8 characters)", file=sys.stderr)
        sys.exit(3)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –∏ –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å–±—Ä–æ—Å–∞
    user.hashed_password = get_password_hash(password)
    user.password_reset_token = None
    user.password_reset_expires = None
    user.role = "admin"  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
    
    if was_created:
        db.add(user)
    
    db.commit()
    
    # –°–æ–∑–¥–∞—ë–º –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–¥–º–∏–Ω–∞
    create_admin_balance(db, user)
    db.commit()
    
    action = "created" if was_created else "promoted"
    print(f"‚úÖ Admin {action}: {email} (password set interactively)")


def create_admin_invite(db, email: str, public_url: str, send_email: bool = False):
    """–°–æ–∑–¥–∞—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ invite-—Ä–µ–∂–∏–º–µ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è"""
    user, was_created = get_or_create_user(db, email)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    reset_token = secrets.token_urlsafe(32)
    expires_at = datetime.now() + timedelta(hours=24)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –∏ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, —É –Ω–µ–≥–æ —É–∂–µ –µ—Å—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    if was_created:
        # –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–µ—à
        user.hashed_password = get_password_hash(secrets.token_urlsafe(16))  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
    
    user.password_reset_token = reset_token
    user.password_reset_expires = expires_at
    user.role = "admin"
    
    if was_created:
        db.add(user)
    
    db.commit()
    
    # –°–æ–∑–¥–∞—ë–º –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–¥–º–∏–Ω–∞
    create_admin_balance(db, user)
    db.commit()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è
    reset_url = f"{public_url}/reset-password?token={reset_token}"
    
    action = "created" if was_created else "promoted"
    print(f"‚úÖ Admin {action}: {email}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if send_email:
        try:
            email_service = EmailService()
            success = email_service.send_password_reset_email(email, reset_url, "Admin")
            if success:
                print(f"‚úâÔ∏è Email sent successfully to {email}")
            else:
                print(f"‚ö†Ô∏è Failed to send email, showing link instead:")
                print(f"   {reset_url}")
        except Exception as e:
            print(f"‚ö†Ô∏è Email sending failed ({e}), showing link instead:")
            print(f"   {reset_url}")
    else:
        print(f"üìß Send this one-time password setup link (valid 24h):")
        print(f"   {reset_url}")
        print(f"")
        print(f"üí° Admin can use this link to set their password securely.")


def main():
    print("üõ°Ô∏è  ReplyX Admin Bootstrap Script")
    print("=" * 50)
    
    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    admin_email = os.getenv("FIRST_ADMIN_EMAIL")
    admin_mode = os.getenv("FIRST_ADMIN_MODE", "invite").lower()
    public_url = os.getenv("PUBLIC_APP_URL", "http://localhost:3000")
    send_email = os.getenv("SEND_ADMIN_EMAIL", "false").lower() in ("true", "1", "yes")
    
    if not admin_email:
        print("‚ùå FIRST_ADMIN_EMAIL environment variable is required", file=sys.stderr)
        print("   Example: export FIRST_ADMIN_EMAIL='admin@your-domain.com'")
        sys.exit(1)
    
    if admin_mode not in ["invite", "interactive"]:
        print(f"‚ùå Invalid FIRST_ADMIN_MODE: {admin_mode}", file=sys.stderr)
        print("   Supported modes: 'invite' (recommended), 'interactive'")
        sys.exit(1)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if "@" not in admin_email or "." not in admin_email.split("@")[1]:
        print(f"‚ùå Invalid email format: {admin_email}", file=sys.stderr)
        sys.exit(1)
    
    print(f"üìß Admin email: {admin_email}")
    print(f"üîß Mode: {admin_mode}")
    if admin_mode == "invite":
        print(f"üì® Send email: {'Yes' if send_email else 'No (console output)'}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ –∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if check_admin_exists(db):
            print("‚úÖ Admin already exists ‚Äî nothing to do.")
            print("   Bootstrap script completed successfully.")
            return
        
        print("üìã No admin found, creating first administrator...")
        
        # –°–æ–∑–¥–∞—ë–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if admin_mode == "interactive":
            create_admin_interactive(db, admin_email)
        else:  # invite mode
            create_admin_invite(db, admin_email, public_url, send_email)
        
        print("üöÄ Admin bootstrap completed successfully!")
        
    except KeyboardInterrupt:
        print("\n‚ùå Bootstrap cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Bootstrap failed: {e}", file=sys.stderr)
        db.rollback()
        sys.exit(1)
    finally:
        db.close()


if __name__ == "__main__":
    main()