#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –ª–æ–≥–∏–∫—É handoff detection
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
backend_path = Path(__file__).parent.parent / "backend"
sys.path.append(str(backend_path))

try:
    from services.handoff_service import HandoffService
    from core.app_config import HANDOFF_KEYWORDS_RU, HANDOFF_KEYWORDS_EN
    print("‚úì –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π: {e}")
    sys.exit(1)

def analyze_keyword_detection():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Å–∏—Å—Ç–µ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø HANDOFF")
    print("=" * 80)
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ handoff_service.py (—Ö–∞—Ä–¥–∫–æ–¥)
    service_keywords_ru = ["–æ–ø–µ—Ä–∞—Ç–æ—Ä", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ø–æ–º–æ—â—å", "—á–µ–ª–æ–≤–µ–∫"]
    service_keywords_en = ["operator", "manager", "human", "support", "help", "person"]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ site.py (—Ö–∞—Ä–¥–∫–æ–¥)
    site_keywords = ['–æ–ø–µ—Ä–∞—Ç–æ—Ä', '—á–µ–ª–æ–≤–µ–∫', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–º–æ—â—å', '–∂–∞–ª–æ–±–∞', '–ø—Ä–æ–±–ª–µ–º–∞']
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ bot_worker.js (—Ö–∞—Ä–¥–∫–æ–¥)
    bot_keywords = [
        '–æ–ø–µ—Ä–∞—Ç–æ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–º–æ—â—å', 
        '–∂–∞–ª–æ–±–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
        'operator', 'human', 'manager', 'support', 'help', 'complaint', 'problem'
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ)
    config_keywords_ru = HANDOFF_KEYWORDS_RU
    config_keywords_en = HANDOFF_KEYWORDS_EN
    
    print("üìã –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í:")
    print()
    print(f"1. HandoffService.should_request_handoff() (–ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø):")
    print(f"   RU: {service_keywords_ru}")
    print(f"   EN: {service_keywords_en}")
    print()
    print(f"2. site.py –∞–≤—Ç–æ—Ç—Ä–∏–≥–≥–µ—Ä (–ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø):")
    print(f"   Keywords: {site_keywords}")
    print()
    print(f"3. bot_worker.js shouldRequestHandoff() (–ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø):")
    print(f"   Keywords: {bot_keywords}")
    print()
    print(f"4. app_config.py –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ (–ù–ï –ò–°–ü–û–õ–¨–ó–£–Æ–¢–°–Ø):")
    print(f"   RU: {config_keywords_ru}")
    print(f"   EN: {config_keywords_en}")
    print()
    
    # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–∏—è
    print("üö® –ü–†–û–ë–õ–ï–ú–´ –° –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨–Æ:")
    print()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    site_set = set(site_keywords)
    bot_ru_set = set([kw for kw in bot_keywords if kw not in ['operator', 'human', 'manager', 'support', 'help', 'complaint', 'problem']])
    bot_en_set = set([kw for kw in bot_keywords if kw in ['operator', 'human', 'manager', 'support', 'help', 'complaint', 'problem']])
    
    print(f"1. site.py —Å–æ–¥–µ—Ä–∂–∏—Ç: {len(site_set)} —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤")
    print(f"2. bot_worker.js —Å–æ–¥–µ—Ä–∂–∏—Ç: {len(bot_ru_set)} —Ä—É—Å—Å–∫–∏—Ö + {len(bot_en_set)} –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤")
    print()
    
    # –°–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –±–æ—Ç–µ, –Ω–æ –Ω–µ—Ç –≤ —Å–∞–π—Ç–µ
    bot_only_ru = bot_ru_set - site_set
    if bot_only_ru:
        print(f"‚ùó –°–ª–æ–≤–∞ —Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–µ: {list(bot_only_ru)}")
    
    # –°–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–∞–π—Ç–µ, –Ω–æ –Ω–µ—Ç –≤ –±–æ—Ç–µ  
    site_only = site_set - bot_ru_set
    if site_only:
        print(f"‚ùó –°–ª–æ–≤–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–∞–π—Ç–µ: {list(site_only)}")
    
    print()
    print("‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –æ–¥–∏–Ω –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –≤ app_config.py")
    print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥ —Å–ø–∏—Å–∫–æ–≤")
    print("3. –§—É–Ω–∫—Ü–∏—è HandoffService.should_request_handoff() –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –ª–∏–±–æ —É–¥–∞–ª–∏—Ç—å, –ª–∏–±–æ –≤–Ω–µ–¥—Ä–∏—Ç—å")
    print("4. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è")

def test_keyword_coverage():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏"""
    
    print("\n" + "=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ö–†–´–¢–ò–Ø –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í")
    print("=" * 80)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    should_trigger = [
        # –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        "–Ω—É–∂–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä",
        "—Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", 
        "—Å–æ–µ–¥–∏–Ω–∏—Ç–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
        "–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
        "–º–Ω–µ –Ω—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫",
        "—Ö–æ—á—É –∂–∏–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
        "–Ω—É–∂–µ–Ω –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫",
        "—Å–æ–µ–¥–∏–Ω–∏—Ç–µ —Å —á–µ–ª–æ–≤–µ–∫–æ–º",
        
        # –ó–∞–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        "–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
        "–Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "—Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
        "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        
        # –ó–∞–ø—Ä–æ—Å—ã –ø–æ–º–æ—â–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        "–º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
        "–ø–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è",
        "–Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞",
        
        # –ñ–∞–ª–æ–±—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã
        "—É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞",
        "—Ö–æ—á—É –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É",
        "–µ—Å—Ç—å –∂–∞–ª–æ–±–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å",
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä
        "—Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
        "—Å–æ–µ–¥–∏–Ω–∏—Ç–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
        "–Ω—É–∂–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä",
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
        "I need human support",
        "connect me to operator",
        "I want to speak with manager",
        "need help from person",
    ]
    
    # –§—Ä–∞–∑—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    should_not_trigger = [
        "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä if –≤ Python?",
        "—á—Ç–æ —Ç–∞–∫–æ–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä +=?", 
        "–ø–æ–º–æ–≥–∏—Ç–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è",
        "—á–µ–ª–æ–≤–µ–∫ —ç—Ç–æ –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–µ",
        "—Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏?",
        "–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ PDF",
        "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–æ–º",
        "–∂–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–≥–æ–¥—É",
        "–º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á Windows",
        "–∫–∞–∫ —Å—Ç–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞?",
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ site.py
    trigger_keywords = ['–æ–ø–µ—Ä–∞—Ç–æ—Ä', '—á–µ–ª–æ–≤–µ–∫', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–º–æ—â—å', '–∂–∞–ª–æ–±–∞', '–ø—Ä–æ–±–ª–µ–º–∞']
    
    def should_trigger_current_logic(text):
        """–¢–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ site.py"""
        user_text = text.lower()
        return any(keyword in user_text for keyword in trigger_keywords)
    
    print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–†–ê–ó –ö–û–¢–û–†–´–ï –î–û–õ–ñ–ù–´ –°–†–ê–ë–ê–¢–´–í–ê–¢–¨:")
    print()
    
    triggered_count = 0
    for phrase in should_trigger:
        triggered = should_trigger_current_logic(phrase)
        status = "‚úÖ" if triggered else "‚ùå"
        print(f"{status} '{phrase}' -> {triggered}")
        if triggered:
            triggered_count += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {triggered_count}/{len(should_trigger)} —Ñ—Ä–∞–∑ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç ({triggered_count/len(should_trigger)*100:.1f}%)")
    
    print("\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–†–ê–ó –ö–û–¢–û–†–´–ï –ù–ï –î–û–õ–ñ–ù–´ –°–†–ê–ë–ê–¢–´–í–ê–¢–¨:")
    print()
    
    false_positive_count = 0
    for phrase in should_not_trigger:
        triggered = should_trigger_current_logic(phrase)
        status = "‚ùå" if triggered else "‚úÖ"
        print(f"{status} '{phrase}' -> {triggered}")
        if triggered:
            false_positive_count += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {false_positive_count}/{len(should_not_trigger)} –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π ({false_positive_count/len(should_not_trigger)*100:.1f}%)")
    
    return triggered_count, len(should_trigger), false_positive_count, len(should_not_trigger)

def suggest_improvements():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã"""
    
    print("\n" + "=" * 80)
    print("üí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ")
    print("=" * 80)
    
    improved_keywords = [
        # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        "—Å–æ–µ–¥–∏–Ω–∏—Ç–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", "–Ω—É–∂–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä", "—Ö–æ—á—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", 
        "–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "–≤—ã–∑–æ–≤–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
        
        # –ñ–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫
        "–∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫", "—Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫", "–Ω—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫", 
        "—Ö–æ—á—É —Å —á–µ–ª–æ–≤–µ–∫–æ–º", "—Å–æ–µ–¥–∏–Ω–∏—Ç–µ —Å —á–µ–ª–æ–≤–µ–∫–æ–º",
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ (–±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ)
        "—Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
        "–Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "—Å–ª—É–∂–±–∞ –ø–æ–º–æ—â–∏",
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä
        "—Å–æ–µ–¥–∏–Ω–∏—Ç–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "–Ω—É–∂–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä", "—Ö–æ—á—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
        "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–Ω–∞—á–∞–ª—å–Ω–∏–∫",
        
        # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã
        "–Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "—ç–∫—Å–ø–µ—Ä—Ç",
        
        # –ñ–∞–ª–æ–±—ã
        "–ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É", "–µ—Å—Ç—å –∂–∞–ª–æ–±–∞", "—Ö–æ—á—É –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è",
        "–Ω–µ–¥–æ–≤–æ–ª–µ–Ω —Å–µ—Ä–≤–∏—Å–æ–º", "–ø–ª–æ—Ö–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        
        # –ë–æ–ª–µ–µ —É–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        "–Ω–µ –º–æ–≥—É —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É", "–Ω—É–∂–Ω–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –ø–æ–º–æ—â—å",
        "—ç—Ç–æ —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å", "—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
    ]
    
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print()
    print("1. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ë–û–õ–ï–ï –¢–û–ß–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –≤–º–µ—Å—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–ª–æ–≤:")
    for keyword in improved_keywords:
        print(f"   ‚Ä¢ '{keyword}'")
    
    print()
    print("2. –î–û–ë–ê–í–ò–¢–¨ –ö–û–ù–¢–ï–ö–°–¢–ù–´–ô –ê–ù–ê–õ–ò–ó:")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞, –Ω–æ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    print("   ‚Ä¢ –ò—Å–∫–ª—é—á–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏)")
    print("   ‚Ä¢ –£—á–∏—Ç—ã–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    print()
    print("3. –£–õ–£–ß–®–ò–¢–¨ AI FALLBACK DETECTION:")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI –≤ –æ—Ç–≤–µ—Ç–µ")
    print("   ‚Ä¢ –°—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '–Ω–µ –∑–Ω–∞—é' –≤ –¥–∏–∞–ª–æ–≥–µ")
    print("   ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞")
    
    print()
    print("4. –£–ù–ò–§–ò–¶–ò–†–û–í–ê–¢–¨ –õ–û–ì–ò–ö–£:")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤")
    print("   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è handoff –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏")
    print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

def main():
    print("üîß ReplyX Handoff Detection Analysis")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    analyze_keyword_detection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
    triggered, total_should, false_pos, total_shouldnt = test_keyword_coverage()
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è  
    suggest_improvements()
    
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´:")
    print(f"‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ü–µ–ª–µ–≤—ã—Ö —Ñ—Ä–∞–∑: {triggered}/{total_should} ({triggered/total_should*100:.1f}%)")
    print(f"‚ùå –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {false_pos}/{total_shouldnt} ({false_pos/total_shouldnt*100:.1f}%)")
    
    if triggered/total_should >= 0.8 and false_pos/total_shouldnt <= 0.2:
        print("üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–æ!")
    elif triggered/total_should >= 0.6:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ, –Ω–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
    else:
        print("üö® –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π!")

if __name__ == "__main__":
    main()