#!/usr/bin/env node

/**
 * üöÄ –ó–ê–ü–£–°–ö –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–ô –°–ò–°–¢–ï–ú–´ –ë–û–¢–û–í
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

class ScalableSystemLauncher {
    constructor() {
        this.processes = new Map();
        this.config = {
            masterScript: path.join(__dirname, '../workers/master/scalable_bot_manager.js'),
            logDir: path.join(__dirname, 'logs'),
            pidDir: path.join(__dirname, 'pids')
        };
        
        this.setupDirectories();
        this.setupSignalHandlers();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
     */
    setupDirectories() {
        [this.config.logDir, this.config.pidDir].forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
     */
    setupSignalHandlers() {
        process.on('SIGTERM', () => this.gracefulShutdown());
        process.on('SIGINT', () => this.gracefulShutdown());
        process.on('exit', () => this.cleanup());
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–∞
     */
    startMaster() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ Scalable Bot Manager...');
        
        const masterLogFile = path.join(this.config.logDir, 'master.log');
        const masterPidFile = path.join(this.config.pidDir, 'master.pid');
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
        const logStream = fs.createWriteStream(masterLogFile, { flags: 'a' });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å
        const masterProcess = spawn('node', [this.config.masterScript], {
            stdio: ['ignore', 'pipe', 'pipe'],
            detached: false
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
        fs.writeFileSync(masterPidFile, masterProcess.pid.toString());
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –ª–æ–≥ –∏ –∫–æ–Ω—Å–æ–ª—å
        masterProcess.stdout.on('data', (data) => {
            const message = data.toString();
            process.stdout.write(message);
            logStream.write(`[STDOUT] ${new Date().toISOString()} ${message}`);
        });
        
        masterProcess.stderr.on('data', (data) => {
            const message = data.toString();
            process.stderr.write(message);
            logStream.write(`[STDERR] ${new Date().toISOString()} ${message}`);
        });
        
        masterProcess.on('exit', (code, signal) => {
            console.log(`üîÑ –ú–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (–∫–æ–¥: ${code}, —Å–∏–≥–Ω–∞–ª: ${signal})`);
            logStream.end();
            
            // –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
            if (fs.existsSync(masterPidFile)) {
                fs.unlinkSync(masterPidFile);
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if (code !== 0 && signal !== 'SIGTERM') {
                console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
                setTimeout(() => {
                    this.startMaster();
                }, 5000);
            }
        });
        
        masterProcess.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–∞:', error.message);
            logStream.write(`[ERROR] ${new Date().toISOString()} ${error.message}\n`);
        });
        
        this.processes.set('master', {
            process: masterProcess,
            logStream: logStream,
            pidFile: masterPidFile
        });
        
        console.log(`‚úÖ –ú–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω (PID: ${masterProcess.pid})`);
        console.log(`üìã –õ–æ–≥–∏: ${masterLogFile}`);
        console.log(`üåê API: http://localhost:3001`);
        console.log(`üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –æ—Ç–∫—Ä–æ–π—Ç–µ test-scalable-system.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    checkStatus() {
        const masterPidFile = path.join(this.config.pidDir, 'master.pid');
        
        if (fs.existsSync(masterPidFile)) {
            const pid = parseInt(fs.readFileSync(masterPidFile, 'utf8'));
            
            try {
                process.kill(pid, 0); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                console.log(`‚úÖ –ú–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: ${pid})`);
                return true;
            } catch (error) {
                console.log('‚ùå –ú–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                fs.unlinkSync(masterPidFile); // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª
                return false;
            }
        } else {
            console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
            return false;
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    async stop() {
        console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Scalable Bot Manager...');
        
        const masterPidFile = path.join(this.config.pidDir, 'master.pid');
        
        if (fs.existsSync(masterPidFile)) {
            const pid = parseInt(fs.readFileSync(masterPidFile, 'utf8'));
            
            try {
                console.log(`üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É ${pid}...`);
                process.kill(pid, 'SIGTERM');
                
                // –ñ–¥–µ–º graceful shutdown
                await new Promise((resolve) => {
                    const checkInterval = setInterval(() => {
                        try {
                            process.kill(pid, 0);
                        } catch (error) {
                            clearInterval(checkInterval);
                            resolve();
                        }
                    }, 1000);
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                    setTimeout(() => {
                        try {
                            console.log(`üíÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ ${pid}...`);
                            process.kill(pid, 'SIGKILL');
                        } catch (error) {
                            // –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω
                        }
                        clearInterval(checkInterval);
                        resolve();
                    }, 30000);
                });
                
                console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
                
            } catch (error) {
                console.log('‚ùå –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
            if (fs.existsSync(masterPidFile)) {
                fs.unlinkSync(masterPidFile);
            }
        } else {
            console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
     */
    async restart() {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Scalable Bot Manager...');
        await this.stop();
        
        // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        this.startMaster();
    }
    
    /**
     * –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
     */
    showLogs(lines = 50) {
        const masterLogFile = path.join(this.config.logDir, 'master.log');
        
        if (fs.existsSync(masterLogFile)) {
            const { spawn } = require('child_process');
            const tail = spawn('tail', ['-n', lines.toString(), '-f', masterLogFile], {
                stdio: 'inherit'
            });
            
            console.log(`üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${lines} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):`);
            
            process.on('SIGINT', () => {
                tail.kill();
                process.exit(0);
            });
        } else {
            console.log('‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }
    
    /**
     * Graceful shutdown
     */
    async gracefulShutdown() {
        console.log('\nüîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...');
        await this.stop();
        process.exit(0);
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –ª–æ–≥–æ–≤
        for (const [name, processInfo] of this.processes) {
            if (processInfo.logStream) {
                processInfo.logStream.end();
            }
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
     */
    showHelp() {
        console.log(`
üöÄ Scalable Bot Manager - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 1000+ –±–æ—Ç–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node start_scalable_system.js [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—ã:
  start     –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  stop      –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
  restart   –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
  status    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
  logs      –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫)
  logs N    –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
  help      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node start_scalable_system.js
  node start_scalable_system.js start
  node start_scalable_system.js stop
  node start_scalable_system.js restart
  node start_scalable_system.js status
  node start_scalable_system.js logs 100

API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:
  GET  http://localhost:3001/workers           - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
  GET  http://localhost:3001/workers/:id       - –°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
  POST http://localhost:3001/workers/:id/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
  POST http://localhost:3001/workers/:id/stop    - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
  POST http://localhost:3001/workers/restart-all - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤

–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
  –û—Ç–∫—Ä–æ–π—Ç–µ test-scalable-system.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        `);
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const launcher = new ScalableSystemLauncher();
    const command = process.argv[2] || 'start';
    
    switch (command) {
        case 'start':
            if (launcher.checkStatus()) {
                console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
                process.exit(1);
            }
            launcher.startMaster();
            break;
            
        case 'stop':
            await launcher.stop();
            break;
            
        case 'restart':
            await launcher.restart();
            break;
            
        case 'status':
            launcher.checkStatus();
            process.exit(0);
            
        case 'logs':
            const lines = parseInt(process.argv[3]) || 50;
            launcher.showLogs(lines);
            break;
            
        case 'help':
        case '--help':
        case '-h':
            launcher.showHelp();
            process.exit(0);
            
        default:
            console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
            launcher.showHelp();
            process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
});