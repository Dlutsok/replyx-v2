#!/usr/bin/env python3
"""
üìä –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í CHATAI
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FastAPI, Bot —Å–∏—Å—Ç–µ–º—ã, –ë–î, Redis –∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import os
import sys
import time
import json
import logging
import requests
import subprocess
from datetime import datetime, timedelta
from pathlib import Path
import psutil
import asyncio
import aiohttp

class SystemMonitor:
    def __init__(self):
        self.config = {
            'fastapi_health_url': os.getenv('FASTAPI_HEALTH_URL', 'http://localhost:8000/health'),
            'bot_manager_url': os.getenv('BOT_MANAGER_URL', 'http://localhost:3001/workers'),
            'redis_host': os.getenv('REDIS_HOST', 'localhost'),
            'redis_port': int(os.getenv('REDIS_PORT', '6379')),
            'db_host': os.getenv('DB_HOST', 'localhost'),
            'db_port': int(os.getenv('DB_PORT', '5432')),
            'check_interval': int(os.getenv('SYSTEM_MONITOR_INTERVAL', '60')),  # —Å–µ–∫—É–Ω–¥—ã
            'log_file': os.getenv('SYSTEM_MONITOR_LOG', 'logs/system_monitor.log'),
            'status_file': os.getenv('SYSTEM_STATUS_FILE', 'tmp/system_status.json'),
            'alert_webhook': os.getenv('ALERT_WEBHOOK', None),  # Slack/Discord webhook
            'prometheus_endpoint': os.getenv('PROMETHEUS_ENDPOINT', 'http://localhost:8000/metrics'),
        }
        
        self.setup_logging()
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.components_status = {
            'fastapi': {'status': 'unknown', 'last_check': None, 'details': {}},
            'bot_manager': {'status': 'unknown', 'last_check': None, 'details': {}},
            'database': {'status': 'unknown', 'last_check': None, 'details': {}},
            'redis': {'status': 'unknown', 'last_check': None, 'details': {}},
            'system_resources': {'status': 'unknown', 'last_check': None, 'details': {}},
        }
        
        # –ê–ª–µ—Ä—Ç—ã
        self.alerts = {
            'active': [],
            'resolved': [],
            'last_alert_time': {},
            'alert_cooldown': 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
        }
        
        self.logger.info("üìä System Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        os.makedirs('logs', exist_ok=True)
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(self.config['log_file']),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger('SystemMonitor')
        
    async def check_fastapi_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                async with session.get(self.config['fastapi_health_url']) as response:
                    if response.status == 200:
                        health_data = await response.json()
                        
                        self.components_status['fastapi'] = {
                            'status': health_data.get('status', 'unknown'),
                            'last_check': datetime.now(),
                            'details': health_data,
                            'response_time': response.headers.get('X-Process-Time', 'N/A')
                        }
                        
                        if health_data.get('status') == 'healthy':
                            self.resolve_alert('fastapi_unhealthy')
                        else:
                            await self.trigger_alert('fastapi_unhealthy', f"FastAPI –Ω–µ–∑–¥–æ—Ä–æ–≤: {health_data}")
                            
                        return True
                    else:
                        await self.trigger_alert('fastapi_unavailable', f"FastAPI –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status}")
                        return False
                        
        except Exception as e:
            self.components_status['fastapi'] = {
                'status': 'error',
                'last_check': datetime.now(),
                'details': {'error': str(e)},
                'response_time': 'N/A'
            }
            await self.trigger_alert('fastapi_error', f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FastAPI: {e}")
            return False
            
    async def check_bot_manager_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Bot Manager"""
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                async with session.get(self.config['bot_manager_url']) as response:
                    if response.status == 200:
                        workers_data = await response.json()
                        
                        total_workers = len(workers_data)
                        healthy_workers = sum(1 for w in workers_data if w.get('status') == 'running')
                        
                        self.components_status['bot_manager'] = {
                            'status': 'healthy' if total_workers > 0 else 'warning',
                            'last_check': datetime.now(),
                            'details': {
                                'total_workers': total_workers,
                                'healthy_workers': healthy_workers,
                                'unhealthy_workers': total_workers - healthy_workers,
                                'health_ratio': healthy_workers / total_workers if total_workers > 0 else 0
                            }
                        }
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
                        if total_workers == 0:
                            await self.trigger_alert('bot_manager_no_workers', "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö bot worker'–æ–≤")
                        elif healthy_workers / total_workers < 0.5:
                            await self.trigger_alert('bot_manager_low_health', f"–¢–æ–ª—å–∫–æ {healthy_workers}/{total_workers} –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–¥–æ—Ä–æ–≤—ã")
                        else:
                            self.resolve_alert('bot_manager_no_workers')
                            self.resolve_alert('bot_manager_low_health')
                            
                        return True
                    else:
                        await self.trigger_alert('bot_manager_unavailable', f"Bot Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {response.status})")
                        return False
                        
        except Exception as e:
            self.components_status['bot_manager'] = {
                'status': 'error',
                'last_check': datetime.now(),
                'details': {'error': str(e)}
            }
            await self.trigger_alert('bot_manager_error', f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bot Manager: {e}")
            return False
            
    async def check_database_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import psycopg2
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            db_user = os.getenv('DB_USER', 'chatai')
            db_password = os.getenv('DB_PASSWORD', '')
            db_name = os.getenv('DB_NAME', 'chatai_production')
            
            conn_str = f"host={self.config['db_host']} port={self.config['db_port']} dbname={db_name} user={db_user}"
            if db_password:
                conn_str += f" password={db_password}"
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            start_time = time.time()
            conn = psycopg2.connect(conn_str)
            conn_time = time.time() - start_time
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            cursor = conn.cursor()
            cursor.execute("SELECT version(), pg_database_size(current_database());")
            version, db_size = cursor.fetchone()
            cursor.close()
            conn.close()
            
            self.components_status['database'] = {
                'status': 'healthy',
                'last_check': datetime.now(),
                'details': {
                    'version': version.split()[0:2],  # PostgreSQL version
                    'database_size_bytes': db_size,
                    'database_size_mb': round(db_size / 1024 / 1024, 2),
                    'connection_time': round(conn_time * 1000, 2)  # ms
                }
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ë–î
            db_size_gb = db_size / 1024 / 1024 / 1024
            if db_size_gb > 10:  # –ë–æ–ª–µ–µ 10GB
                await self.trigger_alert('database_size_warning', f"–†–∞–∑–º–µ—Ä –ë–î –¥–æ—Å—Ç–∏–≥ {db_size_gb:.2f}GB")
            else:
                self.resolve_alert('database_size_warning')
                
            self.resolve_alert('database_unavailable')
            return True
            
        except Exception as e:
            self.components_status['database'] = {
                'status': 'error',
                'last_check': datetime.now(),
                'details': {'error': str(e)}
            }
            await self.trigger_alert('database_unavailable', f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
            
    async def check_redis_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Redis"""
        try:
            import redis
            
            r = redis.Redis(
                host=self.config['redis_host'],
                port=self.config['redis_port'],
                socket_timeout=5,
                socket_connect_timeout=5
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            start_time = time.time()
            info = r.info()
            ping_time = time.time() - start_time
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            memory_info = {
                'used_memory': info.get('used_memory', 0),
                'used_memory_human': info.get('used_memory_human', '0B'),
                'used_memory_peak': info.get('used_memory_peak', 0),
                'used_memory_peak_human': info.get('used_memory_peak_human', '0B'),
            }
            
            self.components_status['redis'] = {
                'status': 'healthy',
                'last_check': datetime.now(),
                'details': {
                    'version': info.get('redis_version', 'unknown'),
                    'uptime': info.get('uptime_in_seconds', 0),
                    'connected_clients': info.get('connected_clients', 0),
                    'memory': memory_info,
                    'ping_time': round(ping_time * 1000, 2)  # ms
                }
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            used_memory_mb = info.get('used_memory', 0) / 1024 / 1024
            if used_memory_mb > 500:  # –ë–æ–ª–µ–µ 500MB
                await self.trigger_alert('redis_high_memory', f"Redis –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {used_memory_mb:.1f}MB –ø–∞–º—è—Ç–∏")
            else:
                self.resolve_alert('redis_high_memory')
                
            self.resolve_alert('redis_unavailable')
            return True
            
        except Exception as e:
            self.components_status['redis'] = {
                'status': 'error',
                'last_check': datetime.now(),
                'details': {'error': str(e)}
            }
            await self.trigger_alert('redis_unavailable', f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            return False
            
    async def check_system_resources(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            cpu_count = psutil.cpu_count()
            
            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            
            # –î–∏—Å–∫
            disk = psutil.disk_usage('/')
            
            # –°–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connections = len(psutil.net_connections())
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            process_count = len(list(psutil.process_iter()))
            
            self.components_status['system_resources'] = {
                'status': 'healthy',
                'last_check': datetime.now(),
                'details': {
                    'cpu': {
                        'percent': cpu_percent,
                        'count': cpu_count,
                        'load_average': os.getloadavg() if hasattr(os, 'getloadavg') else None
                    },
                    'memory': {
                        'total_gb': round(memory.total / 1024 / 1024 / 1024, 2),
                        'used_gb': round(memory.used / 1024 / 1024 / 1024, 2),
                        'available_gb': round(memory.available / 1024 / 1024 / 1024, 2),
                        'percent': memory.percent
                    },
                    'disk': {
                        'total_gb': round(disk.total / 1024 / 1024 / 1024, 2),
                        'used_gb': round(disk.used / 1024 / 1024 / 1024, 2),
                        'free_gb': round(disk.free / 1024 / 1024 / 1024, 2),
                        'percent': round((disk.used / disk.total) * 100, 2)
                    },
                    'network': {
                        'connections': connections
                    },
                    'processes': process_count
                }
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            alerts_triggered = []
            
            if cpu_percent > 90:
                alerts_triggered.append(('cpu_high', f"–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%"))
                
            if memory.percent > 90:
                alerts_triggered.append(('memory_high', f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent}%"))
                
            if (disk.used / disk.total) > 0.9:
                alerts_triggered.append(('disk_full', f"–î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {round((disk.used / disk.total) * 100, 1)}%"))
                
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
            for alert_type, message in alerts_triggered:
                await self.trigger_alert(alert_type, message)
                
            # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
            if cpu_percent <= 80:
                self.resolve_alert('cpu_high')
            if memory.percent <= 80:
                self.resolve_alert('memory_high')
            if (disk.used / disk.total) <= 0.8:
                self.resolve_alert('disk_full')
                
            return True
            
        except Exception as e:
            self.components_status['system_resources'] = {
                'status': 'error',
                'last_check': datetime.now(),
                'details': {'error': str(e)}
            }
            return False
            
    async def trigger_alert(self, alert_type, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown'–∞
        last_alert_time = self.alerts['last_alert_time'].get(alert_type)
        if last_alert_time and (now - last_alert_time).total_seconds() < self.alerts['alert_cooldown']:
            return
            
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
        alert = {
            'type': alert_type,
            'message': message,
            'timestamp': now,
            'severity': self.get_alert_severity(alert_type)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
        self.alerts['active'] = [a for a in self.alerts['active'] if a['type'] != alert_type]
        self.alerts['active'].append(alert)
        self.alerts['last_alert_time'][alert_type] = now
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger.error(f"üö® –ê–õ–ï–†–¢ [{alert['severity']}]: {alert_type} - {message}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ webhook (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        if self.config['alert_webhook']:
            await self.send_webhook_alert(alert)
            
    def resolve_alert(self, alert_type):
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        for alert in self.alerts['active']:
            if alert['type'] == alert_type:
                alert['resolved_at'] = datetime.now()
                self.alerts['resolved'].append(alert)
                self.alerts['active'].remove(alert)
                self.logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω: {alert_type}")
                break
                
    def get_alert_severity(self, alert_type):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–∞"""
        critical_alerts = ['fastapi_unavailable', 'database_unavailable', 'bot_manager_no_workers']
        warning_alerts = ['fastapi_unhealthy', 'redis_unavailable', 'cpu_high', 'memory_high']
        
        if alert_type in critical_alerts:
            return 'critical'
        elif alert_type in warning_alerts:
            return 'warning'
        else:
            return 'info'
            
    async def send_webhook_alert(self, alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ webhook"""
        try:
            severity_emoji = {
                'critical': 'üö®',
                'warning': '‚ö†Ô∏è',
                'info': '‚ÑπÔ∏è'
            }
            
            payload = {
                'text': f"{severity_emoji.get(alert['severity'], 'üîî')} **ChatAI Alert [{alert['severity'].upper()}]**\n"
                        f"**Type:** {alert['type']}\n"
                        f"**Message:** {alert['message']}\n"
                        f"**Time:** {alert['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(self.config['alert_webhook'], json=payload) as response:
                    if response.status == 200:
                        self.logger.info(f"üì§ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ webhook: {alert['type']}")
                    else:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –≤ webhook: {response.status}")
                        
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook –∞–ª–µ—Ä—Ç–∞: {e}")
            
    async def save_status(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            os.makedirs('tmp', exist_ok=True)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            status_data = {}
            
            for component, status in self.components_status.items():
                status_data[component] = {
                    'status': status['status'],
                    'last_check': status['last_check'].isoformat() if status['last_check'] else None,
                    'details': status['details']
                }
                
            # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            overall_status = self.calculate_overall_status()
            
            full_status = {
                'timestamp': datetime.now().isoformat(),
                'overall_status': overall_status,
                'components': status_data,
                'alerts': {
                    'active_count': len(self.alerts['active']),
                    'active_alerts': [
                        {
                            'type': alert['type'],
                            'message': alert['message'],
                            'severity': alert['severity'],
                            'timestamp': alert['timestamp'].isoformat()
                        }
                        for alert in self.alerts['active']
                    ]
                }
            }
            
            with open(self.config['status_file'], 'w') as f:
                json.dump(full_status, f, indent=2)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
    def calculate_overall_status(self):
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        statuses = [comp['status'] for comp in self.components_status.values()]
        
        if 'error' in statuses:
            return 'critical'
        elif 'warning' in statuses:
            return 'warning'
        elif all(status == 'healthy' for status in statuses):
            return 'healthy'
        else:
            return 'unknown'
            
    async def run_monitoring_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            self.check_fastapi_health(),
            self.check_bot_manager_health(),
            self.check_database_health(),
            self.check_redis_health(),
            self.check_system_resources()
        ]
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        successful_checks = sum(1 for result in results if result is True)
        total_checks = len(tasks)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        overall_status = self.calculate_overall_status()
        self.logger.info(f"üìä –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: {successful_checks}/{total_checks} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ")
        self.logger.info(f"üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {overall_status.upper()}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        await self.save_status()
        
        return overall_status
        
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.logger.info("üìä –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ChatAI")
        self.logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.config['check_interval']}—Å")
        
        try:
            while True:
                await self.run_monitoring_cycle()
                await asyncio.sleep(self.config['check_interval'])
                
        except KeyboardInterrupt:
            self.logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            raise

def main():
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == 'status':
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
            try:
                with open('tmp/system_status.json', 'r') as f:
                    status = json.load(f)
                    
                print("üìä ChatAI System Status:")
                print(f"   Overall: {status['overall_status'].upper()}")
                print(f"   Last check: {status['timestamp']}")
                print("\nüì¶ Components:")
                
                for comp_name, comp_status in status['components'].items():
                    status_icon = {
                        'healthy': '‚úÖ',
                        'warning': '‚ö†Ô∏è',
                        'error': '‚ùå',
                        'unknown': '‚ùì'
                    }.get(comp_status['status'], '‚ùì')
                    
                    print(f"   {status_icon} {comp_name}: {comp_status['status']}")
                    
                if status['alerts']['active_count'] > 0:
                    print(f"\nüö® Active Alerts ({status['alerts']['active_count']}):")
                    for alert in status['alerts']['active_alerts']:
                        print(f"   ‚Ä¢ [{alert['severity']}] {alert['type']}: {alert['message']}")
                        
            except FileNotFoundError:
                print("‚ùå –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω?")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
                
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: status")
    else:
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor = SystemMonitor()
        asyncio.run(monitor.run())

if __name__ == "__main__":
    main()