#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤—Å–µ—Ö Q&A –∑–∞–ø–∏—Å–µ–π
"""
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.connection import get_db
from database import models
from services.embeddings_service import embeddings_service
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def reindex_all_qa():
    """–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ Q&A –∑–∞–ø–∏—Å–∏"""
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ Q&A –∑–∞–ø–∏—Å–∏
        qa_records = db.query(models.QAKnowledge).filter(
            models.QAKnowledge.is_active == True
        ).all()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(qa_records)} –∞–∫—Ç–∏–≤–Ω—ã—Ö Q&A –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
        
        reindexed_count = 0
        failed_count = 0
        
        for qa in qa_records:
            try:
                print(f"–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º Q&A ID: {qa.id}")
                print(f"  –í–æ–ø—Ä–æ—Å: {qa.question}")
                print(f"  –û—Ç–≤–µ—Ç: {qa.answer[:50]}...")
                
                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ embeddings
                embeddings_service.delete_qa_embeddings(qa.id, db)
                
                # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
                indexed_count = embeddings_service.index_qa_knowledge(
                    qa_id=qa.id,
                    user_id=qa.user_id,
                    assistant_id=qa.assistant_id,
                    question=qa.question,
                    answer=qa.answer,
                    importance=qa.importance or 10,
                    db=db
                )
                
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ {indexed_count} embeddings")
                reindexed_count += 1
                
                # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –∑–Ω–∞–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                if qa.assistant_id:
                    assistant = db.query(models.Assistant).filter(
                        models.Assistant.id == qa.assistant_id
                    ).first()
                    if assistant:
                        assistant.knowledge_version = (assistant.knowledge_version or 0) + 1
                        db.commit()
                        print(f"  üìà –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –∑–Ω–∞–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {assistant.knowledge_version}")
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ Q&A ID {qa.id}: {e}")
                failed_count += 1
                continue
        
        print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
        print(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {reindexed_count}")
        print(f"–û—à–∏–±–æ–∫: {failed_count}")
        print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(qa_records)}")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    reindex_all_qa()