#!/bin/bash
# =============================================================================
# AUTOMATED CORS SECURITY DEPLOYMENT SCRIPT
# =============================================================================

set -euo pipefail  # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEPLOY_DIR="/opt/replyx/Deployed"
BACKUP_DIR="/opt/replyx/backups"
COMPOSE_FILE="docker-compose.prod.yml"

# –§—É–Ω–∫—Ü–∏–∏
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_prerequisites() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
    if ! docker compose version &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º TAG
    if [[ -z "${TAG:-}" ]]; then
        log_error "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TAG –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: TAG=v1.0.0 ./deploy.sh"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if [[ ! -f "$DEPLOY_DIR/.env" ]]; then
        log_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $DEPLOY_DIR"
        echo "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.docker.example –∫–∞–∫ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è"
        exit 1
    fi
    
    log_success "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
}

create_backup() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    mkdir -p "$BACKUP_DIR"
    
    local backup_file="$BACKUP_DIR/before_deploy_$(date +%Y%m%d_%H%M%S).sql"
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —á–µ—Ä–µ–∑ Docker
    if docker compose -f "$COMPOSE_FILE" exec -T postgres pg_dump -U replyx_user replyx_prod > "$backup_file" 2>/dev/null; then
        log_success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $backup_file"
        echo "BACKUP_FILE=$backup_file" > /tmp/replyx_backup_info
    else
        log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —á–µ—Ä–µ–∑ Docker"
        log_warning "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –±—ç–∫–∞–ø–∞? (y/N)"
        read -r response
        if [[ ! "$response" =~ ^[yY]$ ]]; then
            log_error "–î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω"
            exit 1
        fi
    fi
}

deploy_services() {
    log_info "–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    cd "$DEPLOY_DIR"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã
    log_info "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤ (TAG=$TAG)..."
    if ! docker compose -f "$COMPOSE_FILE" pull; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑—ã"
        exit 1
    fi
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    log_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    if ! docker compose -f "$COMPOSE_FILE" run --rm replyx-backend alembic upgrade head; then
        log_error "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"
        log_error "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—Ç–∫–∞—Ç"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    log_info "–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    if ! docker compose -f "$COMPOSE_FILE" up -d; then
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
        exit 1
    fi
    
    log_success "–°–µ—Ä–≤–∏—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã"
}

wait_for_services() {
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    local max_attempts=30
    local attempt=0
    
    while [[ $attempt -lt $max_attempts ]]; do
        if curl -sf https://replyx.ru/health > /dev/null 2>&1; then
            log_success "–°–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ"
            return 0
        fi
        
        ((attempt++))
        log_info "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts..."
        sleep 10
    done
    
    log_error "–°–µ—Ä–≤–∏—Å—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –ø–æ—Å–ª–µ ${max_attempts} –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

run_health_checks() {
    log_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è..."
    
    local checks_passed=0
    local total_checks=4
    
    # 1. Health endpoint
    if curl -sf https://replyx.ru/health > /dev/null; then
        log_success "‚úì Health check –ø—Ä–æ—à–µ–ª"
        ((checks_passed++))
    else
        log_error "‚úó Health check –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è"
    fi
    
    # 2. Main app CORS (with credentials)
    local response=$(curl -sI https://replyx.ru/api/login \
        -H "Origin: https://replyx.ru" \
        -H "Content-Type: application/json" 2>/dev/null || true)
    
    if echo "$response" | grep -q "Access-Control-Allow-Origin: https://replyx.ru" && \
       echo "$response" | grep -q "Access-Control-Allow-Credentials: true"; then
        log_success "‚úì Main app CORS —Ä–∞–±–æ—Ç–∞–µ—Ç"
        ((checks_passed++))
    else
        log_error "‚úó Main app CORS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    # 3. Widget preflight
    local widget_response=$(curl -sI https://replyx.ru/api/validate-widget-token \
        -X OPTIONS \
        -H "Origin: https://stencom.ru" \
        -H "Access-Control-Request-Method: POST" 2>/dev/null || true)
    
    if echo "$widget_response" | grep -q "HTTP/[0-9.]* 200" && \
       echo "$widget_response" | grep -q "Access-Control-Allow-Origin: https://stencom.ru" && \
       ! echo "$widget_response" | grep -q "Access-Control-Allow-Credentials"; then
        log_success "‚úì Widget CORS —Ä–∞–±–æ—Ç–∞–µ—Ç"
        ((checks_passed++))
    else
        log_error "‚úó Widget CORS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    # 4. Metrics endpoint
    if curl -sf https://replyx.ru/metrics | grep -q "widget_cors_requests_total" > /dev/null; then
        log_success "‚úì Metrics —Ä–∞–±–æ—Ç–∞—é—Ç"
        ((checks_passed++))
    else
        log_error "‚úó Metrics –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç"
    fi
    
    log_info "–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $checks_passed/$total_checks"
    
    if [[ $checks_passed -eq $total_checks ]]; then
        log_success "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!"
        return 0
    else
        log_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
        return 1
    fi
}

show_rollback_info() {
    log_info "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞:"
    echo ""
    echo "–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–∞—Ç –æ–±—Ä–∞–∑–æ–≤:"
    echo "  export PREV_TAG=<–ø—Ä–µ–¥—ã–¥—É—â–∏–π_—Ç–µ–≥>"
    echo "  cd $DEPLOY_DIR"
    echo "  docker compose -f $COMPOSE_FILE pull"
    echo "  docker compose -f $COMPOSE_FILE up -d"
    echo ""
    
    if [[ -f "/tmp/replyx_backup_info" ]]; then
        source /tmp/replyx_backup_info
        echo "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–∑ –±—ç–∫–∞–ø–∞:"
        echo "  docker compose -f $COMPOSE_FILE exec -T postgres psql -U replyx_user -d replyx_prod < $BACKUP_FILE"
        echo ""
    fi
}

main() {
    log_info "=== CORS Security Deployment ==="
    log_info "TAG: ${TAG}"
    log_info "Deploy Dir: $DEPLOY_DIR"
    log_info "================================="
    echo ""
    
    check_prerequisites
    create_backup
    deploy_services
    
    if wait_for_services && run_health_checks; then
        log_success "üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
        
        log_info "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
        echo "  - –õ–æ–≥–∏: docker compose -f $COMPOSE_FILE logs -f"
        echo "  - –ú–µ—Ç—Ä–∏–∫–∏: https://replyx.ru/metrics"
        echo "  - Health: https://replyx.ru/health"
        echo ""
    else
        log_error "‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏"
        show_rollback_info
        exit 1
    fi
    
    show_rollback_info
}

# Trap –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
trap 'log_error "–î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω"; show_rollback_info; exit 1' INT TERM

main "$@"