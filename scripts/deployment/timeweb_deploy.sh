#!/bin/bash

# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ReplyX –Ω–∞ Timeweb —Å–µ—Ä–≤–µ—Ä–µ
# –°–µ—Ä–≤–µ—Ä: 5.129.246.24 (2x3.3GHz, 4GB RAM, 50GB NVMe)
# –û–°: Ubuntu 24.04

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'  
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Timeweb —Å–µ—Ä–≤–µ—Ä–∞
SERVER_IP="5.129.246.24"
SERVER_USER="root"
DEPLOY_PATH="/opt/replyx"

print_status() {
    echo -e "${GREEN}[‚úÖ –°–¢–ê–¢–£–°]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚ùå –û–®–ò–ë–ö–ê]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[‚ÑπÔ∏è  –ò–ù–§–û]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
check_server_connection() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Timeweb —Å–µ—Ä–≤–µ—Ä—É..."
    
    if ssh -o ConnectTimeout=5 $SERVER_USER@$SERVER_IP "echo '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK'" >/dev/null 2>&1; then
        print_status "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É $SERVER_IP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    else
        print_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $SERVER_IP"
        print_error "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:"
        echo "  1. SSH –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        echo "  2. –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
        echo "  3. –ü–∞—Ä–æ–ª—å root –∏–∑–≤–µ—Å—Ç–µ–Ω"
        exit 1
    fi
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
copy_files_to_server() {
    print_info "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Timeweb —Å–µ—Ä–≤–µ—Ä..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    ssh $SERVER_USER@$SERVER_IP "mkdir -p $DEPLOY_PATH"
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    print_status "–ö–æ–ø–∏—Ä—É–µ–º Deployed/..."
    scp -r Deployed $SERVER_USER@$SERVER_IP:$DEPLOY_PATH/
    
    print_status "–ö–æ–ø–∏—Ä—É–µ–º frontend/..."
    scp -r frontend $SERVER_USER@$SERVER_IP:$DEPLOY_PATH/
    
    print_status "–ö–æ–ø–∏—Ä—É–µ–º backend/..."
    scp -r backend $SERVER_USER@$SERVER_IP:$DEPLOY_PATH/
    
    print_status "–ö–æ–ø–∏—Ä—É–µ–º workers/..."
    scp -r workers $SERVER_USER@$SERVER_IP:$DEPLOY_PATH/
    
    print_status "–ö–æ–ø–∏—Ä—É–µ–º scripts/..."
    scp -r scripts $SERVER_USER@$SERVER_IP:$DEPLOY_PATH/
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
    ssh $SERVER_USER@$SERVER_IP "
        cd $DEPLOY_PATH
        chmod +x Deployed/deploy.sh
        chmod +x Deployed/init-db.sh  
        chmod +x scripts/production_deploy.sh
        find . -name '*.sh' -type f -exec chmod +x {} \;
    "
    
    print_status "–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
setup_server() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Timeweb —Å–µ—Ä–≤–µ—Ä–∞..."
    
    ssh $SERVER_USER@$SERVER_IP << 'EOF'
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Ubuntu 24.04..."
        apt update && apt upgrade -y
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç..."
        apt install -y curl wget git unzip htop nano tree postgresql-client jq
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
        echo "üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
        if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl enable docker
            systemctl start docker
            rm get-docker.sh
        fi
        
        # docker compose v2 plugin (–∏–Ω–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–æ–º)
        echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ docker compose plugin..."
        apt install -y docker-compose-plugin
        docker compose version || (echo "‚ùå docker compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" && exit 1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
        echo "üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
        ufw allow 22/tcp
        ufw allow 80/tcp  
        ufw allow 443/tcp
        ufw --force enable
        
        # –°–æ–∑–¥–∞–Ω–∏–µ swap —Ñ–∞–π–ª–∞ –¥–ª—è 4GB RAM —Å–µ—Ä–≤–µ—Ä–∞
        echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ swap —Ñ–∞–π–ª–∞..."
        if [ ! -f /swapfile ]; then
            fallocate -l 2G /swapfile
            chmod 600 /swapfile
            mkswap /swapfile
            swapon /swapfile
            echo '/swapfile none swap sw 0 0' >> /etc/fstab
        fi
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Docker –¥–ª—è 4GB RAM
        echo "‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Docker..."
        cat > /etc/docker/daemon.json << 'DOCKER_EOF'
{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  }
}
DOCKER_EOF
        systemctl restart docker
        
        echo "‚úÖ –°–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è ReplyX"
EOF
    
    print_status "–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Timeweb
configure_environment() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Timeweb..."
    
    ssh $SERVER_USER@$SERVER_IP << EOF
        cd $DEPLOY_PATH/Deployed
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ .env.production
        cp .env.production .env.production.backup
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Timeweb IP
        sed -i 's|DOMAIN=replyx.ru|DOMAIN=$SERVER_IP|g' .env.production
        sed -i 's|FRONTEND_URL=https://replyx.ru|FRONTEND_URL=http://$SERVER_IP|g' .env.production
        sed -i 's|BACKEND_URL=https://replyx.ru|BACKEND_URL=http://$SERVER_IP|g' .env.production
        sed -i 's|PUBLIC_URL=https://replyx.ru|PUBLIC_URL=http://$SERVER_IP|g' .env.production
        sed -i 's|CORS_ORIGINS=https://replyx.ru,https://www.replyx.ru|CORS_ORIGINS=http://$SERVER_IP|g' .env.production
        sed -i 's|WEBHOOK_HOST=https://replyx.ru|WEBHOOK_HOST=http://$SERVER_IP|g' .env.production
        
        echo "‚úÖ .env.production –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è IP: $SERVER_IP"
EOF
    
    print_status "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
initialize_database() {
    print_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    if [ -z "${PGPASSWORD:-}" ]; then
        print_error "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è PGPASSWORD"
        read -s -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ PostgreSQL: " pg_password
        echo
        export PGPASSWORD="$pg_password"
    fi
    
    ssh $SERVER_USER@$SERVER_IP << EOF
        cd $DEPLOY_PATH/Deployed
        export PGPASSWORD="$PGPASSWORD"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ
        echo "üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        ./init-db.sh -y
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î..."
        ./init-db.sh test
EOF
    
    print_status "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
deploy_containers() {
    print_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–∞ Timeweb..."
    
    ssh $SERVER_USER@$SERVER_IP << EOF
        cd $DEPLOY_PATH/Deployed
        
        echo "üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
        docker compose build
        
        echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ—ç—Ç–∞–ø–Ω–æ..."
        
        # Redis
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Redis..."
        docker compose up -d redis
        sleep 10
        
        # Backend
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Backend..."
        docker compose up -d backend
        sleep 30
        
        # Workers  
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Workers..."
        docker compose up -d workers
        sleep 15
        
        # WS Gateway
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ WS Gateway..."
        docker compose up -d ws-gateway
        sleep 10
        
        # Frontend
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Frontend..."
        docker compose up -d frontend
        sleep 20
        
        # Nginx
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Nginx..."
        docker compose up -d nginx
        
        echo "‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
EOF
    
    print_status "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
verify_deployment() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Timeweb —Å–µ—Ä–≤–µ—Ä–µ..."
    
    ssh $SERVER_USER@$SERVER_IP << EOF
        cd $DEPLOY_PATH/Deployed
        
        echo "=== –ü–†–û–í–ï–†–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–†–û–í ==="
        docker compose ps
        
        echo -e "\n=== HEALTH CHECKS ==="
        
        # Backend Health Check
        if curl -sf http://localhost:8000/health >/dev/null 2>&1; then
            echo "‚úÖ Backend: http://$SERVER_IP:8000/health"
        else
            echo "‚ùå Backend: FAILED"
        fi
        
        # Workers Health Check  
        if curl -sf http://localhost:8443/health >/dev/null 2>&1; then
            echo "‚úÖ Workers: http://$SERVER_IP:8443/health"
        else
            echo "‚ùå Workers: FAILED"
        fi
        
        # WS Gateway Health Check
        if curl -sf http://localhost:8001/health >/dev/null 2>&1; then
            echo "‚úÖ WS Gateway: http://$SERVER_IP:8001/health"
        else
            echo "‚ùå WS Gateway: FAILED"
        fi
        
        # Frontend Check
        if curl -sf http://localhost:3000 >/dev/null 2>&1; then
            echo "‚úÖ Frontend: http://$SERVER_IP:3000"
        else
            echo "‚ùå Frontend: FAILED"
        fi
        
        # Nginx Check
        if curl -sf http://localhost/health >/dev/null 2>&1; then
            echo "‚úÖ Nginx: http://$SERVER_IP/health"
        else
            echo "‚ùå Nginx: FAILED"
        fi
        
        echo -e "\n=== –†–ï–°–£–†–°–´ TIMEWEB –°–ï–†–í–ï–†–ê ==="
        echo "Memory:"
        free -h | grep "Mem:"
        echo "Disk:"
        df -h / | tail -1
        echo "Docker Stats:"
        timeout 5 docker stats --no-stream || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å—Ç–∞—Ä—Ç—É—é—Ç..."
EOF
    
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
create_monitoring() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    ssh $SERVER_USER@$SERVER_IP << 'EOF'
        cat > /opt/replyx/monitor_timeweb.sh << 'MONITOR_EOF'
#!/bin/bash
echo "=== TIMEWEB SERVER MONITORING ==="
echo "Date: $(date)"
echo "IP: 5.129.246.24"
echo ""
echo "=== MEMORY (4GB) ==="
free -h
echo ""
echo "=== DISK (50GB) ==="
df -h /opt/replyx
echo ""
echo "=== DOCKER CONTAINERS ==="
cd /opt/replyx/Deployed
docker compose ps
echo ""
echo "=== DOCKER STATS ==="
timeout 5 docker stats --no-stream
echo ""
echo "=== TOP PROCESSES ==="
ps aux --sort=-%mem | head -10
echo ""
echo "=== ACCESS URLS ==="
echo "üåê Frontend: http://5.129.246.24"
echo "üîß API Docs: http://5.129.246.24/api/docs"
echo "üìä Status: http://5.129.246.24/api/system/status"
MONITOR_EOF

        chmod +x /opt/replyx/monitor_timeweb.sh
        echo "‚úÖ –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω: /opt/replyx/monitor_timeweb.sh"
EOF
    
    print_status "–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω"
}

# –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_final_info() {
    print_status "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ReplyX –Ω–∞ Timeweb –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    
    echo ""
    echo "=== –î–û–°–¢–£–ü –ö –°–ò–°–¢–ï–ú–ï ==="
    echo "üåê Frontend:    http://$SERVER_IP"
    echo "üîß API Docs:    http://$SERVER_IP/api/docs"  
    echo "üìä System:      http://$SERVER_IP/api/system/status"
    echo "üóÑÔ∏è Health:      http://$SERVER_IP/health"
    echo ""
    echo "=== SSH –î–û–°–¢–£–ü ==="
    echo "ssh $SERVER_USER@$SERVER_IP"
    echo "cd $DEPLOY_PATH"
    echo ""
    echo "=== –£–ü–†–ê–í–õ–ï–ù–ò–ï ==="
    echo "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:     /opt/replyx/monitor_timeweb.sh"
    echo "–õ–æ–≥–∏:           docker compose logs -f"
    echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:     docker compose restart [service]"
    echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞:      docker compose down"
    echo ""
    print_warning "–ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∏—Ç–µ Yandex OAuth –∫–ª—é—á–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç–µ CHANGEME –≤ .env.production"
    print_warning "–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω –∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_info "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ReplyX –Ω–∞ Timeweb"
    print_info "–°–µ—Ä–≤–µ—Ä: $SERVER_IP (2x3.3GHz, 4GB RAM, 50GB NVMe)"
    echo ""
    
    print_warning "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:"
    echo "  1. SSH –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    echo "  2. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è PGPASSWORD —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–ø–∞—Ä–æ–ª—å PostgreSQL –∞–¥–º–∏–Ω–∞)"
    echo "  3. –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    echo ""
    
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        exit 0
    fi
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤
    check_server_connection
    copy_files_to_server
    setup_server
    configure_environment
    initialize_database
    deploy_containers
    verify_deployment
    create_monitoring
    show_final_info
    
    print_status "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ReplyX –Ω–∞ Timeweb —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-deploy}" in
    "deploy")
        main
        ;;
    "monitor")
        ssh $SERVER_USER@$SERVER_IP "/opt/replyx/monitor_timeweb.sh"
        ;;
    "logs")
        ssh $SERVER_USER@$SERVER_IP "cd $DEPLOY_PATH/Deployed && docker compose logs -f"
        ;;
    "status")
        ssh $SERVER_USER@$SERVER_IP "cd $DEPLOY_PATH/Deployed && docker compose ps"
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [deploy|monitor|logs|status]"
        echo ""
        echo "  deploy   - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Timeweb (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  monitor  - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞"
        echo "  logs     - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        echo "  status   - –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        exit 1
        ;;
esac