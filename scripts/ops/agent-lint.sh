#!/bin/bash
# RAD Agent Documentation Linter
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–æ–¥–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è ChatAI MVP 13

set -e
set +e  # –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_ROOT="$(cd "$(dirname "$0")/../.." && pwd)"
FAIL_MODE="${FAIL_MODE:-warn}"  # warn/fail
VERBOSE="${VERBOSE:-false}"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –°—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
ERRORS=0
WARNINGS=0
CHECKS=0

log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
    ((WARNINGS++))
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    ((ERRORS++))
}

success() {
    echo -e "${GREEN}[OK]${NC} $1"
}

check_counter() {
    ((CHECKS++))
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
check_file_paths() {
    log "üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—É—Ç–∏ –∫ –≤–æ—Ä–∫–µ—Ä–∞–º (–µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è docs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if [ -d "$PROJECT_ROOT/docs/" ]; then
        check_counter
        if grep -r "backend/master/" "$PROJECT_ROOT/docs/" > /dev/null 2>&1 || true; then
            if grep -r "backend/master/" "$PROJECT_ROOT/docs/" > /dev/null 2>&1; then
                warn "–ù–∞–π–¥–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—É—Ç–∏ 'backend/master/' –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
                if [ "$VERBOSE" = "true" ]; then
                    grep -rn "backend/master/" "$PROJECT_ROOT/docs/" || true
                fi
            else
                success "–°—Ç–∞—Ä—ã–µ –ø—É—Ç–∏ 'backend/master/' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            fi
        fi
        
        check_counter
        if grep -r "backend/worker/" "$PROJECT_ROOT/docs/" > /dev/null 2>&1; then
            warn "–ù–∞–π–¥–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—É—Ç–∏ 'backend/worker/' –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
            if [ "$VERBOSE" = "true" ]; then
                grep -rn "backend/worker/" "$PROJECT_ROOT/docs/"
            fi
        else
            success "–°—Ç–∞—Ä—ã–µ –ø—É—Ç–∏ 'backend/worker/' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    else
        warn "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è docs/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—É—Ç–µ–π"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö –ø—É—Ç–µ–π
    check_counter
    if [ -f "$PROJECT_ROOT/workers/master/scalable_bot_manager.js" ]; then
        success "–§–∞–π–ª workers/master/scalable_bot_manager.js —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        warn "–§–∞–π–ª workers/master/scalable_bot_manager.js –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    check_counter
    if [ -f "$PROJECT_ROOT/workers/telegram/bot_worker.js" ]; then
        success "–§–∞–π–ª workers/telegram/bot_worker.js —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        warn "–§–∞–π–ª workers/telegram/bot_worker.js –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAPI —Å—Ö–µ–º—ã
check_openapi_schema() {
    log "üìã –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å OpenAPI —Å—Ö–µ–º—ã..."
    
    check_counter
    if [ -f "$PROJECT_ROOT/docs/api/openapi.json" ]; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        schema_date=$(stat -f %m "$PROJECT_ROOT/docs/api/openapi.json" 2>/dev/null || echo "0")
        code_date=$(find "$PROJECT_ROOT/backend/api" -name "*.py" -type f -exec stat -f %m {} \; | sort -n | tail -1)
        
        if [ "$code_date" -gt "$schema_date" ]; then
            warn "OpenAPI —Å—Ö–µ–º–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ö–æ–¥ API –∏–∑–º–µ–Ω–µ–Ω –ø–æ–∑–∂–µ —Å—Ö–µ–º—ã"
        else
            success "OpenAPI —Å—Ö–µ–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞"
        fi
    else
        warn "OpenAPI —Å—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ docs/api/openapi.json"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
check_doc_structure() {
    log "üìÅ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
    
    required_files=(
        "docs/architecture/overview.md"
        "docs/architecture/service-catalog.md"
        "docs/runbooks/workers.md"
        "docs/runbooks/backend.md"
        "docs/runbooks/frontend.md"
        "docs/api/endpoints.md"
        "docs/realtime/events.md"
    )
    
    for file in "${required_files[@]}"; do
        check_counter
        if [ -f "$PROJECT_ROOT/$file" ]; then
            success "‚úì $file"
        else
            error "‚úó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: $file"
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
check_api_endpoints() {
    log "üîå –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."
    
    check_counter
    if [ -f "$PROJECT_ROOT/backend/main.py" ]; then
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ main.py
        routers=$(grep -E "app\.include_router" "$PROJECT_ROOT/backend/main.py" | wc -l)
        if [ "$routers" -gt 10 ]; then
            success "–ù–∞–π–¥–µ–Ω–æ $routers —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ main.py"
        else
            warn "–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ $routers —Ä–æ—É—Ç–µ—Ä–æ–≤, –æ–∂–∏–¥–∞–ª–æ—Å—å –±–æ–ª—å—à–µ"
        fi
    else
        error "–§–∞–π–ª backend/main.py –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π WebSocket
check_websocket_events() {
    log "üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é WebSocket —Å–æ–±—ã—Ç–∏–π..."
    
    check_counter
    if [ -f "$PROJECT_ROOT/docs/realtime/events.md" ]; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π
        if grep -q "| Event" "$PROJECT_ROOT/docs/realtime/events.md"; then
            success "–¢–∞–±–ª–∏—Ü–∞ WebSocket —Å–æ–±—ã—Ç–∏–π –Ω–∞–π–¥–µ–Ω–∞"
        else
            warn "–¢–∞–±–ª–∏—Ü–∞ WebSocket —Å–æ–±—ã—Ç–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
        fi
    else
        warn "–§–∞–π–ª docs/realtime/events.md –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ CODEOWNERS
check_codeowners() {
    log "üë• –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª CODEOWNERS..."
    
    check_counter
    if [ -f "$PROJECT_ROOT/CODEOWNERS" ]; then
        if grep -q "workers/" "$PROJECT_ROOT/CODEOWNERS"; then
            success "CODEOWNERS –ø–æ–∫—Ä—ã–≤–∞–µ—Ç workers/"
        else
            warn "CODEOWNERS –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É workers"
        fi
    else
        warn "–§–∞–π–ª CODEOWNERS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "ü§ñ RAD Agent Documentation Linter v1.0"
    echo "üìÅ –ü—Ä–æ–µ–∫—Ç: ChatAI MVP 13"
    echo "üîß –†–µ–∂–∏–º: $FAIL_MODE"
    echo ""
    
    cd "$PROJECT_ROOT"
    
    check_file_paths
    check_openapi_schema  
    check_doc_structure
    check_api_endpoints
    check_websocket_events
    check_codeowners
    
    echo ""
    echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:"
    echo "   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $CHECKS"
    echo "   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $WARNINGS" 
    echo "   ‚ùå –û—à–∏–±–æ–∫: $ERRORS"
    echo ""
    
    if [ "$ERRORS" -gt 0 ]; then
        if [ "$FAIL_MODE" = "fail" ]; then
            error "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏. CI –¥–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å."
            exit 1
        else
            warn "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏, –Ω–æ —Ä–µ–∂–∏–º 'warn' - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º"
            exit 0
        fi
    elif [ "$WARNINGS" -gt 0 ]; then
        warn "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ—Ç"
        exit 0
    else
        success "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
        exit 0
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        --fail-mode)
            FAIL_MODE="fail"
            shift
            ;;
        --verbose)
            VERBOSE="true"
            shift
            ;;
        -h|--help)
            echo "RAD Agent Documentation Linter"
            echo ""
            echo "–û–ø—Ü–∏–∏:"
            echo "  --fail-mode    –†–µ–∂–∏–º —Å—Ç—Ä–æ–≥–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (fail –Ω–∞ –ª—é–±—ã—Ö –æ—à–∏–±–∫–∞—Ö)"
            echo "  --verbose      –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
            echo "  -h, --help     –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            echo ""
            echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
            echo "  FAIL_MODE=warn|fail   –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: warn)"
            echo "  VERBOSE=true|false    –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: false)"
            exit 0
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            exit 1
            ;;
    esac
done

main "$@"