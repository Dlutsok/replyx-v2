#!/usr/bin/env bash
set -e

# RAD Agent - Code to Documentation Synchronization Checker
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

MODE="${1:-warn}"  # warn –∏–ª–∏ fail
PROJECT_ROOT="$(cd "$(dirname "$0")/../.." && pwd)"

echo "ü§ñ RAD Agent: Code-to-Documentation Synchronization Check"
echo "üìÇ Project: $PROJECT_ROOT"
echo "üîß Mode: $MODE"
echo

WARNINGS=0
ERRORS=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warn() {
    echo "‚ö†Ô∏è  WARNING: $1"
    WARNINGS=$((WARNINGS + 1))
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫  
error() {
    echo "‚ùå ERROR: $1"
    ERRORS=$((ERRORS + 1))
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
success() {
    echo "‚úÖ $1"
}

echo "üîç Checking API Documentation Sync..."

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ API endpoints
BACKEND_API_FILES=$(find "$PROJECT_ROOT/backend/api" -name "*.py" | wc -l | tr -d ' ')
API_DOCS_FILES=$(find "$PROJECT_ROOT/docs/api" -name "*.md" | wc -l | tr -d ' ')

if [ -f "$PROJECT_ROOT/docs/api/openapi.json" ]; then
    OPENAPI_ENDPOINTS=$(python3 -c "
import json
try:
    with open('$PROJECT_ROOT/docs/api/openapi.json', 'r') as f:
        spec = json.load(f)
    endpoints = sum(len([m for m in methods.keys() if m in ['get','post','put','patch','delete']]) 
                   for methods in spec.get('paths', {}).values())
    print(endpoints)
except:
    print(0)
")
    success "OpenAPI spec found with $OPENAPI_ENDPOINTS endpoints"
else
    warn "OpenAPI specification not found at docs/api/openapi.json"
fi

echo
echo "üóÑÔ∏è  Checking Database Documentation Sync..."

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ö–µ–º—ã –ë–î
DATABASE_MODELS=$(find "$PROJECT_ROOT/backend/database" -name "*.py" | wc -l | tr -d ' ')
DB_DOCS=$(find "$PROJECT_ROOT/docs/db" -name "*.md" | wc -l | tr -d ' ')

if [ -f "$PROJECT_ROOT/docs/db/schema.sql" ]; then
    success "Database schema.sql found"
else
    warn "Database schema.sql not found at docs/db/schema.sql"
fi

if [ -f "$PROJECT_ROOT/docs/db/schema_current.md" ]; then
    success "Current database schema docs found"
else
    warn "Current database schema docs not found at docs/db/schema_current.md"
fi

echo
echo "üîå Checking WebSocket/SSE Events Documentation..."

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π WebSocket/SSE
if [ -f "$PROJECT_ROOT/docs/realtime/events.md" ]; then
    success "WebSocket/SSE events documentation found"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–µ—Ä—Å–∏–π —Å–æ–±—ã—Ç–∏–π
    VERSIONED_EVENTS=$(grep -c "@v[0-9]" "$PROJECT_ROOT/docs/realtime/events.md" 2>/dev/null || echo 0)
    if [ "$VERSIONED_EVENTS" -gt 0 ]; then
        success "Found $VERSIONED_EVENTS versioned events in docs/realtime/events.md"
    else
        warn "No versioned events found in docs/realtime/events.md (should use @vN notation)"
    fi
else
    warn "WebSocket/SSE events documentation not found at docs/realtime/events.md"
fi

echo
echo "üöÄ Checking Deployment Documentation..."

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–µ–ø–ª–æ—è
DEPLOYMENT_SCRIPTS=$(find "$PROJECT_ROOT/scripts/deployment" -name "*.sh" 2>/dev/null | wc -l | tr -d ' ')
DEPLOYMENT_DOCS=$(find "$PROJECT_ROOT/docs/deployment" -name "*.md" 2>/dev/null | wc -l | tr -d ' ')

if [ "$DEPLOYMENT_SCRIPTS" -gt 0 ] && [ "$DEPLOYMENT_DOCS" -gt 0 ]; then
    success "Deployment scripts ($DEPLOYMENT_SCRIPTS) and docs ($DEPLOYMENT_DOCS) found"
else
    warn "Mismatch: $DEPLOYMENT_SCRIPTS deployment scripts vs $DEPLOYMENT_DOCS deployment docs"
fi

echo
echo "üìã Checking Runbooks Coverage..."

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ coverage runbooks
RUNBOOKS=$(find "$PROJECT_ROOT/docs/runbooks" -name "*.md" 2>/dev/null | wc -l | tr -d ' ')
if [ "$RUNBOOKS" -ge 4 ]; then
    success "Found $RUNBOOKS runbooks (minimum 4 required: backend, frontend, workers, release)"
else
    warn "Found only $RUNBOOKS runbooks, minimum 4 required"
fi

echo
echo "üèóÔ∏è  Checking ADR Documentation..."

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ ADR
ADR_COUNT=$(find "$PROJECT_ROOT/docs/adr" -name "ADR-*.md" 2>/dev/null | wc -l | tr -d ' ')
if [ "$ADR_COUNT" -gt 0 ]; then
    success "Found $ADR_COUNT Architecture Decision Records"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ADR
    LATEST_ADR=$(ls "$PROJECT_ROOT/docs/adr"/ADR-*.md 2>/dev/null | sort -V | tail -1)
    if [ -n "$LATEST_ADR" ]; then
        LATEST_ADR_NUM=$(basename "$LATEST_ADR" .md | grep -o '[0-9]\+' | tail -1)
        success "Latest ADR: #$LATEST_ADR_NUM"
    fi
else
    error "No Architecture Decision Records found in docs/adr/"
fi

echo
echo "üë• Checking CODEOWNERS Coverage..."

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ CODEOWNERS
if [ -f "$PROJECT_ROOT/CODEOWNERS" ]; then
    success "CODEOWNERS file found"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    COVERED_DIRS=0
    for dir in "docs/" "backend/" "frontend/" "scripts/" "configs/"; do
        if grep -q "$dir" "$PROJECT_ROOT/CODEOWNERS" 2>/dev/null; then
            COVERED_DIRS=$((COVERED_DIRS + 1))
        fi
    done
    
    if [ "$COVERED_DIRS" -ge 3 ]; then
        success "CODEOWNERS covers $COVERED_DIRS/5 major directories"
    else
        warn "CODEOWNERS only covers $COVERED_DIRS/5 major directories"
    fi
else
    warn "CODEOWNERS file not found"
fi

echo
echo "üìä SUMMARY:"
echo "=========="
echo "Backend API files: $BACKEND_API_FILES"
echo "API docs files: $API_DOCS_FILES" 
echo "Database models: $DATABASE_MODELS"
echo "DB docs files: $DB_DOCS"
echo "Deployment scripts: $DEPLOYMENT_SCRIPTS"
echo "Deployment docs: $DEPLOYMENT_DOCS"
echo "Runbooks: $RUNBOOKS"
echo "ADRs: $ADR_COUNT"

echo
echo "üéØ RESULTS:"
echo "==========="
SUCCESS_COUNT=$(($BACKEND_API_FILES + $API_DOCS_FILES + $DATABASE_MODELS + $DB_DOCS + $RUNBOOKS + $ADR_COUNT))
echo "‚úÖ Components found: $SUCCESS_COUNT"
echo "‚ö†Ô∏è  Warnings: $WARNINGS"
echo "‚ùå Errors: $ERRORS"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º exit code –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞
if [ "$MODE" = "fail" ]; then
    if [ "$ERRORS" -gt 0 ]; then
        echo
        echo "üí• FAILED: $ERRORS error(s) found in fail mode"
        exit 1
    elif [ "$WARNINGS" -gt 0 ]; then
        echo
        echo "‚ö†Ô∏è  PASSED with warnings: $WARNINGS warning(s) in fail mode"
        exit 0
    else
        echo
        echo "üéâ ALL CHECKS PASSED in fail mode"
        exit 0
    fi
else
    # warn mode
    if [ "$ERRORS" -gt 0 ]; then
        echo
        echo "‚ö†Ô∏è  PASSED with errors: $ERRORS error(s) in warn mode (would fail in strict mode)"
        exit 0
    else
        echo
        echo "üéâ ALL CHECKS PASSED in warn mode"
        exit 0
    fi
fi