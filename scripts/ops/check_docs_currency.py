#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ChatAI MVP 9
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É.
"""

import os
import re
import json
import subprocess
from pathlib import Path
from typing import Dict, List, Set
from datetime import datetime


class DocumentationChecker:
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.backend_dir = self.project_root / "backend"
        self.docs_dir = self.project_root / "docs"
        self.issues: List[str] = []
        
    def check_api_endpoints(self) -> Dict[str, any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è API endpoints –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        print("üîç Checking API endpoints...")
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ endpoints –≤ –∫–æ–¥–µ
        code_endpoints = self._extract_endpoints_from_code()
        
        # –ù–∞–π—Ç–∏ endpoints –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        doc_endpoints = self._extract_endpoints_from_docs()
        
        missing_in_docs = code_endpoints - doc_endpoints
        extra_in_docs = doc_endpoints - code_endpoints
        
        if missing_in_docs:
            self.issues.append(f"üìù Missing in docs: {missing_in_docs}")
            
        if extra_in_docs:
            self.issues.append(f"üóëÔ∏è Extra in docs: {extra_in_docs}")
            
        return {
            "code_endpoints": len(code_endpoints),
            "doc_endpoints": len(doc_endpoints),
            "missing_in_docs": list(missing_in_docs),
            "extra_in_docs": list(extra_in_docs),
            "coverage": len(code_endpoints & doc_endpoints) / len(code_endpoints) * 100 if code_endpoints else 100
        }
    
    def check_dependency_versions(self) -> Dict[str, any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üì¶ Checking dependency versions...")
        
        # –ß–∏—Ç–∞—Ç—å requirements.txt
        requirements_file = self.backend_dir / "requirements.txt"
        if not requirements_file.exists():
            self.issues.append("‚ùå requirements.txt not found")
            return {}
            
        requirements = self._parse_requirements(requirements_file)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –≤ technology-stack.md
        tech_stack_file = self.docs_dir / "architecture" / "technology-stack.md"
        if not tech_stack_file.exists():
            self.issues.append("‚ùå technology-stack.md not found")
            return {}
            
        doc_versions = self._parse_versions_from_tech_stack(tech_stack_file)
        
        mismatches = []
        for package, req_version in requirements.items():
            doc_version = doc_versions.get(package)
            if doc_version and doc_version != req_version:
                mismatches.append(f"{package}: req={req_version}, doc={doc_version}")
                
        if mismatches:
            self.issues.append(f"üì¶ Version mismatches: {mismatches}")
            
        return {
            "requirements_packages": len(requirements),
            "documented_packages": len(doc_versions),
            "mismatches": mismatches,
            "coverage": len([p for p in requirements if p in doc_versions]) / len(requirements) * 100
        }
    
    def check_security_config(self) -> Dict[str, any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è security –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üîí Checking security configuration...")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å CSRF defaults –≤ –∫–æ–¥–µ
        main_file = self.backend_dir / "main.py"
        csrf_default = self._extract_csrf_default(main_file)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        auth_doc = self.docs_dir / "security" / "authentication.md"
        csrf_documented = self._check_csrf_documentation(auth_doc)
        
        issues = []
        if csrf_default == 'false':
            if not csrf_documented:
                issues.append("‚ö†Ô∏è CSRF disabled by default but not documented")
            else:
                print("‚úÖ CSRF warning properly documented")
        
        return {
            "csrf_default": csrf_default,
            "csrf_documented": csrf_documented,
            "security_issues": issues
        }
    
    def check_file_dates(self) -> Dict[str, any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        print("üìÖ Checking file update dates...")
        
        old_files = []
        recent_files = []
        cutoff_date = datetime.now().timestamp() - (30 * 24 * 60 * 60)  # 30 days
        
        for doc_file in self.docs_dir.rglob("*.md"):
            mtime = doc_file.stat().st_mtime
            if mtime < cutoff_date:
                old_files.append(str(doc_file.relative_to(self.project_root)))
            else:
                recent_files.append(str(doc_file.relative_to(self.project_root)))
                
        if len(old_files) > 5:  # Threshold
            self.issues.append(f"üìÖ {len(old_files)} files older than 30 days")
            
        return {
            "total_docs": len(old_files) + len(recent_files),
            "recent_files": len(recent_files),
            "old_files": len(old_files),
            "old_file_list": old_files[:10]  # Top 10
        }
    
    def _extract_endpoints_from_code(self) -> Set[str]:
        """–ò–∑–≤–ª–µ—á—å endpoints –∏–∑ –∫–æ–¥–∞"""
        endpoints = set()
        api_dir = self.backend_dir / "api"
        
        if not api_dir.exists():
            return endpoints
            
        for py_file in api_dir.glob("*.py"):
            if py_file.name == "__init__.py":
                continue
                
            try:
                content = py_file.read_text(encoding='utf-8')
                # –ù–∞–π—Ç–∏ —Ä–æ—É—Ç–µ—Ä—ã: @router.get("/path"), @router.post("/path") –∏ —Ç.–¥.
                pattern = r'@router\.(get|post|put|delete|patch)\(["\']([^"\']+)["\']'
                matches = re.findall(pattern, content)
                for method, path in matches:
                    endpoints.add(f"{method.upper()} {path}")
            except Exception as e:
                print(f"‚ö†Ô∏è Error reading {py_file}: {e}")
                
        return endpoints
    
    def _extract_endpoints_from_docs(self) -> Set[str]:
        """–ò–∑–≤–ª–µ—á—å endpoints –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        endpoints = set()
        endpoints_file = self.docs_dir / "api" / "endpoints.md"
        
        if not endpoints_file.exists():
            return endpoints
            
        try:
            content = endpoints_file.read_text(encoding='utf-8')
            # –ù–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã —Å endpoints: | `GET` | `/api/path` |
            pattern = r'\|\s*`(\w+)`\s*\|\s*`([^`]+)`\s*\|'
            matches = re.findall(pattern, content)
            for method, path in matches:
                endpoints.add(f"{method.upper()} {path}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error reading endpoints.md: {e}")
            
        return endpoints
    
    def _parse_requirements(self, requirements_file: Path) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ requirements.txt"""
        requirements = {}
        try:
            content = requirements_file.read_text(encoding='utf-8')
            for line in content.split('\n'):
                line = line.strip()
                if line and not line.startswith('#'):
                    if '==' in line:
                        package, version = line.split('==', 1)
                        requirements[package.strip()] = version.strip()
        except Exception as e:
            print(f"‚ö†Ô∏è Error parsing requirements.txt: {e}")
            
        return requirements
    
    def _parse_versions_from_tech_stack(self, tech_file: Path) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤–µ—Ä—Å–∏–π –∏–∑ technology-stack.md"""
        versions = {}
        try:
            content = tech_file.read_text(encoding='utf-8')
            # –ù–∞–π—Ç–∏ –≤–µ—Ä—Å–∏–∏: #### FastAPI (0.111.0)
            pattern = r'#### (\w+)\s*\(([^)]+)\)'
            matches = re.findall(pattern, content)
            for package, version in matches:
                versions[package.lower()] = version
        except Exception as e:
            print(f"‚ö†Ô∏è Error parsing technology-stack.md: {e}")
            
        return versions
    
    def _extract_csrf_default(self, main_file: Path) -> str:
        """–ò–∑–≤–ª–µ—á—å CSRF default –∏–∑ main.py"""
        if not main_file.exists():
            return "unknown"
            
        try:
            content = main_file.read_text(encoding='utf-8')
            # –ù–∞–π—Ç–∏: enable_csrf = os.getenv('ENABLE_CSRF_PROTECTION', 'false')
            pattern = r"enable_csrf\s*=\s*os\.getenv\(['\"]ENABLE_CSRF_PROTECTION['\"],\s*['\"]([^'\"]+)['\"]"
            match = re.search(pattern, content)
            if match:
                return match.group(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error reading main.py: {e}")
            
        return "unknown"
    
    def _check_csrf_documentation(self, auth_file: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é CSRF"""
        if not auth_file.exists():
            return False
            
        try:
            content = auth_file.read_text(encoding='utf-8')
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            return "–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï" in content and "–û–¢–ö–õ–Æ–ß–ï–ù–ê –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ" in content
        except Exception as e:
            print(f"‚ö†Ô∏è Error reading authentication.md: {e}")
            
        return False
    
    def generate_report(self) -> Dict[str, any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìã Generating documentation currency report...")
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "project_root": str(self.project_root),
            "checks": {}
        }
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        report["checks"]["api_endpoints"] = self.check_api_endpoints()
        report["checks"]["dependency_versions"] = self.check_dependency_versions()
        report["checks"]["security_config"] = self.check_security_config()
        report["checks"]["file_dates"] = self.check_file_dates()
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        total_issues = len(self.issues)
        if total_issues == 0:
            report["overall_status"] = "‚úÖ EXCELLENT"
            report["grade"] = "A+"
        elif total_issues <= 2:
            report["overall_status"] = "‚úÖ GOOD"
            report["grade"] = "A"
        elif total_issues <= 5:
            report["overall_status"] = "‚ö†Ô∏è NEEDS_ATTENTION"
            report["grade"] = "B"
        else:
            report["overall_status"] = "üî¥ CRITICAL_ISSUES"
            report["grade"] = "C"
            
        report["issues"] = self.issues
        report["total_issues"] = total_issues
        
        return report
    
    def print_summary(self, report: Dict[str, any]):
        """–ü–µ—á–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìã DOCUMENTATION CURRENCY REPORT")
        print("="*60)
        print(f"üéØ Overall Status: {report['overall_status']}")
        print(f"üìä Grade: {report['grade']}")
        print(f"‚ö†Ô∏è Issues Found: {report['total_issues']}")
        print()
        
        # API Coverage
        api_check = report["checks"]["api_endpoints"]
        print(f"üì° API Coverage: {api_check['coverage']:.1f}% ({api_check['code_endpoints']} endpoints)")
        
        # Dependencies
        deps_check = report["checks"]["dependency_versions"]
        if deps_check:
            print(f"üì¶ Dependency Coverage: {deps_check['coverage']:.1f}%")
        
        # Security
        security_check = report["checks"]["security_config"]
        csrf_status = "‚úÖ Documented" if security_check['csrf_documented'] else "‚ö†Ô∏è Missing"
        print(f"üîí CSRF Documentation: {csrf_status}")
        
        # File freshness
        files_check = report["checks"]["file_dates"]
        fresh_ratio = files_check['recent_files'] / files_check['total_docs'] * 100
        print(f"üìÖ File Freshness: {fresh_ratio:.1f}% recent")
        
        if self.issues:
            print("\nüîç Issues Found:")
            for issue in self.issues:
                print(f"  ‚Ä¢ {issue}")
        
        print("\n‚úÖ Report completed!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    project_root = os.getcwd()
    checker = DocumentationChecker(project_root)
    
    print("üöÄ Starting documentation currency check...")
    print(f"üìÅ Project root: {project_root}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
    report = checker.generate_report()
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON –æ—Ç—á–µ—Ç
    report_file = Path(project_root) / "docs" / "documentation_currency_check.json"
    try:
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        print(f"üíæ Full report saved to: {report_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è Could not save report: {e}")
    
    # –ü–µ—á–∞—Ç—å —Å–≤–æ–¥–∫–∏
    checker.print_summary(report)
    
    # Exit code
    exit_code = 0 if report['total_issues'] <= 2 else 1
    exit(exit_code)


if __name__ == "__main__":
    main()


