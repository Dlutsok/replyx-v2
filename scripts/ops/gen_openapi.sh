#!/usr/bin/env bash
set -e

echo "üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è ChatAI..."

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backend
pushd "$(dirname "$0")/../backend" >/dev/null

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OpenAPI JSON –∏–∑ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
python - <<'EOF'
import json
import sys
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –∏–∑–ª–∏—à–Ω–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
logging.getLogger("multipart").setLevel(logging.ERROR)

try:
    from fastapi.openapi.utils import get_openapi
    from main import app
    
    print("üìù –ò–∑–≤–ª–µ–∫–∞–µ–º OpenAPI —Å—Ö–µ–º—É –∏–∑ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –ü–æ–ª—É—á–∞–µ–º OpenAPI —Å—Ö–µ–º—É
    spec = get_openapi(
        title="ChatAI MVP 9 API",
        version="1.0.0",
        description="Comprehensive API for ChatAI platform with AI assistants, document management, and real-time analytics",
        routes=app.routes,
        servers=[
            {"url": "https://api.chatai.com", "description": "Production server"},
            {"url": "http://localhost:8000", "description": "Development server"}
        ]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    spec["info"]["contact"] = {
        "name": "ChatAI Support", 
        "email": "support@chatai.com"
    }
    
    spec["info"]["license"] = {
        "name": "Proprietary",
        "url": "https://chatai.com/license"
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    output_path = "../docs/api/openapi.json"
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(spec, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_path}")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    endpoints_count = len([path for path in spec.get("paths", {}).values() 
                          for method in path.keys() if method in ["get", "post", "put", "patch", "delete"]])
    schemas_count = len(spec.get("components", {}).get("schemas", {}))
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –≠–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {endpoints_count}")  
    print(f"   - –°—Ö–µ–º –¥–∞–Ω–Ω—ã—Ö: {schemas_count}")
    print(f"   - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(output_path)} –±–∞–π—Ç")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ PYTHONPATH –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    sys.exit(1)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OpenAPI: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)
EOF

popd >/dev/null

echo "üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OpenAPI –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"