#!/bin/bash

# =============================================================================
# Proxy Chaos Testing Script –¥–ª—è ReplyX (macOS –≤–µ—Ä—Å–∏—è)
# –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ mock-–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
# =============================================================================

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROXY_HOST="154.196.24.180"
PROXY_PORT="63872"
TEST_DURATION=30  # —Å–µ–∫—É–Ω–¥
API_BASE_URL="${API_BASE_URL:-http://localhost:8000}"
LOG_FILE="proxy_chaos_test_$(date +%Y%m%d_%H%M%S).log"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    if ! command -v curl &> /dev/null; then
        log_error "curl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ curl –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤."
        exit 1
    fi
    
    if ! command -v jq &> /dev/null; then
        log_warning "jq –Ω–µ –Ω–∞–π–¥–µ–Ω. JSON –æ—Ç–≤–µ—Ç—ã –Ω–µ –±—É–¥—É—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è."
        JQ_AVAILABLE=false
    else
        JQ_AVAILABLE=true
    fi
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã (macOS –≤–µ—Ä—Å–∏—è)"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∫—Å–∏
get_proxy_metrics() {
    local response
    response=$(curl -s "$API_BASE_URL/api/proxy/health" 2>/dev/null || echo "{}")
    
    if [ "$JQ_AVAILABLE" = true ]; then
        echo "$response" | jq -r '.available_proxies // "unknown"'
    else
        echo "$response" | grep -o '"available_proxies":[0-9]*' | cut -d':' -f2 || echo "unknown"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
check_proxy_health() {
    local status_code
    status_code=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE_URL/api/proxy/health" || echo "000")
    echo "$status_code"
}

# –¢–µ—Å—Ç–æ–≤—ã–π AI –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
test_ai_request() {
    local start_time end_time duration status_code
    start_time=$(date +%s)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π AI —ç–Ω–¥–ø–æ–∏–Ω—Ç
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–∏–∞–ª–æ–≥–æ–≤
    status_code=$(curl -s -o /dev/null -w "%{http_code}" \
        -X GET "$API_BASE_URL/health" \
        2>/dev/null || echo "000")
    
    end_time=$(date +%s)
    duration=$((end_time - start_time))
    
    echo "$status_code,$duration"
}

# –°–∏–º—É–ª—è—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏ (mock –¥–ª—è macOS)
simulate_proxy_block() {
    log_warning "üö´ –°–∏–º—É–ª–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É primary –ø—Ä–æ–∫—Å–∏ $PROXY_HOST:$PROXY_PORT (mock —Ä–µ–∂–∏–º)"
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-—Ñ–ª–∞–≥ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    touch "/tmp/proxy_primary_blocked"
    
    log_success "Primary –ø—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (—Å–∏–º—É–ª—è—Ü–∏—è)"
    return 0
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ (mock)
simulate_proxy_restore() {
    log_info "üîì –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ $PROXY_HOST:$PROXY_PORT (mock —Ä–µ–∂–∏–º)"
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª-—Ñ–ª–∞–≥
    rm -f "/tmp/proxy_primary_blocked"
    
    log_success "–ü—Ä–æ–∫—Å–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Å–∏–º—É–ª—è—Ü–∏—è)"
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫
start_monitoring() {
    log_info "üîç –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫..."
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –º–µ—Ç—Ä–∏–∫
    METRICS_FILE="proxy_metrics_$(date +%Y%m%d_%H%M%S).csv"
    echo "timestamp,available_proxies,health_status,api_request_status,api_request_duration,simulation_status" > "$METRICS_FILE"
    
    # –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    {
        while [ -f "/tmp/proxy_chaos_test_running" ]; do
            timestamp=$(date +%s)
            available_proxies=$(get_proxy_metrics)
            health_status=$(check_proxy_health)
            api_result=$(test_ai_request)
            api_status=$(echo "$api_result" | cut -d',' -f1)
            api_duration=$(echo "$api_result" | cut -d',' -f2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏
            if [ -f "/tmp/proxy_primary_blocked" ]; then
                simulation_status="blocked"
            else
                simulation_status="normal"
            fi
            
            echo "$timestamp,$available_proxies,$health_status,$api_status,$api_duration,$simulation_status" >> "$METRICS_FILE"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if [ "$health_status" != "200" ]; then
                log_warning "Health check failed: HTTP $health_status"
            fi
            
            if [ "$simulation_status" = "blocked" ]; then
                log_info "–°–∏–º—É–ª—è—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–∞, available_proxies: $available_proxies"
            fi
            
            sleep 2
        done
    } &
    
    MONITOR_PID=$!
    log_success "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (PID: $MONITOR_PID)"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
stop_monitoring() {
    if [ -f "/tmp/proxy_chaos_test_running" ]; then
        rm "/tmp/proxy_chaos_test_running"
    fi
    
    if [ -n "${MONITOR_PID:-}" ]; then
        kill "$MONITOR_PID" 2>/dev/null || true
        wait "$MONITOR_PID" 2>/dev/null || true
        log_success "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
analyze_results() {
    log_info "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞..."
    
    if [ ! -f "$METRICS_FILE" ]; then
        log_error "–§–∞–π–ª –º–µ—Ç—Ä–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    local total_requests failed_requests success_rate
    local health_fails blocked_time normal_time
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_requests=$(tail -n +2 "$METRICS_FILE" | wc -l)
    failed_requests=$(tail -n +2 "$METRICS_FILE" | awk -F, '$3 != 200' | wc -l)
    
    if [ "$total_requests" -gt 0 ]; then
        success_rate=$(echo "scale=2; (($total_requests - $failed_requests) * 100) / $total_requests" | bc -l 2>/dev/null || echo "0")
    else
        success_rate="0"
    fi
    
    health_fails=$(tail -n +2 "$METRICS_FILE" | awk -F, '$3 != 200' | wc -l)
    blocked_time=$(tail -n +2 "$METRICS_FILE" | awk -F, '$6 == "blocked"' | wc -l)
    normal_time=$(tail -n +2 "$METRICS_FILE" | awk -F, '$6 == "normal"' | wc -l)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    echo ""
    log_info "=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ CHAOS –¢–ï–°–¢–ê (macOS Mock) ==="
    log_info "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${TEST_DURATION}s"
    log_info "–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $total_requests"
    log_info "–ù–µ—É–¥–∞—á–Ω—ã—Ö health checks: $failed_requests"
    log_info "Success rate: ${success_rate}%"
    log_info "Health check fails: $health_fails"
    log_info "–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${blocked_time} —Ü–∏–∫–ª–æ–≤"
    log_info "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${normal_time} —Ü–∏–∫–ª–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –≤–æ –≤—Ä–µ–º—è "–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
    blocked_availability=$(tail -n +2 "$METRICS_FILE" | awk -F, '$6 == "blocked" {print $2}' | head -1)
    if [ -n "$blocked_availability" ]; then
        log_info "–î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –≤–æ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: $blocked_availability"
    fi
    
    # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    echo ""
    if [ "$failed_requests" -eq 0 ]; then
        log_success "üéâ –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑–∞–ª–∞ 100% –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å!"
    elif [ "${success_rate%.*}" -gt 95 ]; then
        log_success "‚úÖ –•–û–†–û–®–û: Success rate > 95%, —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞"
    elif [ "${success_rate%.*}" -gt 80 ]; then
        log_warning "‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: Success rate > 80%, –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π"
    else
        log_error "‚ùå –ü–õ–û–•–û: Success rate < 80%, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞"
    fi
    
    log_info "–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $METRICS_FILE"
    log_info "–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $LOG_FILE"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
    echo ""
    log_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫:"
    tail -5 "$METRICS_FILE" | while read line; do
        echo "  $line"
    done
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    log_info "üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞..."
    stop_monitoring
    simulate_proxy_restore
    rm -f "/tmp/proxy_primary_blocked"
    exit 0
}

trap cleanup SIGINT SIGTERM

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
main() {
    echo ""
    log_info "üöÄ –ó–∞–ø—É—Å–∫ Proxy Chaos Test –¥–ª—è ReplyX (macOS)"
    log_info "–í—Ä–µ–º—è: $(date)"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_dependencies
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    health_status=$(check_proxy_health)
    if [ "$health_status" != "200" ]; then
        log_error "API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (HTTP $health_status)"
        log_error "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: $API_BASE_URL"
        exit 1
    fi
    
    log_success "API –¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    initial_proxies=$(get_proxy_metrics)
    log_info "–î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–æ —Ç–µ—Å—Ç–∞: $initial_proxies"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    touch "/tmp/proxy_chaos_test_running"
    start_monitoring
    
    # –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
    sleep 3
    
    # CHAOS: —Å–∏–º—É–ª–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É primary –ø—Ä–æ–∫—Å–∏
    simulate_proxy_block
    
    log_info "üïê –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ ${TEST_DURATION} —Å–µ–∫—É–Ω–¥..."
    log_info "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã..."
    
    # –ñ–¥–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ—Å—Ç–∞
    sleep $((TEST_DURATION / 2))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    log_info "üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Å–µ—Ä–µ–¥–∏–Ω–∞ —Ç–µ—Å—Ç–∞):"
    current_proxies=$(get_proxy_metrics)
    log_info "   –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: $current_proxies"
    
    # –ñ–¥–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–ª–æ–≤–∏–Ω—É –≤—Ä–µ–º–µ–Ω–∏
    sleep $((TEST_DURATION / 2))
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
    simulate_proxy_restore
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    log_info "‚è≥ –û–∂–∏–¥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (5s)..."
    sleep 5
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    stop_monitoring
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analyze_results
}

# –°–ø—Ä–∞–≤–∫–∞
show_help() {
    echo "Proxy Chaos Testing Script –¥–ª—è ReplyX (macOS –≤–µ—Ä—Å–∏—è)"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
    echo ""
    echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
    echo "  API_BASE_URL    - –ë–∞–∑–æ–≤—ã–π URL API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8000)"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -h, --help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  -d, --duration  - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä:"
    echo "  $0 --duration 60"
    echo ""
    echo "–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ mock-–≤–µ—Ä—Å–∏—è –¥–ª—è macOS. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç—Å—è."
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -d|--duration)
            TEST_DURATION="$2"
            shift 2
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
done

# –ó–∞–ø—É—Å–∫
main