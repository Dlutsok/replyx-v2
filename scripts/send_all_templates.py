#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö email —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º ReplyX
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
backend_path = Path(__file__).parent.parent / "backend"
sys.path.append(str(backend_path))

try:
    from integrations.email_service import email_service
    from templates.email_templates import EmailTemplates
    print("‚úì –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)

def send_all_templates_to_email(target_email: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ email —à–∞–±–ª–æ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"""
    
    print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ email —à–∞–±–ª–æ–Ω—ã –Ω–∞ {target_email}")
    print("=" * 60)
    
    templates_to_send = [
        {
            "name": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ",
            "method": lambda: email_service.send_welcome_email(
                to_email=target_email,
                user_name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            )
        },
        {
            "name": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è",
            "method": lambda: email_service.send_password_reset_email(
                to_email=target_email,
                reset_link="https://replyx.ru/reset-password?token=demo123",
                user_name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            )
        },
        {
            "name": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
            "method": lambda: email_service.send_payment_confirmation_email(
                to_email=target_email,
                amount=500.0,
                messages_count=100,
                current_balance=150,
                bonus_amount=50.0
            )
        },
        {
            "name": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ",
            "method": lambda: email_service.send_low_balance_warning_email(
                to_email=target_email,
                remaining_messages=5
            )
        },
        {
            "name": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è",
            "method": lambda: email_service.send_balance_depleted_email(
                to_email=target_email
            )
        },
        {
            "name": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—Ä–æ—Å–µ handoff",
            "method": lambda: email_service.send_handoff_notification(
                to_email=target_email,
                dialog_id=12345,
                reason="keyword",
                user_preview="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∂–∏–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API...",
                timestamp="10.09.2025 14:30"
            )
        }
    ]
    
    successful_sends = 0
    failed_sends = 0
    
    for i, template in enumerate(templates_to_send, 1):
        print(f"üìß [{i}/{len(templates_to_send)}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {template['name']}")
        
        try:
            success = template['method']()
            if success:
                print(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                successful_sends += 1
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
                failed_sends += 1
        except Exception as e:
            print(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            failed_sends += 1
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    
    print("=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_sends}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_sends}")
    print(f"   üìß –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates_to_send)}")
    
    if successful_sends > 0:
        print(f"\nüéâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ {target_email}!")
        print("üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å—å–º–∞ –º–æ–≥—É—Ç –ø–æ–ø–∞—Å—Ç—å –≤ –ø–∞–ø–∫—É '–°–ø–∞–º'")

def main():
    target_email = "dlutsok13@yandex.ru"
    
    print("üîß ReplyX Email Templates Sender")
    print(f"üìß –¶–µ–ª–µ–≤–∞—è –ø–æ—á—Ç–∞: {target_email}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é email
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é email...")
    test_result = email_service.send_test_email(target_email)
    
    if test_result["success"]:
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        print(f"   SMTP: {test_result['server']}:{test_result['port']}")
        print(f"   –ù–∞—Å—Ç—Ä–æ–π–∫–∏: SSL={test_result['ssl']}, STARTTLS={test_result['starttls']}")
        print()
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞")
        print(f"   SMTP: {test_result['server']}:{test_result['port']}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
        
        # –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã
        print("\n‚ö†Ô∏è  –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã...")
        print()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
    send_all_templates_to_email(target_email)

if __name__ == "__main__":
    main()