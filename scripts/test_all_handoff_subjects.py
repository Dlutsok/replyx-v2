#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ handoff —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
backend_path = Path(__file__).parent.parent / "backend"
sys.path.append(str(backend_path))

try:
    from integrations.email_service import email_service
    print("‚úì EmailService –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ EmailService: {e}")
    sys.exit(1)

def test_all_handoff_subjects(target_email: str = "dlutsok13@yandex.ru"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ handoff —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã handoff –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ {target_email}")
    print("=" * 80)
    
    test_cases = [
        {
            "name": "–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            "reason": "keyword",
            "user_text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π API",
            "expected_subject": "ReplyX: –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –∂–∏–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–¥–∏–∞–ª–æ–≥ #11111)"
        },
        {
            "name": "AI –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å",
            "reason": "fallback", 
            "user_text": "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ webhook?",
            "expected_subject": "ReplyX: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–¥–∏–∞–ª–æ–≥ #22222)"
        },
        {
            "name": "–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "reason": "retries",
            "user_text": "–¢—Ä–µ—Ç–∏–π —Ä–∞–∑ –ø—ã—Ç–∞—é—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–æ–π –æ—à–∏–±–∫–æ–π, –ø–æ–º–æ–≥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
            "expected_subject": "ReplyX: –°–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π - –Ω—É–∂–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä (–¥–∏–∞–ª–æ–≥ #33333)"
        },
        {
            "name": "–†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å",
            "reason": "manual",
            "user_text": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—Ä—É—á–Ω—É—é –Ω–∞–∑–Ω–∞—á–∏–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥",
            "expected_subject": "ReplyX: –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä (–¥–∏–∞–ª–æ–≥ #44444)"
        }
    ]
    
    successful_sends = 0
    
    for i, case in enumerate(test_cases, 1):
        print(f"üìß [{i}/{len(test_cases)}] –¢–µ—Å—Ç–∏—Ä—É–µ–º: {case['name']}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {case['reason']}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {case['expected_subject']}")
        
        dialog_id = int(f"{i}{i}{i}{i}{i}")  # 11111, 22222, 33333, 44444
        
        try:
            success = email_service.send_handoff_notification(
                to_email=target_email,
                dialog_id=dialog_id,
                reason=case['reason'],
                user_preview=case['user_text'],
                timestamp="10.09.2025 16:00"
            )
            
            if success:
                print(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                successful_sends += 1
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
                
        except Exception as e:
            print(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    print("=" * 80)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful_sends}/{len(test_cases)} –ø–∏—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    if successful_sends == len(test_cases):
        print("üéâ –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"üì¨ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ {target_email}")
        print()
        print("üîç –í –ø–æ—á—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–∏—Å—å–º–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏:")
        for case in test_cases:
            dialog_id = test_cases.index(case) + 1
            dialog_id = int(f"{dialog_id}" * 5)
            expected = case['expected_subject'].replace('#11111', f'#{dialog_id}').replace('#22222', f'#{dialog_id}').replace('#33333', f'#{dialog_id}').replace('#44444', f'#{dialog_id}')
            print(f"   ‚Ä¢ {expected}")
        print()
        print("‚ú® –ù–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≥–æ—Ä–∞–∑–¥–æ –ø–æ–Ω—è—Ç–Ω–µ–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
    else:
        print("‚ùå –ù–µ –≤—Å–µ –ø–∏—Å—å–º–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å")

def main():
    target_email = "dlutsok13@yandex.ru"
    
    print("üîß ReplyX Handoff Subjects Tester")
    print(f"üìß –¶–µ–ª–µ–≤–∞—è –ø–æ—á—Ç–∞: {target_email}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é email
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é email...")
    test_result = email_service.send_test_email(target_email)
    
    if not test_result["success"]:
        print("‚ùå –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return
    
    print("‚úÖ –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ email —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    test_all_handoff_subjects(target_email)

if __name__ == "__main__":
    main()