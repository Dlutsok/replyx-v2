#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ handoff —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ handoff —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email
"""

import sys
import os
from pathlib import Path
from datetime import datetime
import pytz

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
backend_path = Path(__file__).parent.parent / "backend"
sys.path.append(str(backend_path))

try:
    from integrations.email_service import email_service
    print("‚úì EmailService –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ EmailService: {e}")
    sys.exit(1)

def test_timezone_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ timezone –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö"""
    print("üïê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ timezone...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º UTC –≤—Ä–µ–º—è
    utc_time = datetime.utcnow()
    print(f"   UTC –≤—Ä–µ–º—è: {utc_time.strftime('%d.%m.%Y %H:%M')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ú–æ—Å–∫–≤—ã
    moscow_tz = pytz.timezone('Europe/Moscow')
    local_time = datetime.now(moscow_tz)
    print(f"   –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {local_time.strftime('%d.%m.%Y %H:%M')}")

    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
    time_diff = (local_time - utc_time.replace(tzinfo=None)).total_seconds() / 3600
    print(f"   –†–∞–∑–Ω–∏—Ü–∞ —Å UTC: {time_diff:.1f} —á–∞—Å–æ–≤")
    print("‚úÖ Timezone –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!"    return True

def test_handoff_notification(target_email: str = "dlutsok13@yandex.ru"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É handoff —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º handoff —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ {target_email}")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dialog_id = 99999
    reason = "keyword"  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    user_preview = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∂–∏–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API –¥–ª—è –º–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."
    timestamp = "10.09.2025 15:45"
    
    print(f"üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º handoff —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")
    print(f"   Dialog ID: {dialog_id}")
    print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_preview[:50]}...")
    print(f"   –í—Ä–µ–º—è: {timestamp}")
    print()
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = email_service.send_handoff_notification(
            to_email=target_email,
            dialog_id=dialog_id,
            reason=reason,
            user_preview=user_preview,
            timestamp=timestamp
        )
        
        if success:
            print("‚úÖ Handoff —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üì¨ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ {target_email}")
            print("üí° –ï—Å–ª–∏ –ø–∏—Å—å–º–∞ –Ω–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ '–°–ø–∞–º'")
            print()
            print("üîç –ü–∏—Å—å–º–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:")
            print("   - –ó–∞–≥–æ–ª–æ–≤–æ–∫: [Handoff requested] –î–∏–∞–ª–æ–≥ #99999")
            print("   - –ü—Ä–∏—á–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            print("   - –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("   - –°—Å—ã–ª–∫—É –Ω–∞ –¥–∏–∞–ª–æ–≥ –≤ –∞–¥–º–∏–Ω–∫–µ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ handoff —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
            
    except Exception as e:
        print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return False
    
    return success

def main():
    target_email = "dlutsok13@yandex.ru"
    
    print("üîß ReplyX Handoff Notification Tester")
    print(f"üìß –¶–µ–ª–µ–≤–∞—è –ø–æ—á—Ç–∞: {target_email}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é email
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é email...")
    test_result = email_service.send_test_email(target_email)
    
    if not test_result["success"]:
        print("‚ùå –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   SMTP: {test_result['server']}:{test_result['port']}")
        print("   Handoff —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–∂–µ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
        return
    
    print("‚úÖ –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ email —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º handoff —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    success = test_handoff_notification(target_email)
    
    print()
    print("=" * 60)
    if success:
        print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å handoff —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    else:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
        print("–ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π email")

if __name__ == "__main__":
    main()