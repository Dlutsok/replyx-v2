<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="5" skipped="0" tests="13" time="1.202" timestamp="2025-09-06T11:38:32.581528+03:00" hostname="MacBook-Pro-Dan.local"><testcase classname="tests.test_integration_realtime.TestRealTimeIntegration" name="test_complete_message_flow_admin_to_widget" time="0.027"><failure message="TypeError: Client.__init__() got an unexpected keyword argument 'app'">self = &lt;test_integration_realtime.TestRealTimeIntegration object at 0x112f02fd0&gt;

    @pytest.mark.asyncio
    async def test_complete_message_flow_admin_to_widget(self):
        """Test complete message flow from admin API to widget WebSocket"""
    
        # Mock database
        with patch('database.get_db') as mock_get_db:
            mock_db = Mock()
            mock_get_db.return_value = mock_db
    
            # Mock dialog and message objects
            mock_dialog = Mock()
            mock_dialog.id = 123
            mock_dialog.handoff_status = 'none'
    
            mock_message = Mock()
            mock_message.id = 456
            mock_message.sender = 'manager'
            mock_message.text = 'Hello from admin'
            mock_message.timestamp.isoformat.return_value = '2025-01-15T10:30:00'
    
            mock_db.query.return_value.filter.return_value.first.return_value = mock_dialog
            mock_db.add = Mock()
            mock_db.commit = Mock()
            mock_db.refresh = Mock()
    
            # Mock WebSocket connections
            admin_ws = AsyncMock()
            widget_ws = AsyncMock()
            ws_connections[123] = [admin_ws]
            ws_site_connections[123] = [widget_ws]
    
            with patch('api.dialogs.models.DialogMessage', return_value=mock_message):
                with patch('core.auth.get_current_user', return_value=Mock()):
                    # Simulate API call
&gt;                   client = TestClient(app)
                             ^^^^^^^^^^^^^^^

tests/test_integration_realtime.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;starlette.testclient.TestClient object at 0x112f9aba0&gt;
app = &lt;fastapi.applications.FastAPI object at 0x1103656a0&gt;
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -&gt; None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
&gt;       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/starlette/testclient.py:429: TypeError</failure></testcase><testcase classname="tests.test_integration_realtime.TestRealTimeIntegration" name="test_widget_user_message_routing" time="0.006"><failure message="TypeError: Client.__init__() got an unexpected keyword argument 'app'">self = &lt;test_integration_realtime.TestRealTimeIntegration object at 0x112f03390&gt;

    @pytest.mark.asyncio
    async def test_widget_user_message_routing(self):
        """Test that user messages from widget only go to admin WebSocket"""
    
        with patch('database.get_db') as mock_get_db:
            mock_db = Mock()
            mock_get_db.return_value = mock_db
    
            # Mock assistant and dialog
            mock_assistant = Mock()
            mock_assistant.user_id = 1
            mock_dialog = Mock()
            mock_dialog.id = 123
            mock_dialog.handoff_status = 'none'
    
            mock_message = Mock()
            mock_message.id = 789
            mock_message.sender = 'user'
            mock_message.text = 'Hello from widget user'
            mock_message.timestamp.isoformat.return_value = '2025-01-15T10:30:00'
    
            # Setup query chain for widget endpoint
            mock_db.query.return_value.filter.return_value.first.side_effect = [
                mock_assistant,  # First query for assistant
                mock_dialog      # Second query for dialog
            ]
            mock_db.add = Mock()
            mock_db.commit = Mock()
            mock_db.refresh = Mock()
    
            # Mock WebSocket connections
            admin_ws = AsyncMock()
            widget_ws = AsyncMock()
            ws_connections[123] = [admin_ws]
            ws_site_connections[123] = [widget_ws]
    
            with patch('api.site.models.DialogMessage', return_value=mock_message):
                # Simulate widget API call
&gt;               client = TestClient(app)
                         ^^^^^^^^^^^^^^^

tests/test_integration_realtime.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;starlette.testclient.TestClient object at 0x112f75810&gt;
app = &lt;fastapi.applications.FastAPI object at 0x1103656a0&gt;
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -&gt; None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
&gt;       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/starlette/testclient.py:429: TypeError</failure></testcase><testcase classname="tests.test_integration_realtime.TestRealTimeIntegration" name="test_ai_response_cross_channel_delivery" time="0.002"><failure message="TypeError: Client.__init__() got an unexpected keyword argument 'app'">self = &lt;test_integration_realtime.TestRealTimeIntegration object at 0x112be2780&gt;

    @pytest.mark.asyncio
    async def test_ai_response_cross_channel_delivery(self):
        """Test AI response delivery to both admin and widget channels"""
    
        with patch('database.get_db') as mock_get_db:
            mock_db = Mock()
            mock_get_db.return_value = mock_db
    
            # Mock assistant and dialog
            mock_assistant = Mock()
            mock_assistant.user_id = 1
            mock_dialog = Mock()
            mock_dialog.id = 123
            mock_dialog.handoff_status = 'none'
    
            mock_user_message = Mock()
            mock_user_message.id = 100
            mock_user_message.sender = 'user'
            mock_user_message.text = 'User question'
            mock_user_message.timestamp.isoformat.return_value = '2025-01-15T10:30:00'
    
            mock_ai_message = Mock()
            mock_ai_message.id = 101
            mock_ai_message.sender = 'assistant'
            mock_ai_message.text = 'AI response'
            mock_ai_message.timestamp.isoformat.return_value = '2025-01-15T10:31:00'
    
            mock_db.query.return_value.filter.return_value.first.side_effect = [
                mock_assistant,
                mock_dialog
            ]
            mock_db.add = Mock()
            mock_db.commit = Mock()
            mock_db.refresh = Mock()
    
            # Mock WebSocket connections
            admin_ws = AsyncMock()
            widget_ws = AsyncMock()
            ws_connections[123] = [admin_ws]
            ws_site_connections[123] = [widget_ws]
    
            with patch('api.site.models.DialogMessage', return_value=mock_user_message):
                with patch('api.site.generate_ai_response', return_value=mock_ai_message):
                    # Simulate widget API call that triggers AI response
&gt;                   client = TestClient(app)
                             ^^^^^^^^^^^^^^^

tests/test_integration_realtime.py:184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;starlette.testclient.TestClient object at 0x112f76710&gt;
app = &lt;fastapi.applications.FastAPI object at 0x1103656a0&gt;
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -&gt; None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
&gt;       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/starlette/testclient.py:429: TypeError</failure></testcase><testcase classname="tests.test_integration_realtime.TestWebSocketEndpointIntegration" name="test_websocket_endpoint_authentication_flow" time="0.002"><failure message="TypeError: Client.__init__() got an unexpected keyword argument 'app'">self = &lt;test_integration_realtime.TestWebSocketEndpointIntegration object at 0x112f03250&gt;

    @pytest.mark.asyncio
    async def test_websocket_endpoint_authentication_flow(self):
        """Test complete WebSocket authentication flow"""
    
        # Test admin WebSocket endpoint
        with patch('core.auth.get_user_from_token') as mock_auth:
            mock_user = Mock()
            mock_user.id = 1
            mock_auth.return_value = mock_user
    
            with patch('database.get_db') as mock_get_db:
                mock_db = Mock()
                mock_get_db.return_value = mock_db
    
                # Test WebSocket connection
&gt;               client = TestClient(app)
                         ^^^^^^^^^^^^^^^

tests/test_integration_realtime.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;starlette.testclient.TestClient object at 0x112be3ce0&gt;
app = &lt;fastapi.applications.FastAPI object at 0x1103656a0&gt;
base_url = 'http://testserver', raise_server_exceptions = True, root_path = ''
backend = 'asyncio', backend_options = None, cookies = None
headers = {'user-agent': 'testclient'}, follow_redirects = True

    def __init__(
        self,
        app: ASGIApp,
        base_url: str = "http://testserver",
        raise_server_exceptions: bool = True,
        root_path: str = "",
        backend: typing.Literal["asyncio", "trio"] = "asyncio",
        backend_options: dict[str, typing.Any] | None = None,
        cookies: httpx._types.CookieTypes | None = None,
        headers: dict[str, str] | None = None,
        follow_redirects: bool = True,
    ) -&gt; None:
        self.async_backend = _AsyncBackend(
            backend=backend, backend_options=backend_options or {}
        )
        if _is_asgi3(app):
            asgi_app = app
        else:
            app = typing.cast(ASGI2App, app)  # type: ignore[assignment]
            asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]
        self.app = asgi_app
        self.app_state: dict[str, typing.Any] = {}
        transport = _TestClientTransport(
            self.app,
            portal_factory=self._portal_factory,
            raise_server_exceptions=raise_server_exceptions,
            root_path=root_path,
            app_state=self.app_state,
        )
        if headers is None:
            headers = {}
        headers.setdefault("user-agent", "testclient")
&gt;       super().__init__(
            app=self.app,
            base_url=base_url,
            headers=headers,
            transport=transport,
            follow_redirects=follow_redirects,
            cookies=cookies,
        )
E       TypeError: Client.__init__() got an unexpected keyword argument 'app'

/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/starlette/testclient.py:429: TypeError</failure></testcase><testcase classname="tests.test_integration_realtime.TestWebSocketEndpointIntegration" name="test_multiple_websocket_connections" time="0.004" /><testcase classname="tests.test_integration_realtime.TestHandoffIntegration" name="test_handoff_request_event_propagation" time="0.002" /><testcase classname="tests.test_integration_realtime.TestHandoffIntegration" name="test_handoff_started_event_propagation" time="0.003" /><testcase classname="tests.test_integration_realtime.TestMessageFormatsIntegration" name="test_direct_message_format_delivery" time="0.005" /><testcase classname="tests.test_integration_realtime.TestMessageFormatsIntegration" name="test_wrapped_message_format_delivery" time="0.003" /><testcase classname="tests.test_integration_realtime.TestErrorRecoveryIntegration" name="test_websocket_connection_failure_recovery" time="0.005"><failure message="AttributeError: 'list' object has no attribute 'discard'">dialog_id = 123
message = {'id': 456, 'sender': 'manager', 'text': 'Test message', 'timestamp': '2025-01-15T10:30:00Z'}

    async def push_dialog_message(dialog_id: int, message: dict):
        """Отправляет сообщение всем подключенным клиентам диалога (админ панель)"""
        async with await _get_dialog_lock(dialog_id):
            conns = ws_connections.get(dialog_id, set())
            logger.info(f"Push to ADMIN dialog {dialog_id}: {len(conns)} connections")
            logger.debug(f"Admin message: {message}")
    
            if not conns:
                logger.warning(f"No ADMIN WebSocket connections found for dialog {dialog_id}")
                logger.debug(f"Available ADMIN dialogs: {list(ws_connections.keys())}")
                return
    
            sent_count = 0
            # Создаем копию set для итерации, чтобы избежать изменений во время итерации
            for ws in conns.copy():
                try:
&gt;                   await ws.send_json(message)

services/websocket_manager.py:503: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;AsyncMock name='mock.send_json' id='4614314640'&gt;
args = ({'id': 456, 'sender': 'manager', 'text': 'Test message', 'timestamp': '2025-01-15T10:30:00Z'},)
kwargs = {}
_call = call({'id': 456, 'sender': 'manager', 'text': 'Test message', 'timestamp': '2025-01-15T10:30:00Z'})
effect = Exception('Connection failed')

    async def _execute_mock_call(self, /, *args, **kwargs):
        # This is nearly just like super(), except for special handling
        # of coroutines
    
        _call = _Call((args, kwargs), two=True)
        self.await_count += 1
        self.await_args = _call
        self.await_args_list.append(_call)
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
&gt;               raise effect
E               Exception: Connection failed

/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:2321: Exception

During handling of the above exception, another exception occurred:

self = &lt;test_integration_realtime.TestErrorRecoveryIntegration object at 0x112f03b10&gt;

    @pytest.mark.asyncio
    async def test_websocket_connection_failure_recovery(self):
        """Test recovery from WebSocket connection failures"""
    
        from services.websocket_manager import push_dialog_message
    
        dialog_id = 123
    
        # Create failing and working WebSocket mocks
        failing_ws = AsyncMock()
        failing_ws.send_json.side_effect = Exception("Connection failed")
    
        working_ws = AsyncMock()
    
        ws_connections[dialog_id] = [failing_ws, working_ws]
    
        message = {
            "id": 456,
            "sender": "manager",
            "text": "Test message",
            "timestamp": "2025-01-15T10:30:00Z"
        }
    
        # Should not raise exception despite one failing connection
&gt;       await push_dialog_message(dialog_id, message)

tests/test_integration_realtime.py:432: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
services/websocket_manager.py:509: in push_dialog_message
    await _drop_socket(ws_connections, ws_meta, dialog_id, ws, reason="Send failed")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bucket = {123: [&lt;AsyncMock id='4614315312'&gt;, &lt;AsyncMock id='4614314304'&gt;]}
meta_bucket = {}, dialog_id = 123, ws = &lt;AsyncMock id='4614315312'&gt;, code = 1001
reason = 'Send failed'

    async def _drop_socket(bucket: Dict[int, Set[WebSocket]], meta_bucket: Dict[int, Dict[WebSocket, Dict[str, float]]], dialog_id: int, ws: WebSocket, code=WSCloseCodes.GOING_AWAY, reason="Connection dropped"):
        """Безопасно удаляет сокет из всех структур данных"""
        global _total_connections
    
        conns = bucket.get(dialog_id, set())
        if ws in conns:
&gt;           conns.discard(ws)
            ^^^^^^^^^^^^^
E           AttributeError: 'list' object has no attribute 'discard'

services/websocket_manager.py:236: AttributeError</failure></testcase><testcase classname="tests.test_integration_realtime.TestErrorRecoveryIntegration" name="test_message_delivery_with_no_connections" time="0.001" /><testcase classname="tests.test_integration_realtime.TestPerformanceIntegration" name="test_high_volume_message_delivery" time="0.017" /><testcase classname="tests.test_integration_realtime.TestPerformanceIntegration" name="test_concurrent_dialog_messaging" time="0.013" /></testsuite></testsuites>