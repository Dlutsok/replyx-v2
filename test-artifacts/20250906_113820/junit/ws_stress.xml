<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="10" time="0.696" timestamp="2025-09-06T11:38:26.954908+03:00" hostname="MacBook-Pro-Dan.local"><testcase classname="tests.test_websocket_stress.TestHighVolumeMessaging" name="test_1000_concurrent_messages" time="0.039" /><testcase classname="tests.test_websocket_stress.TestHighVolumeMessaging" name="test_mixed_success_failure_load" time="0.009" /><testcase classname="tests.test_websocket_stress.TestRateLimitingPerformance" name="test_rate_limit_performance_single_ip" time="0.123" /><testcase classname="tests.test_websocket_stress.TestRateLimitingPerformance" name="test_rate_limit_performance_many_ips" time="0.005" /><testcase classname="tests.test_websocket_stress.TestRateLimitingPerformance" name="test_rate_limit_memory_usage" time="0.028" /><testcase classname="tests.test_websocket_stress.TestConcurrentConnections" name="test_high_concurrency_different_dialogs" time="0.034" /><testcase classname="tests.test_websocket_stress.TestConcurrentConnections" name="test_connection_scaling_limits" time="0.001" /><testcase classname="tests.test_websocket_stress.TestMemoryLeakProtection" name="test_connection_cleanup_memory" time="0.010" /><testcase classname="tests.test_websocket_stress.TestMemoryLeakProtection" name="test_rate_limit_cleanup_memory" time="0.001"><failure message="assert 1100 &lt; (1000 + 100)">self = &lt;test_websocket_stress.TestMemoryLeakProtection object at 0x107c92350&gt;

    def test_rate_limit_cleanup_memory(self):
        """Тест очистки памяти в rate limiting"""
        num_ips = 1000
    
        # Заполняем старые записи
        old_time = time.time() - 3600  # 1 час назад
    
        for i in range(num_ips):
            ip = f"172.16.{i//256}.{i%256}"
            _ws_rate_limits[ip] = [old_time] * 50
    
        initial_size = len(_ws_rate_limits)
    
        # Новая проверка должна очистить старые записи
        for i in range(100):
            ip = f"10.0.{i//256}.{i%256}"
            _check_rate_limit(ip)
    
        # Старые записи должны быть очищены во время проверки
        final_size = len(_ws_rate_limits)
    
        print(f"Rate limit записей: было {initial_size}, стало {final_size}")
    
        # Размер должен уменьшиться (старые записи очищаются)
&gt;       assert final_size &lt; initial_size + 100  # Разрешаем небольшой рост от новых записей
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       assert 1100 &lt; (1000 + 100)

tests/test_websocket_stress.py:337: AssertionError</failure></testcase><testcase classname="tests.test_websocket_stress.TestMessageQueuePerformance" name="test_high_volume_ack_processing" time="0.005" /></testsuite></testsuites>