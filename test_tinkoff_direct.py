#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
T-Bank (Tinkoff) Cashier Healthcheck ‚Äî ¬´–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω–∞—è¬ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—Å—Å—ã

–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–∑ —Ç–≤–æ–µ–≥–æ –õ–ö):
  TerminalKey: 1757348842151DEMO
  SecretKey:   lczutIQhGoZoZrgW
–û–∫—Ä—É–∂–µ–Ω–∏–µ: Sandbox (DEMO): https://rest-api-test.tinkoff.ru/v2

Exit codes:
  0  ‚Äî OK (Init —É—Å–ø–µ—à–µ–Ω)
  10 ‚Äî –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥-–æ—à–∏–±–∫–∞ (–Ω–µ—Ç requests –∏ —Ç.–ø.)
  20 ‚Äî —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–µ—Ç (403, –≤–µ—Ä–æ—è—Ç–Ω–æ IP –Ω–µ –≤ whitelist DEMO)
  30 ‚Äî 501 ¬´–¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω¬ª (–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω/–Ω–µ —Ç–æ—Ç –∫–ª—é—á/–∑–∞–ª–∏–ø —É –±–∞–Ω–∫–∞)
  40 ‚Äî 204 ¬´–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω¬ª (SecretKey/–∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏)
  50 ‚Äî –ø—Ä–æ—á–∞—è –æ—à–∏–±–∫–∞ API (Success=false, –¥—Ä—É–≥–æ–π –∫–æ–¥)
  60 ‚Äî –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP/–∏—Å–∫–ª—é—á–µ–Ω–∏–µ/–Ω–µ-JSON
"""

import sys, os, re, json, uuid, socket, hashlib
from datetime import datetime, timezone

# ---- –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
try:
    import requests
except Exception:
    print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞–∫–µ—Ç 'requests' (pip install requests)", file=sys.stderr)
    sys.exit(10)

import urllib.request

# ==== –ñ–Å–°–¢–ö–û –ü–û–î–°–¢–ê–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –ö–ê–°–°–´ (–∏–∑ —Ç–≤–æ–µ–≥–æ –õ–ö) ====
TERMINAL_KEY_RAW = "1757348842151DEMO"
SECRET_KEY_RAW   = "lczutIQhGoZoZrgW"
BASE_URL         = "https://rest-api-test.tinkoff.ru/v2"  # DEMO
# ==========================================================

def sanitize(s: str) -> str:
    # —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –≤ —Ç.—á. –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã
    return re.sub(r"\s+", "", s or "").strip()

def dump_hex(label: str, s: str):
    print(f"{label}: {repr(s)} len={len(s)}")
    try:
        print("hex:", " ".join(f"{ord(c):02x}" for c in s))
    except Exception:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–∏—Ç bytes
        print("hex-bytes:", " ".join(f"{b:02x}" for b in s.encode("utf-8", "ignore")))

def outbound_ip() -> str:
    try:
        return urllib.request.urlopen("https://api.ipify.org", timeout=5).read().decode()
    except Exception:
        return "unknown"

def boolstr(v):
    return 'true' if isinstance(v, bool) and v else ('false' if isinstance(v, bool) else str(v))

def calc_token(payload: dict, secret: str) -> str:
    # 1) –∏—Å–∫–ª—é—á–∞–µ–º Token –∏ –ø—É—Å—Ç—ã–µ/None
    items = [(k, v) for k, v in payload.items() if k != 'Token' and v is not None and str(v).strip() != '']
    # 2) –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç –∫–∞–∫ –ø–æ–ª–µ Password
    items.append(('Password', secret))
    # 3) —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∫–ª—é—á–∞ (ASCII)
    items.sort(key=lambda kv: kv[0])
    # 4) —Å–∫–ª–µ–π–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π (bool ‚Üí true/false)
    concatenated = ''.join(boolstr(v) for _, v in items)
    # 5) sha256 ‚Üí hex
    return hashlib.sha256(concatenated.encode('utf-8')).hexdigest()

class IPv4Adapter(requests.adapters.HTTPAdapter):
    """–§–æ—Ä—Å–∏—Ä—É–µ–º IPv4 ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –≤ DEMO, –∫–æ–≥–¥–∞ whitelist —É –±–∞–Ω–∫–∞ –ø–æ IPv4."""
    def init_poolmanager(self, *args, **kwargs):
        import urllib3.util.connection as conn
        orig = conn.allowed_gai_family
        conn.allowed_gai_family = lambda: socket.AF_INET
        try:
            super().init_poolmanager(*args, **kwargs)
        finally:
            conn.allowed_gai_family = orig

def minimal_init():
    # 0) –°–∞–Ω–∞—Ü–∏—è –∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –¥–∞–º–ø—ã –∫–ª—é—á–∞
    terminal_key = sanitize(TERMINAL_KEY_RAW)
    secret_key   = SECRET_KEY_RAW.strip()

    print("============================================================")
    print("üîë –ö–õ–Æ–ß–ò")
    print("============================================================")
    dump_hex("TerminalKey RAW", TERMINAL_KEY_RAW)
    dump_hex("TerminalKey SAN", terminal_key)
    print("endswith('DEMO'):", terminal_key.endswith("DEMO"))
    print(f"SecretKey len: {len(secret_key)} (–∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ)")
    print(f"Base URL: {BASE_URL}")
    print(f"üåê Outbound IP: {outbound_ip()}")

    if not terminal_key or not secret_key:
        print("‚ùå –ü—É—Å—Ç–æ–π TerminalKey/SecretKey ‚Äî –ø—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ", file=sys.stderr)
        return 10

    # 1) –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Init (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π)
    order_id = f"diag_{int(datetime.now(timezone.utc).timestamp())}_{uuid.uuid4().hex[:8]}"
    amount_kop = 10000  # 100 ‚ÇΩ

    payload = {
        "TerminalKey": terminal_key,
        "Amount": amount_kop,
        "OrderId": order_id,
        "Description": "health",
    }
    token = calc_token(payload, secret_key)
    payload["Token"] = token

    print("\n============================================================")
    print("üß™ MINIMAL INIT")
    print("============================================================")
    print(f"OrderId: {order_id}")
    print(f"Amount:  {amount_kop} –∫–æ–ø. ({amount_kop/100:.2f} ‚ÇΩ)")
    print(f"Token:   {token}")
    url = f"{BASE_URL}/Init"
    print(f"POST {url}")

    # 2) HTTP c IPv4 –∏ —è–≤–Ω—ã–º UA
    sess = requests.Session()
    sess.headers.update({
        "Content-Type": "application/json",
        "User-Agent": "ReplyX-Healthcheck/1.0"
    })
    try:
        sess.mount("https://", IPv4Adapter())
    except Exception:
        pass

    try:
        r = sess.post(url, json=payload, timeout=20)
    except requests.exceptions.Timeout:
        print("‚è∞ TIMEOUT ‚Äî –±–∞–Ω–∫ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
        return 60
    except requests.exceptions.ConnectionError as e:
        print(f"üîå Connection error: {e}")
        return 60
    except Exception as e:
        print(f"üí• Unexpected error: {e}")
        return 60
    finally:
        sess.close()

    print(f"HTTP {r.status_code}")
    body = r.text or ""
    if r.status_code == 403:
        print("‚ùå 403 Forbidden ‚Äî –ø–µ—Ä–∏–º–µ—Ç—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å.")
        print("   DEMO –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç whitelist –∏—Å—Ö–æ–¥—è—â–µ–≥–æ IP. –î–æ–±–∞–≤—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π IP —É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.")
        return 20

    if r.status_code != 200:
        print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å. –§—Ä–∞–≥–º–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∏–∂–µ:")
        print(body[:1000])
        return 60

    # 3) –†–∞–∑–±–æ—Ä JSON –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫
    try:
        resp = r.json()
    except Exception:
        print("‚ùå –ù–µ JSON –≤ –æ—Ç–≤–µ—Ç–µ. –§—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–ª–∞ –Ω–∏–∂–µ:")
        print(body[:1000])
        return 60

    print("–û—Ç–≤–µ—Ç JSON:")
    print(json.dumps(resp, ensure_ascii=False, indent=2))

    if resp.get("Success") is True and "PaymentURL" in resp:
        print("\n‚úÖ OK: Init —É—Å–ø–µ—à–µ–Ω, –∫–∞—Å—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç. PaymentURL:", resp.get("PaymentURL"))
        return 0

    # –£—Ç–æ—á–Ω—è–µ–º —Ç–∏–ø–∏—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
    code = str(resp.get("ErrorCode", "")).strip()
    details = (resp.get("Details") or "").strip()
    message = (resp.get("Message") or "").strip()

    if code == "501" or "–¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" in details:
        print("\n‚ùå 501: ¬´–¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω¬ª.")
        print("   –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤ –∑–∞–ø—Ä–æ—Å —É—Ö–æ–¥–∏—Ç —Ä–æ–≤–Ω–æ —ç—Ç–æ—Ç –∫–ª—é—á (–±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤) –∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ sandbox.")
        print("   –ï—Å–ª–∏ –∫–ª—é—á –≤–µ—Ä–Ω—ã–π –∏ –∞–∫—Ç–∏–≤–µ–Ω, —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç –ø—Ä–∏ ¬´–∑–∞–ª–∏–ø—à–µ–º¬ª —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —É –±–∞–Ω–∫–∞ ‚Äî –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É T-Bank.")
        return 30

    if code == "204" or "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω" in details:
        print("\n‚ùå 204: ¬´–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω¬ª.")
        print("   –ü—Ä–æ–≤–µ—Ä—å SecretKey –∏ –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏ (Password –∫–∞–∫ –ø–æ–ª–µ, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á—É, sha256 hex).")
        return 40

    print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ API: code={code or '‚Äî'} message={message or '‚Äî'} details={details or '‚Äî'}")
    return 50

def main():
    rc = minimal_init()
    print("\n============================================================")
    print("üìä –ò–¢–û–ì")
    print("============================================================")
    if   rc == 0:  print("‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ: –∫–∞—Å—Å–∞ –æ—Ç–≤–µ—á–∞–µ—Ç, Init —É—Å–ø–µ—à–µ–Ω.")
    elif rc == 20: print("üö´ –°–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–µ—Ç (403). –í–µ—Ä–æ—è—Ç–Ω–æ, IP –Ω–µ –≤ whitelist DEMO.")
    elif rc == 30: print("üß≠ 501 ¬´–¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω¬ª. –ü—Ä–æ–≤–µ—Ä—å –∫–ª—é—á/–∞–∫—Ç–∏–≤–∞—Ü–∏—é/–Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    elif rc == 40: print("üîê 204 ¬´–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω¬ª. –ü—Ä–æ–≤–µ—Ä—å SecretKey/–∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏.")
    elif rc == 50: print("‚ö†Ô∏è –û—à–∏–±–∫–∞ API. –°–º–æ—Ç—Ä–∏ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ.")
    else:          print("‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –°–º–æ—Ç—Ä–∏ –ª–æ–≥ –≤—ã—à–µ.")
    sys.exit(rc)

if __name__ == "__main__":
    main()