#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Tinkoff API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL –¥–ª—è DEMO —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
–°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª —Å DEMO –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –±–æ–µ–≤—É—é —Å—Ä–µ–¥—É!
"""

import hashlib
import requests
import json
from datetime import datetime
import uuid

# –í–ê–ñ–ù–û: –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Å DEMO –∏—Å–ø–æ–ª—å–∑—É–µ–º –ë–û–ï–í–û–ô URL!
TERMINAL_KEY = "1757348842151DEMO"
SECRET_KEY = "lczutIQhGoZoZrgW"
PRODUCTION_URL = "https://securepay.tinkoff.ru/v2/"  # –ë–æ–µ–≤–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è DEMO —Ç–µ—Ä–º–∏–Ω–∞–ª–∞!
TEST_URL = "https://rest-api-test.tinkoff.ru/v2/"    # –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è –±–æ–µ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤

def calculate_signature(data: dict) -> str:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –∫–∞–∫ –≤ –∫–æ–¥–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    items = [(k, v) for k, v in data.items() 
             if k not in ['token', 'Token'] and v is not None and str(v).strip() != '']
    
    items.append(('Password', SECRET_KEY))
    items.sort(key=lambda kv: kv[0])
    
    normalized_values = []
    for _, v in items:
        if isinstance(v, bool):
            normalized_values.append('true' if v else 'false')
        else:
            normalized_values.append(str(v))
    
    concatenated_string = ''.join(normalized_values)
    return hashlib.sha256(concatenated_string.encode('utf-8')).hexdigest()

def test_api_url(api_url, url_name):
    """–¢–µ—Å—Ç API —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º URL"""
    print(f"\nüß™ –¢–ï–°–¢ {url_name}")
    print(f"üìç URL: {api_url}")
    print("=" * 60)
    
    order_id = f"test_{int(datetime.utcnow().timestamp())}"
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    data = {
        'TerminalKey': TERMINAL_KEY,
        'Amount': 50000,  # 500 —Ä—É–±–ª–µ–π –∫–∞–∫ –≤ –ª–æ–≥–∞—Ö
        'OrderId': order_id,
        'Description': f'–¢–µ—Å—Ç {url_name}',
        'CustomerKey': '6',
        'SuccessURL': 'http://localhost:3000/payment/success?order=' + order_id,
        'FailURL': 'http://localhost:3000/payment/error?order=' + order_id,
        'Language': 'ru',
        'PayType': 'O'
    }
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
    token = calculate_signature(data.copy())
    data['Token'] = token
    
    print(f"üîê –ü–æ–¥–ø–∏—Å—å: {token}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    try:
        print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        response = requests.post(
            f"{api_url}Init",
            json=data,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        print(f"üìä HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.headers.get('content-type', '').startswith('application/json'):
            result = response.json()
            print(f"üìÑ –û—Ç–≤–µ—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")
            
            if result.get('Success'):
                print(f"‚úÖ –£–°–ü–ï–• –¥–ª—è {url_name}!")
                return True
            else:
                error_code = result.get('ErrorCode', 'UNKNOWN')
                message = result.get('Message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                details = result.get('Details', '')
                
                print(f"‚ùå –û–®–ò–ë–ö–ê –¥–ª—è {url_name}:")
                print(f"   –ö–æ–¥: {error_code}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                print(f"   –î–µ—Ç–∞–ª–∏: {details}")
                return False
        else:
            print(f"‚ùå –ù–µ-JSON –æ—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è {url_name}: {e}")
        return False

def main():
    print("üöÄ –¢–ï–°–¢ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û URL –î–õ–Ø DEMO –¢–ï–†–ú–ò–ù–ê–õ–ê")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîë Terminal: {TERMINAL_KEY}")
    print()
    
    print("üìö –°–û–ì–õ–ê–°–ù–û –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò TINKOFF:")
    print("   - –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª (—Å DEMO) ‚Üí –ë–û–ï–í–ê–Ø —Å—Ä–µ–¥–∞ (securepay.tinkoff.ru)")
    print("   - –ë–æ–µ–≤–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª ‚Üí –¢–ï–°–¢–û–í–ê–Ø —Å—Ä–µ–¥–∞ (rest-api-test.tinkoff.ru)")
    print()
    
    # –¢–µ—Å—Ç 1: –¢–µ–∫—É—â–∏–π URL (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π?)
    test1_success = test_api_url(TEST_URL, "–¢–ï–°–¢–û–í–ê–Ø –°–†–ï–î–ê (rest-api-test)")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    test2_success = test_api_url(PRODUCTION_URL, "–ë–û–ï–í–ê–Ø –°–†–ï–î–ê (securepay) - –ü–†–ê–í–ò–õ–¨–ù–û!")
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    print(f"–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ (rest-api-test):  {'‚úÖ' if test1_success else '‚ùå'}")
    print(f"–ë–æ–µ–≤–∞—è —Å—Ä–µ–¥–∞ (securepay):        {'‚úÖ' if test2_success else '‚ùå'}")
    
    if test2_success and not test1_success:
        print(f"\nüéâ –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê!")
        print(f"üí° –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Å DEMO –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–û–ï–í–û–ô URL:")
        print(f"   https://securepay.tinkoff.ru/v2/")
        print(f"   –í–º–µ—Å—Ç–æ: https://rest-api-test.tinkoff.ru/v2/")
        print(f"\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í –ö–û–î–ï:")
        print(f"   TINKOFF_SANDBOX_API_URL = 'https://securepay.tinkoff.ru/v2/'")
    elif test1_success:
        print(f"\n‚úÖ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print(f"\n‚ùå –û–±–∞ URL –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç - –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Tinkoff")

if __name__ == "__main__":
    main()
