#!/usr/bin/env python3
"""
–¢–µ—Å—Ç T-Bank API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP-–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
"""

import requests
import hashlib
import json
from datetime import datetime
import uuid

# –î–∞–Ω–Ω—ã–µ –∏–∑ .env
TERMINAL_KEY = "1757348842151DEMO"
SECRET_KEY = "lczutIQhGoZoZrgW"
SANDBOX_URL = "https://rest-api-test.tinkoff.ru/v2/"

# –ü—Ä–æ–∫—Å–∏ –∏–∑ OpenAI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
PROXY_URL = "http://GunetAyL:a7SdSv3i@154.196.24.180:63872"

def calculate_signature(data: dict) -> str:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è T-Bank API"""
    items = [(k, v) for k, v in data.items() 
             if k not in ['Token'] and v is not None and str(v).strip() != '']
    items.append(('Password', SECRET_KEY))
    items.sort(key=lambda kv: kv[0])
    
    normalized_values = []
    for _, v in items:
        if isinstance(v, bool):
            normalized_values.append('true' if v else 'false')
        else:
            normalized_values.append(str(v))
    
    concatenated_string = ''.join(normalized_values)
    return hashlib.sha256(concatenated_string.encode('utf-8')).hexdigest()

def test_with_proxy():
    """–¢–µ—Å—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    print("üåê –¢–ï–°–¢ T-BANK API –ß–ï–†–ï–ó –ü–†–û–ö–°–ò")
    print("=" * 50)
    
    order_id = f"proxy_test_{int(datetime.utcnow().timestamp())}_{str(uuid.uuid4())[:8]}"
    
    data = {
        'TerminalKey': TERMINAL_KEY,
        'OrderId': order_id,
        'Amount': 5000,  # 50 —Ä—É–±–ª–µ–π
        'Description': 'Proxy test payment',
        'CustomerKey': 'proxy_test_123',
        'SuccessURL': 'https://example.com/success',
        'FailURL': 'https://example.com/fail',
        'Language': 'ru',
        'PayType': 'O'
    }
    
    token = calculate_signature(data)
    data['Token'] = token
    
    proxies = {
        'http': PROXY_URL,
        'https': PROXY_URL
    }
    
    print(f"üîó –ü—Ä–æ–∫—Å–∏: {PROXY_URL.split('@')[0]}@***")
    print(f"üìã OrderId: {order_id}")
    
    try:
        response = requests.post(
            f"{SANDBOX_URL}Init",
            json=data,
            headers={
                'Content-Type': 'application/json',
                'User-Agent': 'ReplyX-ProxyTest/1.0'
            },
            proxies=proxies,
            timeout=30
        )
        
        print(f"üì® –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:")
        print(f"   HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ JSON –æ—Ç–≤–µ—Ç:")
            print(json.dumps(result, indent=2, ensure_ascii=False))
            return result.get('Success', False)
        else:
            print(f"‚ùå HTTP –û–®–ò–ë–ö–ê: {response.status_code}")
            print(f"   –¢–µ–∫—Å—Ç: {response.text[:200]}...")
            return False
            
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê: {e}")
        return False

def test_direct_vs_proxy():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    print(f"üöÄ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    print("1Ô∏è‚É£ –ü–†–Ø–ú–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï:")
    direct_works = False
    try:
        response = requests.get(SANDBOX_URL, timeout=10)
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {response.status_code}")
        direct_works = response.status_code != 403
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")
    
    print()
    
    # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    print("2Ô∏è‚É£ –ß–ï–†–ï–ó –ü–†–û–ö–°–ò:")
    proxy_works = test_with_proxy()
    
    print()
    print("=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if direct_works else '‚ùå'}")
    print(f"–ß–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {'‚úÖ' if proxy_works else '‚ùå'}")
    
    if not direct_works and not proxy_works:
        print("\nüö® –ü–†–û–ë–õ–ï–ú–ê: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–∂–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏")
        print("üí° –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º, –∞ –Ω–µ —Å IP")
    elif not direct_works and proxy_works:
        print("\n‚ö†Ô∏è IP-–ë–õ–û–ö–ò–†–û–í–ö–ê: –í–∞—à IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω T-Bank")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
    elif direct_works:
        print("\nü§î IP –ù–ï –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù: –ü—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º")

if __name__ == "__main__":
    test_direct_vs_proxy()