#!/usr/bin/env python3
"""
–¢–µ—Å—Ç webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Tinkoff
"""
import requests
import json
import hashlib

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
TINKOFF_SECRET_KEY = "lczutIQhGoZoZrgW"  # –ò–∑ .env —Ñ–∞–π–ª–∞
TUNNEL_URL = "https://huge-terms-sell.loca.lt"  # –¢–µ–∫—É—â–∏–π —Ç—É–Ω–Ω–µ–ª—å

def calculate_signature(data: dict) -> str:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è webhook –∫–∞–∫ –≤ backend –∫–æ–¥–µ"""
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ –ø–æ–¥–ø–∏—Å–∏, –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ None
    filtered_data = {k: v for k, v in data.items() 
                    if k not in ['token', 'Token'] and v is not None and str(v).strip() != ''}
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∫–∞–∫ Password
    filtered_data['Password'] = TINKOFF_SECRET_KEY
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
    sorted_keys = sorted(filtered_data.keys())
    concatenated_values = [str(filtered_data[key]) for key in sorted_keys]
    concatenated_string = ''.join(concatenated_values)
    
    # –í—ã—á–∏—Å–ª—è–µ–º SHA256 —Ö—ç—à
    return hashlib.sha256(concatenated_string.encode('utf-8')).hexdigest()

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ webhook (–∏–º–∏—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ)
webhook_data = {
    "TerminalKey": "1757348842151DEMO",
    "OrderId": "test_order_123",
    "Success": "true",
    "Status": "CONFIRMED",
    "PaymentId": "123456789",
    "ErrorCode": "0",
    "Amount": "10000",  # 100 —Ä—É–± –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    "Pan": "430000******0777",
}

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
webhook_data["Token"] = calculate_signature(webhook_data)

print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint...")
print(f"üì° –¢—É–Ω–Ω–µ–ª—å URL: {TUNNEL_URL}")
print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ webhook:")
print(json.dumps({k: v for k, v in webhook_data.items() if k != "Token"}, indent=2, ensure_ascii=False))
print(f"üîê –ü–æ–¥–ø–∏—Å—å: {webhook_data['Token'][:16]}...")
print()

# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç—É–Ω–Ω–µ–ª—è
health_url = f"{TUNNEL_URL}/health"
print(f"üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ç—É–Ω–Ω–µ–ª—è: {health_url}")
try:
    health_response = requests.get(health_url, timeout=10)
    print(f"‚úÖ –¢—É–Ω–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {health_response.status_code})")
    if health_response.status_code == 200:
        print(f"üìä –û—Ç–≤–µ—Ç: {health_response.json()['status']}")
except Exception as e:
    print(f"‚ùå –¢—É–Ω–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    print("‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å webhook –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ localhost...")

print()

# –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook endpoint
webhook_url = f"{TUNNEL_URL}/api/payments/tinkoff-notification"
print(f"üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook: {webhook_url}")

try:
    response = requests.post(webhook_url, json=webhook_data, timeout=30)
    print(f"üì§ –û—Ç–≤–µ—Ç webhook endpoint (—Å—Ç–∞—Ç—É—Å {response.status_code}):")
    
    if response.headers.get('content-type', '').startswith('application/json'):
        print(json.dumps(response.json(), indent=2, ensure_ascii=False))
    else:
        print(response.text)
        
except requests.exceptions.RequestException as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ webhook –∑–∞–ø—Ä–æ—Å–∞: {e}")
    print("üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ localhost...")
    
    # Fallback –Ω–∞ localhost
    localhost_webhook_url = "http://localhost:8000/api/payments/tinkoff-notification"
    try:
        response = requests.post(localhost_webhook_url, json=webhook_data, timeout=30)
        print(f"üì§ –û—Ç–≤–µ—Ç localhost webhook (—Å—Ç–∞—Ç—É—Å {response.status_code}):")
        
        if response.headers.get('content-type', '').startswith('application/json'):
            print(json.dumps(response.json(), indent=2, ensure_ascii=False))
        else:
            print(response.text)
    except Exception as e2:
        print(f"‚ùå –û—à–∏–±–∫–∞ localhost –∑–∞–ø—Ä–æ—Å–∞: {e2}")