#!/usr/bin/env python3
"""
–¢–µ—Å—Ç webhook'–∞ Tinkoff –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import requests
import hashlib
import json

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook'–∞
WEBHOOK_URL = "http://localhost:8000/api/payments/tinkoff-notification"
SECRET_KEY = "lczutIQhGoZoZrgW"

def calculate_webhook_signature(data: dict) -> str:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è webhook –∫–∞–∫ –≤ –∫–æ–¥–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    items = [(k, v) for k, v in data.items() 
             if k not in ['token', 'Token'] and v is not None and str(v).strip() != '']
    
    items.append(('Password', SECRET_KEY))
    items.sort(key=lambda kv: kv[0])
    
    normalized_values = []
    for _, v in items:
        if isinstance(v, bool):
            normalized_values.append('true' if v else 'false')
        else:
            normalized_values.append(str(v))
    
    concatenated_string = ''.join(normalized_values)
    return hashlib.sha256(concatenated_string.encode('utf-8')).hexdigest()

def test_successful_webhook():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ webhook'–∞"""
    print("üß™ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û–ì–û WEBHOOK'–ê")
    print("=" * 50)
    
    # –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–∫–∞–∫ –æ—Ç Tinkoff)
    webhook_data = {
        'TerminalKey': '1757348842151DEMO',
        'OrderId': 'replyx_1757561452_77961632',  # –ò–∑ –≤–∞—à–∏—Ö –ª–æ–≥–æ–≤
        'Success': True,
        'Status': 'CONFIRMED',
        'PaymentId': '123456789',
        'ErrorCode': '0',
        'Amount': 9500,  # 95 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        'CardId': 'test_card_id',
        'Pan': '220138******0039',
        'ExpDate': '1225'
    }
    
    print(f"üìã –î–∞–Ω–Ω—ã–µ webhook:")
    for k, v in webhook_data.items():
        print(f"   {k}: {v}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
    token = calculate_webhook_signature(webhook_data.copy())
    webhook_data['Token'] = token
    
    print(f"\nüîê –ü–æ–¥–ø–∏—Å—å: {token}")
    print(f"\nüì° –û—Ç–ø—Ä–∞–≤–∫–∞ webhook...")
    
    try:
        response = requests.post(
            WEBHOOK_URL,
            json=webhook_data,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        print(f"üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
        print(f"   HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.headers.get('content-type', '').startswith('application/json'):
            result = response.json()
            print(f"   JSON: {json.dumps(result, ensure_ascii=False, indent=2)}")
        else:
            print(f"   –¢–µ–∫—Å—Ç: {response.text}")
            
        if response.status_code == 200:
            print(f"\n‚úÖ WEBHOOK –û–ë–†–ê–ë–û–¢–ê–ù –£–°–ü–ï–®–ù–û!")
            print(f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WEBHOOK TINKOFF")
    print(f"üéØ URL: {WEBHOOK_URL}")
    print()
    
    test_successful_webhook()
    
    print(f"\nüí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
    print(f"1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
    print(f"2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞")
    print(f"3. –ï—Å–ª–∏ webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ, –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –ø–æ–ø–æ–ª–Ω–∏—Ç—å—Å—è")

if __name__ == "__main__":
    main()

