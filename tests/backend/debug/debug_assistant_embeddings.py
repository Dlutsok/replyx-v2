#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å embeddings –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '../../..', 'backend'))

from database.connection import SessionLocal
from database import models
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def diagnose_assistant_embeddings():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∏–≤—è–∑–∫–æ–π embeddings –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º"""
    db = SessionLocal()

    try:
        USER_ID = 6  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–≥–æ–≤
        ASSISTANT_ID = 15  # ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ –ª–æ–≥–æ–≤ (–Ω–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)

        logger.info(f"üî¨ [ASSISTANT_EMBEDDINGS] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {ASSISTANT_ID} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {USER_ID}")

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant = db.query(models.Assistant).filter(
            models.Assistant.id == ASSISTANT_ID,
            models.Assistant.user_id == USER_ID
        ).first()

        if assistant:
            logger.info(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: '{assistant.name}', active={assistant.is_active}")
            logger.info(f"   knowledge_version={assistant.knowledge_version}")
            logger.info(f"   created_at={assistant.created_at}")
        else:
            logger.error(f"‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {ASSISTANT_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ embeddings –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_embeddings = db.query(models.KnowledgeEmbedding).filter(
            models.KnowledgeEmbedding.user_id == USER_ID
        ).all()

        logger.info(f"üìä –í—Å–µ–≥–æ embeddings –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(all_embeddings)}")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ assistant_id
        by_assistant = {}
        for emb in all_embeddings:
            aid = emb.assistant_id
            if aid not in by_assistant:
                by_assistant[aid] = []
            by_assistant[aid].append(emb)

        for assistant_id, embeddings in by_assistant.items():
            count = len(embeddings)
            if assistant_id is None:
                logger.info(f"   assistant_id=NULL: {count} embeddings")
            else:
                logger.info(f"   assistant_id={assistant_id}: {count} embeddings")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º UserKnowledge –∑–∞–ø–∏—Å–∏
        user_knowledge = db.query(models.UserKnowledge).filter(
            models.UserKnowledge.user_id == USER_ID,
            models.UserKnowledge.assistant_id == ASSISTANT_ID
        ).all()

        logger.info(f"üß† UserKnowledge –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {ASSISTANT_ID}: {len(user_knowledge)}")
        for uk in user_knowledge:
            logger.info(f"   - {uk.doc_type}: {uk.content[:50]}...")

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        recent_docs = db.query(models.Document).filter(
            models.Document.user_id == USER_ID
        ).order_by(models.Document.upload_date.desc()).limit(5).all()

        logger.info(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        for doc in recent_docs:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º embeddings –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_embeddings = db.query(models.KnowledgeEmbedding).filter(
                models.KnowledgeEmbedding.doc_id == doc.id
            ).all()

            logger.info(f"   Doc {doc.id}: {doc.filename}")
            logger.info(f"     Embeddings: {len(doc_embeddings)}")

            if doc_embeddings:
                assistant_ids = list(set(emb.assistant_id for emb in doc_embeddings))
                logger.info(f"     Assistant IDs: {assistant_ids}")

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        logger.info(f"\nüîç –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:")
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—á–µ–º—É embeddings –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É {ASSISTANT_ID}")

        # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
        assistant_docs = db.query(models.Document).filter(
            models.Document.user_id == USER_ID,
            # –î–æ–±–∞–≤–∏–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        ).all()

        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
        for doc in assistant_docs:
            doc_embeddings = db.query(models.KnowledgeEmbedding).filter(
                models.KnowledgeEmbedding.doc_id == doc.id
            ).count()

            assistant_embeddings = db.query(models.KnowledgeEmbedding).filter(
                models.KnowledgeEmbedding.doc_id == doc.id,
                models.KnowledgeEmbedding.assistant_id == ASSISTANT_ID
            ).count()

            if doc_embeddings > 0 and assistant_embeddings == 0:
                logger.warning(f"   ‚ö†Ô∏è Doc {doc.id} ({doc.filename}): {doc_embeddings} embeddings, –Ω–æ 0 –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {ASSISTANT_ID}")

    finally:
        db.close()

if __name__ == "__main__":
    diagnose_assistant_embeddings()