#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ embeddings –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ 15
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '../../..', 'backend'))

from database.connection import SessionLocal
from database import models
from services.embeddings_service import embeddings_service
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_embeddings_search_assistant_15():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ embeddings –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ 15"""
    db = SessionLocal()

    try:
        USER_ID = 6
        ASSISTANT_ID = 15
        TEST_QUERY = "–∫–æ–º–ø–∞–Ω–∏—è"  # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∑–Ω–∞–Ω–∏–π

        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {ASSISTANT_ID}")

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º embeddings –≤ –±–∞–∑–µ
        assistant_embeddings = db.query(models.KnowledgeEmbedding).filter(
            models.KnowledgeEmbedding.user_id == USER_ID,
            models.KnowledgeEmbedding.assistant_id == ASSISTANT_ID
        ).all()

        logger.info(f"üìä Embeddings –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {ASSISTANT_ID}: {len(assistant_embeddings)}")
        for emb in assistant_embeddings:
            logger.info(f"   - ID {emb.id}: {emb.chunk_text[:50]}...")

        # 2. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ (–µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å embeddings —Ä–∞–±–æ—Ç–∞–µ—Ç)
        try:
            relevant_chunks = embeddings_service.search_relevant_chunks(
                query=TEST_QUERY,
                user_id=USER_ID,
                assistant_id=ASSISTANT_ID,
                top_k=5,
                min_similarity=0.1,
                include_qa=True,
                qa_limit=2,
                db=db
            )

            logger.info(f"‚úÖ –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(relevant_chunks)} chunks")
            for i, chunk in enumerate(relevant_chunks):
                logger.info(f"   {i+1}. Similarity: {chunk.get('similarity', 'N/A'):.3f}")
                logger.info(f"      Text: {chunk.get('text', '')[:100]}...")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–∏—Å–∫ embeddings –Ω–µ —É–¥–∞–ª—Å—è: {e}")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º system prompt –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant = db.query(models.Assistant).filter(
            models.Assistant.id == ASSISTANT_ID
        ).first()

        if assistant:
            logger.info(f"ü§ñ System prompt –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:")
            logger.info(f"   {assistant.system_prompt[:200]}...")

    finally:
        db.close()

if __name__ == "__main__":
    test_embeddings_search_assistant_15()