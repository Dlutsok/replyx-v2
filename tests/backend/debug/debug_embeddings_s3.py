#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å embeddings –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ S3
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '../../..', 'backend'))

from database.connection import SessionLocal
from database import models
from services.embeddings_service import embeddings_service
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def diagnose_embeddings_issue():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å embeddings"""
    db = SessionLocal()

    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
        USER_ID = 6  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–≥–æ–≤
        ASSISTANT_ID = 3  # ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ –ª–æ–≥–æ–≤
        TEST_QUERY = "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"  # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å

        logger.info(f"üî¨ [DIAGNOSIS] Starting diagnosis for user_id={USER_ID}, assistant_id={ASSISTANT_ID}")

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ embeddings –≤ –±–∞–∑–µ
        total_embeddings = db.query(models.KnowledgeEmbedding).filter(
            models.KnowledgeEmbedding.user_id == USER_ID
        ).count()

        doc_embeddings = db.query(models.KnowledgeEmbedding).filter(
            models.KnowledgeEmbedding.user_id == USER_ID,
            models.KnowledgeEmbedding.qa_id.is_(None)
        ).count()

        qa_embeddings = db.query(models.KnowledgeEmbedding).filter(
            models.KnowledgeEmbedding.user_id == USER_ID,
            models.KnowledgeEmbedding.qa_id.isnot(None)
        ).count()

        assistant_embeddings = db.query(models.KnowledgeEmbedding).filter(
            models.KnowledgeEmbedding.user_id == USER_ID,
            models.KnowledgeEmbedding.assistant_id == ASSISTANT_ID
        ).count()

        logger.info(f"üìä Total embeddings: {total_embeddings}")
        logger.info(f"üìä Document embeddings: {doc_embeddings}")
        logger.info(f"üìä Q&A embeddings: {qa_embeddings}")
        logger.info(f"üìä Assistant {ASSISTANT_ID} embeddings: {assistant_embeddings}")

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        recent_docs = db.query(models.Document).filter(
            models.Document.user_id == USER_ID
        ).order_by(models.Document.upload_date.desc()).limit(5).all()

        logger.info(f"üìÑ Recent documents:")
        for doc in recent_docs:
            doc_embeddings_count = db.query(models.KnowledgeEmbedding).filter(
                models.KnowledgeEmbedding.doc_id == doc.id
            ).count()
            logger.info(f"  - Doc {doc.id}: {doc.filename} ({doc_embeddings_count} embeddings)")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Q&A –∑–∞–ø–∏—Å–∏
        qa_records = db.query(models.QAKnowledge).filter(
            models.QAKnowledge.user_id == USER_ID,
            models.QAKnowledge.is_active == True
        ).count()

        logger.info(f"‚ùì Active Q&A records: {qa_records}")

        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ embeddings
        logger.info(f"üîç Testing embeddings search with query: '{TEST_QUERY}'")

        try:
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å assistant_id
            chunks_with_assistant = embeddings_service.search_relevant_chunks(
                query=TEST_QUERY,
                user_id=USER_ID,
                assistant_id=ASSISTANT_ID,
                top_k=5,
                min_similarity=0.1,  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                db=db
            )

            logger.info(f"‚úÖ Search with assistant_id={ASSISTANT_ID}: {len(chunks_with_assistant)} chunks found")

            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –±–µ–∑ assistant_id
            chunks_without_assistant = embeddings_service.search_relevant_chunks(
                query=TEST_QUERY,
                user_id=USER_ID,
                assistant_id=None,
                top_k=5,
                min_similarity=0.1,
                db=db
            )

            logger.info(f"‚úÖ Search without assistant_id: {len(chunks_without_assistant)} chunks found")

            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å Q&A
            chunks_with_qa = embeddings_service.search_relevant_chunks(
                query=TEST_QUERY,
                user_id=USER_ID,
                assistant_id=ASSISTANT_ID,
                top_k=3,
                min_similarity=0.1,
                include_qa=True,
                qa_limit=2,
                db=db
            )

            logger.info(f"‚úÖ Search with Q&A included: {len(chunks_with_qa)} chunks found")

            # –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö chunks –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if chunks_with_assistant:
                logger.info("üîç Sample chunks found with assistant_id:")
                for i, chunk in enumerate(chunks_with_assistant[:2]):
                    logger.info(f"  {i+1}. Similarity: {chunk.get('similarity', 'N/A'):.3f}, Type: {chunk.get('doc_type', 'N/A')}")
                    logger.info(f"     Text: {chunk.get('text', '')[:100]}...")

        except Exception as e:
            logger.error(f"‚ùå Search test failed: {e}", exc_info=True)

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant = db.query(models.Assistant).filter(
            models.Assistant.id == ASSISTANT_ID,
            models.Assistant.user_id == USER_ID
        ).first()

        if assistant:
            logger.info(f"ü§ñ Assistant {ASSISTANT_ID}: knowledge_version={assistant.knowledge_version}")
        else:
            logger.warning(f"‚ùå Assistant {ASSISTANT_ID} not found!")

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ UserKnowledge
        user_knowledge = db.query(models.UserKnowledge).filter(
            models.UserKnowledge.user_id == USER_ID,
            models.UserKnowledge.assistant_id == ASSISTANT_ID
        ).count()

        logger.info(f"üß† UserKnowledge records for assistant {ASSISTANT_ID}: {user_knowledge}")

    finally:
        db.close()

if __name__ == "__main__":
    diagnose_embeddings_issue()