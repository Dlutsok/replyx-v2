#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Q&A —Å–∏—Å—Ç–µ–º—ã
"""
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.connection import get_db
from services.embeddings_service import EmbeddingsService

def final_integration_test():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã Q&A"""
    db = next(get_db())
    embeddings_service = EmbeddingsService()
    
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢")
    print("=" * 60)
    
    test_cases = [
        {
            "question": "–°–∫–æ–ª—å–∫–æ –≤–∞—Å –≤ –∫–æ–º–ø–∞–Ω–∏–∏?",
            "expected_answer": "1001",
            "description": "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ Q&A"
        },
        {
            "question": "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã?",
            "expected_answer": "—Å 10 –¥–æ 12", 
            "description": "–í—Ç–æ—Ä–æ–π Q&A"
        }
    ]
    
    user_id = 1
    assistant_id = 117
    
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistant_id}")
    print()
    
    for i, case in enumerate(test_cases, 1):
        question = case["question"]
        expected = case["expected_answer"]
        description = case["description"]
        
        print(f"üìù –¢–ï–°–¢ {i}: {description}")
        print(f"   –í–æ–ø—Ä–æ—Å: '{question}'")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç: '{expected}'")
        
        try:
            # –¢–µ—Å—Ç –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤–∏–¥–∂–µ—Ç–µ
            relevant_chunks = embeddings_service.search_relevant_chunks(
                query=question,
                user_id=user_id,
                assistant_id=assistant_id,
                top_k=5,
                min_similarity=0.5,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥
                include_qa=True,
                qa_limit=2,
                db=db
            )
            
            print(f"   –ù–∞–π–¥–µ–Ω–æ chunks: {len(relevant_chunks)}")
            
            qa_found = False
            for chunk in relevant_chunks:
                if chunk.get('type') == 'qa_knowledge' or chunk.get('doc_type') == 'qa_knowledge':
                    qa_found = True
                    text = chunk.get('text', '')
                    similarity = chunk.get('similarity', 0)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ Q&A —Ñ–æ—Ä–º–∞—Ç–∞ "Q: ... A: ..."
                    if 'A: ' in text:
                        answer = text.split('A: ', 1)[1].strip()
                        
                        if expected in answer or answer in expected:
                            print(f"   ‚úÖ –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç '{answer}' (—Å—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.4f})")
                            
                            # –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI
                            context_parts, tokens = embeddings_service.build_context_messages([chunk], 1000)
                            if context_parts and expected in context_parts[0]:
                                print(f"   ‚úÖ –ö–û–ù–¢–ï–ö–°–¢: Q&A –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ AI ({tokens} —Ç–æ–∫–µ–Ω–æ–≤)")
                            else:
                                print(f"   ‚ùå –ö–û–ù–¢–ï–ö–°–¢: Q&A –ù–ï –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ AI")
                        else:
                            print(f"   ‚ùå –ù–ï–í–ï–†–ù–´–ô –û–¢–í–ï–¢: '{answer}' –≤–º–µ—Å—Ç–æ '{expected}'")
                    break
            
            if not qa_found:
                print(f"   ‚ùå Q&A –ù–ï –ù–ê–ô–î–ï–ù–ê")
                
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        
        print()
    
    print("=" * 60)
    print("üéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
    print("‚úÖ Q&A —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ pgvector —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é/–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É —Ä–∞–±–æ—Ç–∞–µ—Ç")  
    print("‚úÖ Q&A –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI")
    print("‚úÖ –ü–æ–Ω–∏–∂–µ–Ω min_similarity –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞ Q&A")
    print()
    print("üöÄ –ì–û–¢–û–í–û –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê!")
    
    db.close()

if __name__ == "__main__":
    final_integration_test()