#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç Q&A –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≤ AI —á–∞—Ç–µ
"""
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.connection import get_db
from database.models import User, Assistant, QAKnowledge
from services.embeddings_service import EmbeddingsService
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_full_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω Q&A –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º AI —á–∞—Ç–µ"""
    db = next(get_db())
    embeddings_service = EmbeddingsService()
    
    try:
        print("=== –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û Q&A –ü–ê–ô–ü–õ–ê–ô–ù–ê ===")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
        test_user_id = 1
        test_assistant_id = 117
        test_questions = [
            "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã?",
            "–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", 
            "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã",
            "–ö–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–∏—Å?",
            "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã"
        ]
        
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user_id}, –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {test_assistant_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        user = db.query(User).filter(User.id == test_user_id).first()
        assistant = db.query(Assistant).filter(Assistant.id == test_assistant_id).first()
        
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if not assistant:
            print(f"‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {test_assistant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}")
        print(f"‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistant.name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Q&A –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        qa_records = db.query(QAKnowledge).filter(
            QAKnowledge.user_id == test_user_id,
            QAKnowledge.assistant_id == test_assistant_id,
            QAKnowledge.is_active == True
        ).all()
        
        print(f"‚úÖ Q&A –∑–∞–ø–∏—Å–µ–π –≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ: {len(qa_records)}")
        for qa in qa_records:
            print(f"   - {qa.question} -> {qa.answer}")
        
        print("\\n" + "="*60)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        for i, question in enumerate(test_questions, 1):
            print(f"\\n{i}. –¢–ï–°–¢: '{question}'")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º search_relevant_chunks —Å include_qa=True –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º AI —á–∞—Ç–µ
            results = embeddings_service.search_relevant_chunks(
                query=question,
                user_id=test_user_id,
                assistant_id=test_assistant_id,
                top_k=5,
                min_similarity=0.5,
                db=db,
                include_qa=True,
                qa_limit=3
            )
            
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Q&A —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            qa_results = [r for r in results if r.get('type') == 'qa']
            doc_results = [r for r in results if r.get('type') != 'qa']
            
            if qa_results:
                print(f"   ‚úÖ Q&A —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({len(qa_results)}):")
                for qa in qa_results:
                    similarity = qa.get('similarity', 0)
                    print(f"      ‚Ä¢ {qa.get('question', 'N/A')} -> {qa.get('answer', 'N/A')}")
                    print(f"        –°—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.4f}")
            else:
                print("   ‚ùå Q&A —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            if doc_results:
                print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(doc_results)}")
        
        print("\\n" + "="*60)
        print("\\n=== –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –æ—Å–Ω–æ–≤–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
        final_question = "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã?"
        final_results = embeddings_service.search_relevant_chunks(
            query=final_question,
            user_id=test_user_id,
            assistant_id=test_assistant_id,
            top_k=3,
            min_similarity=0.7,
            db=db,
            include_qa=True,
            qa_limit=2
        )
        
        qa_final = [r for r in final_results if r.get('type') == 'qa']
        
        if qa_final:
            best_qa = qa_final[0]
            print(f"‚úÖ AI –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å: '{best_qa.get('answer')}'")
            print(f"‚úÖ –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ Q&A: '{best_qa.get('question')}'")
            print(f"‚úÖ –°—Ö–æ–¥—Å—Ç–≤–æ: {best_qa.get('similarity', 0):.4f}")
            print("‚úÖ Q&A —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ùå Q&A —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –æ—Ç–≤–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    test_full_pipeline()