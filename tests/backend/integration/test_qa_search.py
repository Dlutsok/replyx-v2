#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ Q&A —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.connection import get_db
from database import models
from services.embeddings_service import embeddings_service
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_qa_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ Q&A —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    db = next(get_db())
    
    try:
        # –ù–∞–π–¥–µ–º –Ω–∞—à—É Q&A –∑–∞–ø–∏—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        qa_record = db.query(models.QAKnowledge).filter(
            models.QAKnowledge.question.ilike("%–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã%")
        ).first()
        
        if not qa_record:
            print("‚ùå Q&A –∑–∞–ø–∏—Å—å '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ Q&A –∑–∞–ø–∏—Å—å:")
        print(f"  ID: {qa_record.id}")
        print(f"  –í–æ–ø—Ä–æ—Å: {qa_record.question}")
        print(f"  –û—Ç–≤–µ—Ç: {qa_record.answer}")
        print(f"  –í–∞–∂–Ω–æ—Å—Ç—å: {qa_record.importance}")
        print(f"  User ID: {qa_record.user_id}")
        print(f"  Assistant ID: {qa_record.assistant_id}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã?",
            "–ö–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", 
            "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–æ?",
            "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã",
            "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã"
        ]
        
        similarity_thresholds = [0.3, 0.5, 0.7, 0.75]
        
        for query in test_queries:
            print(f"\nüîç –¢–ï–°–¢–ò–†–£–ï–ú –ó–ê–ü–†–û–°: '{query}'")
            
            for threshold in similarity_thresholds:
                print(f"\n  üìä Similarity threshold: {threshold}")
                
                # –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ Q&A –ø–æ–∏—Å–∫–∞
                qa_results = embeddings_service.search_relevant_qa(
                    query=query,
                    user_id=qa_record.user_id,
                    assistant_id=qa_record.assistant_id,
                    top_k=5,
                    min_similarity=threshold,
                    db=db
                )
                
                print(f"    Q&A —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(qa_results)}")
                for result in qa_results:
                    print(f"      - {result['question']} (similarity: {result['similarity']:.3f}, importance: {result['importance']})")
                
                # –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                combined_results = embeddings_service.search_relevant_chunks(
                    query=query,
                    user_id=qa_record.user_id,
                    assistant_id=qa_record.assistant_id,
                    top_k=5,
                    min_similarity=threshold,
                    include_qa=True,
                    qa_limit=5,
                    db=db
                )
                
                qa_in_combined = [r for r in combined_results if r.get('type') == 'qa_knowledge' or 'Q:' in r.get('text', '')]
                print(f"    –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ - –≤—Å–µ–≥–æ: {len(combined_results)}, Q&A: {len(qa_in_combined)}")
                
                for result in qa_in_combined:
                    print(f"      - Q&A: {result['text'][:50]}... (similarity: {result['similarity']:.3f})")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    test_qa_search()