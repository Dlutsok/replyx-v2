#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ Q&A
"""
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.connection import get_db
from database import models
from services.embeddings_service import embeddings_service
import logging

logging.basicConfig(level=logging.INFO)

def test_qa_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ Q&A"""
    db = next(get_db())
    
    try:
        # –ù–∞–π–¥–µ–º –≤—Å–µ Q&A –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
        qa_records = db.query(models.QAKnowledge).filter(
            models.QAKnowledge.user_id == 1,
            models.QAKnowledge.is_active == True
        ).all()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ Q&A –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1: {len(qa_records)}")
        for qa in qa_records:
            print(f"  ID: {qa.id}, –í–æ–ø—Ä–æ—Å: '{qa.question}', –í–∞–∂–Ω–æ—Å—Ç—å: {qa.importance}")
        
        if qa_records:
            qa_record = qa_records[0]
            
            # –¢–æ—á–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            query = "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã?"
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
            
            # –¢–µ—Å—Ç —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º
            qa_results = embeddings_service.search_relevant_qa(
                query=query,
                user_id=1,
                assistant_id=117,
                top_k=5,
                min_similarity=0.1,  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
                db=db
            )
            
            print(f"Q&A —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (min_similarity=0.1): {len(qa_results)}")
            for result in qa_results:
                print(f"  - ID: {result['id']}, –í–æ–ø—Ä–æ—Å: '{result['question']}', Similarity: {result['similarity']:.3f}")
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            combined_results = embeddings_service.search_relevant_chunks(
                query=query,
                user_id=1,
                assistant_id=117,
                top_k=10,
                min_similarity=0.1,
                include_qa=True,
                qa_limit=10,
                db=db
            )
            
            print(f"\n–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(combined_results)}")
            for i, result in enumerate(combined_results):
                result_type = result.get('type', result.get('doc_type', 'unknown'))
                print(f"  {i+1}. Type: {result_type}, Similarity: {result['similarity']:.3f}")
                if 'Q:' in result['text']:
                    print(f"      Q&A: {result['text'][:100]}...")
                else:
                    print(f"      Text: {result['text'][:100]}...")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    test_qa_search()