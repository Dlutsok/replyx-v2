#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API widget-config –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –≤–∏–¥–∂–µ—Ç
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from database.models import Assistant
from core.app_config import DATABASE_URL, SITE_SECRET
import json
import jwt
import requests

def test_widget_config_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API widget-config —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    session = SessionLocal()
    
    try:
        print("üß™ –¢–ï–°–¢ API WIDGET-CONFIG")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        assistant = session.query(Assistant).first()
        if not assistant:
            print("‚ùå –ù–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
        print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {assistant.name} (ID: {assistant.id})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        print("\\nüîß –£–°–¢–ê–ù–û–í–ö–ê –¢–ï–°–¢–û–í–´–• –ù–ê–°–¢–†–û–ï–ö...")
        assistant.operator_name = "–ú–∞–∫—Å–∏–º –°–µ—Ä–≤–∏—Å–æ–≤"
        assistant.business_name = "–û–û–û –¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è" 
        assistant.avatar_url = "https://example.com/test-avatar.jpg"
        assistant.widget_theme = "yellow"
        assistant.widget_settings = {
            "position": "bottom-left",
            "buttonSize": 70,
            "welcomeMessage": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç!"
        }
        session.commit()
        session.refresh(assistant)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        print("\\nüîë –°–û–ó–î–ê–ù–ò–ï –¢–û–ö–ï–ù–ê...")
        token_payload = {
            "assistant_id": assistant.id,
            "allowed_domains": "example.com,test.com"
        }
        test_token = jwt.encode(token_payload, SITE_SECRET, algorithm='HS256')
        print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: {test_token[:50]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API widget-config
        print("\\nüåê –¢–ï–°–¢ API WIDGET-CONFIG...")
        api_url = "http://localhost:8000/api/widget-config"
        
        response = requests.post(api_url, json={"token": test_token}, timeout=10)
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"üì¶ –û—Ç–≤–µ—Ç API: {json.dumps(result, ensure_ascii=False, indent=2)}")
            
            if result.get("success"):
                config = result.get("config", {})
                print("\\n‚úÖ API –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û:")
                print(f"  - –û–ø–µ—Ä–∞—Ç–æ—Ä: {config.get('operator_name')}")
                print(f"  - –ö–æ–º–ø–∞–Ω–∏—è: {config.get('business_name')}")
                print(f"  - –ê–≤–∞—Ç–∞—Ä: {config.get('avatar_url')}")
                print(f"  - –¢–µ–º–∞: {config.get('widget_theme')}")
                print(f"  - ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {config.get('assistant_id')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è
                if (config.get('operator_name') == "–ú–∞–∫—Å–∏–º –°–µ—Ä–≤–∏—Å–æ–≤" and
                    config.get('business_name') == "–û–û–û –¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è" and
                    config.get('widget_theme') == "yellow"):
                    print("\\nüéâ –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!")
                    return True
                else:
                    print("\\n‚ùå –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - –ø–æ–ª—É—á–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                    return False
            else:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.get('reason')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        session.rollback()
        return False
    finally:
        session.close()

if __name__ == "__main__":
    success = test_widget_config_api()
    sys.exit(0 if success else 1)