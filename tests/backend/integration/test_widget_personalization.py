#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–∞

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:
1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–∞  
3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from database.models import Assistant
from core.app_config import DATABASE_URL
import json

def test_personalization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –≤–∏–¥–∂–µ—Ç–∞"""
    
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    session = SessionLocal()
    
    try:
        print("üß™ –¢–ï–°–¢ –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–ò –í–ò–î–ñ–ï–¢–ê")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        assistant = session.query(Assistant).first()
        if not assistant:
            print("‚ùå –ù–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
        print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {assistant.name} (ID: {assistant.id})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("\nüìä –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"  –û–ø–µ—Ä–∞—Ç–æ—Ä: {getattr(assistant, 'operator_name', '–ù–ï –ó–ê–î–ê–ù–û')}")
        print(f"  –ö–æ–º–ø–∞–Ω–∏—è: {getattr(assistant, 'business_name', '–ù–ï –ó–ê–î–ê–ù–û')}")
        print(f"  –ê–≤–∞—Ç–∞—Ä: {getattr(assistant, 'avatar_url', '–ù–ï –ó–ê–î–ê–ù–û')}")
        print(f"  –¢–µ–º–∞: {getattr(assistant, 'widget_theme', '–ù–ï –ó–ê–î–ê–ù–û')}")
        print(f"  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {getattr(assistant, 'widget_settings', '–ù–ï –ó–ê–î–ê–ù–û')}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        print("\nüîß –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö...")
        assistant.operator_name = "–¢–µ—Å—Ç–æ–≤—ã–π –û–ø–µ—Ä–∞—Ç–æ—Ä"
        assistant.business_name = "–¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è"
        assistant.avatar_url = "https://example.com/avatar.jpg"
        assistant.widget_theme = "green"
        assistant.widget_settings = {
            "position": "bottom-left",
            "buttonSize": 60,
            "welcomeMessage": "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ!"
        }
        
        session.commit()
        session.refresh(assistant)
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("\nüìä –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"  –û–ø–µ—Ä–∞—Ç–æ—Ä: {assistant.operator_name}")
        print(f"  –ö–æ–º–ø–∞–Ω–∏—è: {assistant.business_name}")
        print(f"  –ê–≤–∞—Ç–∞—Ä: {assistant.avatar_url}")
        print(f"  –¢–µ–º–∞: {assistant.widget_theme}")
        print(f"  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {json.dumps(assistant.widget_settings, ensure_ascii=False, indent=2)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º widget-config API
        print("\nüåê –¢–ï–°–¢ WIDGET-CONFIG API:")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
        import jwt
        from core.app_config import SITE_SECRET
        
        token_payload = {"assistant_id": assistant.id}
        test_token = jwt.encode(token_payload, SITE_SECRET, algorithm='HS256')
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º API –≤—ã–∑–æ–≤ widget-config
        from api.assistants import get_widget_config_by_token
        
        class MockDB:
            def query(self, model):
                return MockQuery(assistant)
        
        class MockQuery:
            def __init__(self, assistant):
                self._assistant = assistant
            
            def filter(self, *args):
                return self
                
            def first(self):
                return self._assistant
        
        mock_db = MockDB()
        token_data = {"token": test_token}
        
        result = get_widget_config_by_token(token_data, mock_db)
        
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç API: {json.dumps(result, ensure_ascii=False, indent=2)}")
        
        if result.get("success"):
            config = result.get("config", {})
            print("\n‚úÖ API –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û:")
            print(f"  - –û–ø–µ—Ä–∞—Ç–æ—Ä: {config.get('operator_name')}")
            print(f"  - –ö–æ–º–ø–∞–Ω–∏—è: {config.get('business_name')}")
            print(f"  - –ê–≤–∞—Ç–∞—Ä: {config.get('avatar_url')}")
            print(f"  - –¢–µ–º–∞: {config.get('widget_theme')}")
            print(f"  - ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {config.get('assistant_id')}")
        else:
            print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.get('reason')}")
            return False
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç URL –≤–∏–¥–∂–µ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        print("\nüîó –ü–†–ò–ú–ï–† URL –í–ò–î–ñ–ï–¢–ê –° –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–ï–ô:")
        base_url = "http://localhost:3000/chat-iframe"
        params = []
        
        if config.get('operator_name'):
            params.append(f"operator_name={config['operator_name'].replace(' ', '+')}")
        if config.get('business_name'):
            params.append(f"business_name={config['business_name'].replace(' ', '+')}")
        if config.get('avatar_url'):
            params.append(f"avatar_url={config['avatar_url']}")
        if config.get('widget_theme'):
            params.append(f"widget_theme={config['widget_theme']}")
            
        if params:
            widget_url = f"{base_url}?{'&'.join(params)}"
            print(f"  {widget_url}")
        else:
            print(f"  {base_url} (–±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏)")
            
        print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("=" * 50)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        session.rollback()
        return False
    finally:
        session.close()

if __name__ == "__main__":
    success = test_personalization()
    sys.exit(0 if success else 1)