#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–∏–¥–∂–µ—Ç–∞ Q&A –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
"""
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.connection import get_db
from services.embeddings_service import EmbeddingsService

def test_widget_qa():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Q&A –∫–∞–∫ –≤ –≤–∏–¥–∂–µ—Ç–µ"""
    db = next(get_db())
    embeddings_service = EmbeddingsService()
    
    print("üîß –¢–ï–°–¢ –í–ò–î–ñ–ï–¢–ê Q&A")
    print("=" * 50)
    
    user_message = "–°–∫–æ–ª—å–∫–æ –≤–∞—Å –≤ –∫–æ–º–ø–∞–Ω–∏–∏?"
    user_id = 1
    assistant_id = 117
    
    print(f"–í–æ–ø—Ä–æ—Å: '{user_message}'")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistant_id}")
    
    try:
        # –¢–æ—á–Ω–æ —Ç–∞–∫ –∂–µ –∫–∞–∫ –≤ api/site.py
        relevant_chunks = embeddings_service.search_relevant_chunks(
            query=user_message,
            user_id=user_id,
            assistant_id=assistant_id,
            top_k=5,  # RAG_TOP_K_WIDGET
            min_similarity=0.5,   # –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ —á—Ç–æ–±—ã Q&A –ø—Ä–æ—Ö–æ–¥–∏–ª–∏
            include_qa=True,  # –í–∫–ª—é—á–∞–µ–º Q&A –ø–æ–∏—Å–∫
            qa_limit=2,       # –ú–∞–∫—Å–∏–º—É–º 2 Q&A —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
            db=db
        )
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ chunks: {len(relevant_chunks)}")
        
        for i, chunk in enumerate(relevant_chunks, 1):
            chunk_type = chunk.get('type', chunk.get('doc_type', 'unknown'))
            similarity = chunk.get('similarity', 0)
            text = chunk.get('text', '')
            
            print(f"\n{i}. –¢–∏–ø: {chunk_type}")
            print(f"   –°—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.4f}")
            print(f"   –¢–µ–∫—Å—Ç: {text[:100]}{'...' if len(text) > 100 else ''}")
            
            if chunk_type == 'qa_knowledge':
                print("   üéØ –≠–¢–û Q&A –†–ï–ó–£–õ–¨–¢–ê–¢!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º build_context_messages
        if relevant_chunks:
            print(f"\n=== –¢–ï–°–¢ BUILD_CONTEXT_MESSAGES ===")
            context_parts, total_tokens = embeddings_service.build_context_messages(
                relevant_chunks, 
                max_context_tokens=1000
            )
            
            print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —á–∞—Å—Ç–µ–π: {len(context_parts)}")
            print(f"–û–±—â–∏–π —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}")
            
            for i, part in enumerate(context_parts, 1):
                print(f"\n{i}. –ö–æ–Ω—Ç–µ–∫—Å—Ç:")
                print(f"   {part}")
                
                if "Q:" in part and "A:" in part:
                    print("   üéØ –í –ö–û–ù–¢–ï–ö–°–¢–ï –ï–°–¢–¨ Q&A!")
                    
        else:
            print("\n‚ùå –ù–µ—Ç relevant_chunks –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        db.close()

if __name__ == "__main__":
    test_widget_qa()