#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ flow –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–∂–µ—Ç–∞:
1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ PATCH /assistants/{id}
2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ /assistants/{id}/embed-code  
3. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ /widget-config
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from database.models import Assistant
from core.app_config import DATABASE_URL, SITE_SECRET
import json
import jwt
import requests
import time
from datetime import datetime

def test_widget_settings_full_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π flow –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–∂–µ—Ç–∞"""
    
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    session = SessionLocal()
    
    try:
        print("üß™ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û FLOW –ù–ê–°–¢–†–û–ï–ö –í–ò–î–ñ–ï–¢–ê")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        assistant = session.query(Assistant).first()
        if not assistant:
            print("‚ùå –ù–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
        print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {assistant.name} (ID: {assistant.id})")
        
        # –≠–¢–ê–ü 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
        print("\nüîß –≠–¢–ê–ü 1: –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –ß–ï–†–ï–ó PATCH /assistants/{id}")
        print("-" * 50)
        
        test_settings = {
            "operator_name": "–ê–Ω–Ω–∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            "business_name": "–û–û–û –¢–µ—Å—Ç –ö–æ–º–ø–∞–Ω–∏—è", 
            "avatar_url": "https://example.com/test-avatar-new.jpg",
            "widget_theme": "green",
            "allowed_domains": "test.com,example.org",
            "widget_settings": {
                "position": "bottom-left",
                "buttonSize": 75,
                "welcomeMessage": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—ã–π —á–∞—Ç!",
                "showAvatar": True,
                "showOnlineStatus": False
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç frontend)
        print(f"üì§ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {json.dumps(test_settings, ensure_ascii=False, indent=2)}")
        
        # –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã PATCH endpoint)
        assistant.operator_name = test_settings["operator_name"]
        assistant.business_name = test_settings["business_name"] 
        assistant.avatar_url = test_settings["avatar_url"]
        assistant.widget_theme = test_settings["widget_theme"]
        assistant.allowed_domains = test_settings["allowed_domains"]
        assistant.widget_settings = test_settings["widget_settings"]
        assistant.updated_at = datetime.utcnow()
        session.commit()
        session.refresh(assistant)
        
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        
        # –≠–¢–ê–ü 2: –ü–æ–ª—É—á–µ–Ω–∏–µ embed –∫–æ–¥–∞ –∏ —Ç–æ–∫–µ–Ω–∞
        print("\nüîó –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï EMBED –ö–û–î–ê –ò –¢–û–ö–ï–ù–ê")
        print("-" * 50)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ (–∏–º–∏—Ç–∞—Ü–∏—è GET /assistants/{id}/embed-code)
        domains_hash = hash(assistant.allowed_domains + str(assistant.updated_at))
        
        payload = {
            'user_id': assistant.user_id,
            'assistant_id': assistant.id,
            'type': 'site',
            'allowed_domains': assistant.allowed_domains,
            'domains_hash': domains_hash,
            'issued_at': int(time.time())
        }
        site_token = jwt.encode(payload, SITE_SECRET, algorithm='HS256')
        
        print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ–∫–µ–Ω: {site_token[:50]}...")
        print(f"üì¶ Payload —Ç–æ–∫–µ–Ω–∞: {payload}")
        
        # –≠–¢–ê–ü 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ widget-config API
        print("\nüåê –≠–¢–ê–ü 3: –ü–û–õ–£–ß–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –ß–ï–†–ï–ó /widget-config")
        print("-" * 50)
        
        api_url = "http://localhost:8000/api/widget-config"
        
        print(f"üì° –ó–∞–ø—Ä–æ—Å –∫ API: {api_url}")
        response = requests.post(api_url, json={"token": site_token}, timeout=10)
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"üì¶ –û—Ç–≤–µ—Ç API: {json.dumps(result, ensure_ascii=False, indent=2)}")
            
            if result.get("success"):
                config = result.get("config", {})
                
                # –≠–¢–ê–ü 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                print("\n‚úÖ –≠–¢–ê–ü 4: –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
                print("-" * 50)
                
                checks = [
                    ("–û–ø–µ—Ä–∞—Ç–æ—Ä", config.get('operator_name'), test_settings["operator_name"]),
                    ("–ö–æ–º–ø–∞–Ω–∏—è", config.get('business_name'), test_settings["business_name"]),
                    ("–ê–≤–∞—Ç–∞—Ä", config.get('avatar_url'), test_settings["avatar_url"]),
                    ("–¢–µ–º–∞", config.get('widget_theme'), test_settings["widget_theme"]),
                    ("ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", config.get('assistant_id'), assistant.id),
                ]
                
                all_passed = True
                for check_name, received, expected in checks:
                    if received == expected:
                        print(f"  ‚úÖ {check_name}: {received}")
                    else:
                        print(f"  ‚ùå {check_name}: –ø–æ–ª—É—á–µ–Ω–æ '{received}', –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected}'")
                        all_passed = False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ widget_settings
                widget_settings = config.get('widget_settings', {})
                if widget_settings:
                    print(f"  ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {json.dumps(widget_settings, ensure_ascii=False)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    expected_widget_settings = test_settings["widget_settings"]
                    for key, expected_value in expected_widget_settings.items():
                        if widget_settings.get(key) == expected_value:
                            print(f"    ‚úÖ {key}: {widget_settings.get(key)}")
                        else:
                            print(f"    ‚ùå {key}: –ø–æ–ª—É—á–µ–Ω–æ '{widget_settings.get(key)}', –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_value}'")
                            all_passed = False
                else:
                    print(f"  ‚ùå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    all_passed = False
                
                # –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
                print("\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
                print("-" * 50)
                
                if all_passed:
                    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
                    print("üìã –ü–æ–ª–Ω—ã–π flow —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
                    print("   1. ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î")
                    print("   2. ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞")
                    print("   3. ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ API")
                    print("   4. ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–∏–º—É–ª—è—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞
                    print("\nüñºÔ∏è –°–ò–ú–£–õ–Ø–¶–ò–Ø –†–ê–ë–û–¢–´ –í–ò–î–ñ–ï–¢–ê:")
                    print(f"   - –ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: '{config['operator_name']}'")
                    print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: '{config['business_name']}'")
                    print(f"   - –¢–µ–º–∞ –≤–∏–¥–∂–µ—Ç–∞: '{config['widget_theme']}'")
                    if config['avatar_url']:
                        print(f"   - –ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å: '{config['avatar_url']}'")
                    print(f"   - –ü–æ–∑–∏—Ü–∏—è –∫–Ω–æ–ø–∫–∏: '{widget_settings.get('position', '–Ω–µ –∑–∞–¥–∞–Ω–∞')}'")
                    print(f"   - –†–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏: {widget_settings.get('buttonSize', '–Ω–µ –∑–∞–¥–∞–Ω')}px")
                    print(f"   - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: '{widget_settings.get('welcomeMessage', '–Ω–µ –∑–∞–¥–∞–Ω–æ')}'")
                    
                    return True
                else:
                    print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
                    print("üìã –ü—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –ø–µ—Ä–µ–¥–∞—á–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                    return False
            else:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.get('reason')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        session.rollback()
        return False
    finally:
        session.close()

if __name__ == "__main__":
    success = test_widget_settings_full_flow()
    print(f"\n{'='*60}")
    print(f"üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê: {'SUCCESS' if success else 'FAILED'}")
    print(f"{'='*60}")
    sys.exit(0 if success else 1)