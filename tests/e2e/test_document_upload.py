#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from backend.database.connection import SessionLocal
from backend.database import models
from backend.database.crud import create_document
from backend.services.embeddings_service import embeddings_service
import tempfile

def test_document_upload_with_assistant():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É"""
    
    db = SessionLocal()
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞
        user_id = 1
        assistant_id = 117
        test_content = """
        –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.
        –≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ 'moroz' (ID: 117).
        
        –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
        - –¢–∏–ø: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        - –í–∞–∂–Ω–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è  
        - –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        filename = "test_document_assistant_binding.txt"
        
        print("=== –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –î–û–ö–£–ú–ï–ù–¢–ê –° –ü–†–ò–í–Ø–ó–ö–û–ô –ö –ê–°–°–ò–°–¢–ï–ù–¢–£ ===")
        print(f"User ID: {user_id}")
        print(f"Assistant ID: {assistant_id}")
        print(f"Filename: {filename}")
        
        # 1. –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î
        print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ë–î...")
        doc = create_document(db, user_id, filename, len(test_content))
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {doc.id}")
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞...")
        upload_dir = os.path.join("uploads", str(user_id))
        os.makedirs(upload_dir, exist_ok=True)
        file_path = os.path.join(upload_dir, filename)
        
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(test_content)
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
        
        # 3. –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        print(f"\n3. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}...")
        embeddings_service.index_document(
            doc_id=doc.id,
            user_id=user_id,
            assistant_id=assistant_id,
            text=test_content,
            doc_type="instruction",
            importance=10,
            db=db
        )
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º UserKnowledge
        knowledge = db.query(models.UserKnowledge).filter(
            models.UserKnowledge.doc_id == doc.id,
            models.UserKnowledge.assistant_id == assistant_id
        ).first()
        
        if knowledge:
            print(f"‚úÖ UserKnowledge —Å–æ–∑–¥–∞–Ω: doc_id={knowledge.doc_id}, assistant_id={knowledge.assistant_id}")
        else:
            print("‚ùå UserKnowledge –ù–ï —Å–æ–∑–¥–∞–Ω!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é API
        documents_for_assistant = db.query(models.Document).join(
            models.UserKnowledge, 
            models.Document.id == models.UserKnowledge.doc_id
        ).filter(
            models.Document.user_id == user_id,
            models.UserKnowledge.assistant_id == assistant_id
        ).all()
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {assistant_id}: {len(documents_for_assistant)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –ù–ï –≤–∏–¥–µ–Ω –¥—Ä—É–≥–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º
        other_assistant_id = 118  # Dan
        documents_for_other = db.query(models.Document).join(
            models.UserKnowledge, 
            models.Document.id == models.UserKnowledge.doc_id
        ).filter(
            models.Document.user_id == 63,  # user_id –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ Dan
            models.UserKnowledge.assistant_id == other_assistant_id
        ).all()
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –î–†–£–ì–û–ì–û –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ {other_assistant_id}: {len(documents_for_other)}")
        
        print(f"\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"–î–æ–∫—É–º–µ–Ω—Ç {doc.id} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É {assistant_id}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        db.close()

if __name__ == "__main__":
    test_document_upload_with_assistant()