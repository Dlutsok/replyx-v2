#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å Tinkoff API
"""

import hashlib
import requests
import json
from datetime import datetime
import uuid

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤
TERMINAL_KEY = "1757348842151DEMO"
SECRET_KEY = "lczutIQhGoZoZrgW"
SANDBOX_URL = "https://rest-api-test.tinkoff.ru/v2/"

def calculate_signature(data: dict) -> str:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –∫–∞–∫ –≤ –∫–æ–¥–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    items = [(k, v) for k, v in data.items() 
             if k not in ['token', 'Token'] and v is not None and str(v).strip() != '']
    
    items.append(('Password', SECRET_KEY))
    items.sort(key=lambda kv: kv[0])
    
    normalized_values = []
    for _, v in items:
        if isinstance(v, bool):
            normalized_values.append('true' if v else 'false')
        else:
            normalized_values.append(str(v))
    
    concatenated_string = ''.join(normalized_values)
    
    print(f"üîê –ü–æ–¥–ø–∏—Å—å:")
    print(f"   –ö–ª—é—á–∏: {[k for k, _ in items if k != 'Password']}")
    print(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {normalized_values[:-1]}")  # –ë–µ–∑ –ø–∞—Ä–æ–ª—è
    print(f"   –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {len(concatenated_string)}")
    
    return hashlib.sha256(concatenated_string.encode('utf-8')).hexdigest()

def test_simple_init():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ Init –∑–∞–ø—Ä–æ—Å–∞"""
    print("üß™ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ Init –∑–∞–ø—Ä–æ—Å–∞")
    print("=" * 50)
    
    order_id = f"test_{int(datetime.utcnow().timestamp())}"
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    data = {
        'TerminalKey': TERMINAL_KEY,
        'Amount': 50000,  # 500 —Ä—É–±–ª–µ–π –∫–∞–∫ –≤ –ª–æ–≥–∞—Ö
        'OrderId': order_id,
        'Description': '–¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞',
        'CustomerKey': '6',  # –ö–∞–∫ –≤ –ª–æ–≥–∞—Ö
        'SuccessURL': 'http://localhost:3000/payment/success?order=' + order_id,
        'FailURL': 'http://localhost:3000/payment/error?order=' + order_id,
        'Language': 'ru',
        'PayType': 'O',
        'NotificationURL': 'https://51be9a6c19f2.ngrok-free.app/api/payments/tinkoff-notification'
    }
    
    print(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:")
    for k, v in data.items():
        print(f"   {k}: {v}")
    print()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
    token = calculate_signature(data.copy())
    data['Token'] = token
    
    print(f"üîê –ü–æ–¥–ø–∏—Å—å: {token}")
    print()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    try:
        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Tinkoff...")
        response = requests.post(
            f"{SANDBOX_URL}Init",
            json=data,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        print(f"üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
        print(f"   HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.headers.get('content-type', '').startswith('application/json'):
            result = response.json()
            print(f"   JSON: {json.dumps(result, ensure_ascii=False, indent=2)}")
            
            if not result.get('Success'):
                error_code = result.get('ErrorCode', 'UNKNOWN')
                message = result.get('Message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                details = result.get('Details', '')
                
                print(f"\n‚ùå –û–®–ò–ë–ö–ê:")
                print(f"   –ö–æ–¥: {error_code}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                print(f"   –î–µ—Ç–∞–ª–∏: {details}")
                
                if error_code == '501':
                    print(f"\nüí° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–®–ò–ë–ö–ò 501:")
                    print(f"   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å TerminalKey: {TERMINAL_KEY}")
                    print(f"   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–µ—Ä–º–∏–Ω–∞–ª –∞–∫—Ç–∏–≤–µ–Ω –≤ T-Bank Business")
                    print(f"   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è sandbox URL: {SANDBOX_URL}")
                    print(f"   - –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ")
            else:
                print(f"\n‚úÖ –£–°–ü–ï–•: {result}")
                
        else:
            print(f"   –ù–µ-JSON –æ—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def main():
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TINKOFF API")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîë Terminal: {TERMINAL_KEY}")
    print(f"üåê URL: {SANDBOX_URL}")
    print()
    
    test_simple_init()

if __name__ == "__main__":
    main()
