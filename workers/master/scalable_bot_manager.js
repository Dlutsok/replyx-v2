const { fork } = require('child_process');
const path = require('path');
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const fs = require('fs');
const TelegramBot = require('node-telegram-bot-api');
const WebhookServer = require('../services/webhook_server');
const webhookConfig = require('../config/webhook');

// Backend API URL configuration
const BACKEND_API_URL = process.env.BACKEND_API_URL || 'http://localhost:8000';

/**
 * üß† –ú–ê–°–¢–ï–†-–ü–†–û–¶–ï–°–° –î–õ–Ø –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–ô –ú–£–õ–¨–¢–ò–ë–û–¢-–°–ò–°–¢–ï–ú–´
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç 1000+ –±–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å—ã
 */
class ScalableBotManager {
    constructor() {
        this.workers = new Map(); // botId -> worker process
        this.workerStats = new Map(); // botId -> —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.workerLogs = new Map(); // botId -> –ª–æ–≥–∏
        this.restartCounters = new Map(); // botId -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
        this.lastRestartTimes = new Map(); // botId -> –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        
        // üî• –ë–õ–û–ö–ò–†–û–í–ö–ê –î–í–û–ô–ù–û–ì–û –ó–ê–ü–£–°–ö–ê
        this.startingBots = new Set(); // –ë–æ—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—É—Å–∫–∞
        this.startLocks = new Map();   // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        
        // üî• –î–ï–¢–ê–õ–¨–ù–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ü–†–û–¶–ï–°–°–û–í
        this.processTracker = new Map(); // botId -> { pids: Set, lastScan: timestamp, restartInProgress: boolean }
        this.restartQueue = new Map(); // botId -> restart request timestamp
        this.killingProcesses = new Set(); // PIDs –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            maxWorkersPerCore: 20, // –£–º–µ–Ω—å—à–∏–ª —Å 25 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            maxTotalWorkers: 1000, // –ú–∞–∫—Å–∏–º—É–º –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤—Å–µ–≥–æ
            workerTimeout: 90000, // –£–≤–µ–ª–∏—á–∏–ª —Å 60—Å –¥–æ 90—Å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            heartbeatInterval: 45000, // –£–≤–µ–ª–∏—á–∏–ª —Å 30—Å –¥–æ 45—Å –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            logRetention: 500, // –£–º–µ–Ω—å—à–∏–ª —Å 1000 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            cooldownPeriod: 45000, // –£–≤–µ–ª–∏—á–∏–ª —Å 30—Å –¥–æ 45—Å
            maxWorkersPerBot: 1,
            staleWorkerTimeout: 300000, // 5 –º–∏–Ω—É—Ç
            syncInterval: 90000, // –£–≤–µ–ª–∏—á–∏–ª —Å 60—Å –¥–æ 90—Å
            monitoringInterval: 45000, // –£–≤–µ–ª–∏—á–∏–ª —Å 30—Å –¥–æ 45—Å
            // üî• –ù–û–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
            maxMemoryPerWorker: 150 * 1024 * 1024, // 150MB –Ω–∞ –≤–æ—Ä–∫–µ—Ä
            memoryCheckInterval: 300000, // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            autoGcInterval: 600000, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            maxRestartRate: 5, // –ú–∞–∫—Å–∏–º—É–º 5 –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –≤ —á–∞—Å
            emergencyStopThreshold: 0.95, // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ 95% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            // üî• –ü–ê–†–ê–ú–ï–¢–†–´ –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ü–†–û–¶–ï–°–°–û–í
            processCheckInterval: 60000, // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 15—Å)
            maxKillWaitTime: 30000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            duplicateCheckDelay: 5000 // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–µ–π
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.setupDirectories();
        
        // üî• –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–û–ú–ë–ò-–ü–†–û–¶–ï–°–°–û–í –ü–†–ò –ó–ê–ü–£–°–ö–ï
        this.cleanupZombieProcesses().then(() => {
            this.startAPI();
            this.startMonitoring();
            this.startProcessTracking(); // üî• –ó–ê–ü–£–°–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ü–†–û–¶–ï–°–°–û–í
            
            console.log(`üß† –ú–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω (PID: ${process.pid})`);
            console.log(`üìä –ú–∞–∫—Å–∏–º—É–º –≤–æ—Ä–∫–µ—Ä–æ–≤: ${this.config.maxTotalWorkers}`);
            console.log(`üöÄ Scalable Bot Manager –≥–æ—Ç–æ–≤ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é 1000+ –±–æ—Ç–æ–≤!`);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            this.loadBotsFromDB();
        });
        
        // üåê WEBHOOK –°–ï–†–í–ï–†
        this.webhookServer = null;
        if (webhookConfig.isWebhookMode()) {
            this.webhookServer = new WebhookServer();
        }
        
        // –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.monitoring = {
            totalRestarts: 0,
            totalErrors: 0,
            emergencyStops: 0,
            lastEmergencyTime: 0
        };
        
        console.log(`üöÄ Scalable Bot Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ: ${webhookConfig.config.MODE.toUpperCase()}`);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
     */
    setupDirectories() {
        const dirs = ['logs', 'config', 'tmp'];
        dirs.forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
        });
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–æ–≤ –∏–∑ –ë–î
     */
    async loadBotsFromDB() {
        try {
            const response = await axios.get(`${BACKEND_API_URL}/api/bot-instances-all`);
            const botInstances = response.data;
            const activeBotIds = botInstances.filter(b => b.is_active).map(b => b.id);
            
            console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${botInstances.length} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –±–æ—Ç–æ–≤`);
            
            // –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–∞—Ö
            await this.cleanupInactiveWorkers(activeBotIds);
            
            for (const botConfig of botInstances) {
                if (botConfig.is_active && !this.workers.has(botConfig.id)) {
                    await this.startBotWorker(botConfig.id, botConfig);
                } else if (!botConfig.is_active && this.workers.has(botConfig.id)) {
                    await this.stopBotWorker(botConfig.id);
                }
            }
            
            console.log(`üöÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: ${this.workers.size}`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤ –∏–∑ –ë–î:', error.message);
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–∞—Ö
     */
    async cleanupInactiveWorkers(activeBotIds) {
        const workersToCleanup = [];
        
        // –ù–∞—Ö–æ–¥–∏–º –≤–æ—Ä–∫–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        for (const [botId, stats] of this.workerStats) {
            if (!activeBotIds.includes(parseInt(botId))) {
                workersToCleanup.push(botId);
            }
        }
        
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–∞—Ö
        for (const botId of workersToCleanup) {
            console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º –±–æ—Ç–µ ${botId}`);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if (this.workers.has(botId)) {
                await this.stopBotWorker(botId);
            }
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            this.workerStats.delete(botId);
            this.workerLogs.delete(botId);
            this.restartCounters.delete(botId);
            this.lastRestartTimes.delete(botId);
        }
        
        if (workersToCleanup.length > 0) {
            console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${workersToCleanup.length} –∑–∞–ø–∏—Å–µ–π –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–∞—Ö`);
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –±–æ—Ç–∞
     */
    async startBotWorker(botId, botConfig) {
        try {
            // üî• –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ò–†–û–í–ö–ò –ó–ê–ü–£–°–ö–ê
            if (this.startingBots.has(botId)) {
                console.log(`‚ö†Ô∏è –ë–æ—Ç ${botId} —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–ø—É—Å–∫`);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –≤–æ—Ä–∫–µ—Ä
            if (this.workers.has(botId)) {
                console.log(`‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä –¥–ª—è –±–æ—Ç–∞ ${botId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫`);
                return;
            }
            
            // üî• –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ë–õ–û–ö–ò–†–û–í–ö–£
            this.startingBots.add(botId);
            this.startLocks.set(botId, Date.now());
            
            console.log(`üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ ${botId}`);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if (this.workers.size >= this.config.maxTotalWorkers) {
                throw new Error(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤: ${this.config.maxTotalWorkers}`);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            const assistantResponse = await axios.get(`${BACKEND_API_URL}/api/bot-instances/${botId}/assistant`);
            const assistant = assistantResponse.data;
            
            if (!assistant) {
                throw new Error(`–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${botId}`);
            }
            
            console.log(`üöÄ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –±–æ—Ç–∞ ${botId} (${assistant.name})`);
            
            // –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            const workerPath = path.join(__dirname, '../telegram/bot_worker.js');
            const worker = fork(workerPath, [], {
                silent: false,
                env: { 
                    ...process.env, 
                    BOT_ID: botId,
                    BOT_WORKER_ID: `bot_${botId}_${Date.now()}` // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–∏—Å–∫–∞
                }
            });
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–æ—Ä–∫–µ—Ä–∞
            this.setupWorkerHandlers(botId, worker);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Ä–∫–µ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —É–±–∏–π—Å—Ç–≤–∞
            this.workers.set(botId, worker);
            this.workerStats.set(botId, {
                startTime: Date.now(),
                pid: worker.pid,
                workerPid: worker.pid, // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                restarts: this.restartCounters.get(botId) || 0,
                status: 'starting',
                assistantName: assistant.name,
                lastAssistantData: {
                    system_prompt: assistant.system_prompt,
                    ai_model: assistant.ai_model,
                    name: assistant.name,
                    assistant_id: botConfig.assistant_id,
                    bot_token: botConfig.bot_token
                }
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞
            worker.send({
                command: 'start',
                data: { botId, botConfig, assistant }
            });
            
            console.log(`‚úÖ –í–æ—Ä–∫–µ—Ä –¥–ª—è –±–æ—Ç–∞ ${botId} –∑–∞–ø—É—â–µ–Ω (PID: ${worker.pid})`);
            
            // üî• –°–ù–ò–ú–ê–ï–ú –ë–õ–û–ö–ò–†–û–í–ö–£ –ß–ï–†–ï–ó 10 –°–ï–ö–£–ù–î
            setTimeout(() => {
                this.startingBots.delete(botId);
                this.startLocks.delete(botId);
                console.log(`üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–Ω—è—Ç–∞ –¥–ª—è –±–æ—Ç–∞ ${botId}`);
            }, 10000);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –±–æ—Ç–∞ ${botId}:`, error.message);
            
            // üî• –°–ù–ò–ú–ê–ï–ú –ë–õ–û–ö–ò–†–û–í–ö–£ –ü–†–ò –û–®–ò–ë–ö–ï
            this.startingBots.delete(botId);
            this.startLocks.delete(botId);
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
     */
    setupWorkerHandlers(botId, worker) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞
        worker.on('message', (message) => {
            this.handleWorkerMessage(botId, message);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞
        worker.on('exit', (code, signal) => {
            console.log(`üîÑ –í–æ—Ä–∫–µ—Ä –±–æ—Ç–∞ ${botId} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (–∫–æ–¥: ${code}, —Å–∏–≥–Ω–∞–ª: ${signal})`);
            this.handleWorkerExit(botId, code, signal);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–æ—Ä–∫–µ—Ä–∞
        worker.on('error', (error) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –±–æ—Ç–∞ ${botId}:`, error.message);
            this.logWorkerEvent(botId, 'error', `Worker error: ${error.message}`);
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞
     */
    handleWorkerMessage(botId, message) {
        const { type, data, requestType } = message;
        
        switch (type) {
            case 'started':
                this.updateWorkerStatus(botId, 'running');
                this.logWorkerEvent(botId, 'info', `–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: ${data.pid})`);
                break;
                
            case 'stopped':
                this.updateWorkerStatus(botId, 'stopped');
                this.logWorkerEvent(botId, 'info', '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                break;
                
            case 'heartbeat':
                this.updateWorkerStatus(botId, 'running', { lastHeartbeat: Date.now() });
                break;
                
            case 'log':
                if (data && data.level) {
                    this.logWorkerEvent(botId, data.level, data.message, data.meta);
                } else {
                    console.log(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∞ –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞ ${botId}:`, message);
                }
                break;
                
            case 'error':
                this.logWorkerEvent(botId, 'error', data.message);
                break;
                
            case 'request':
                this.handleWorkerRequest(botId, requestType, data);
                break;
                
            case 'register_webhook':
                this.handleWebhookRegistration(botId, data);
                break;
                
            default:
                console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞ ${botId}:`, message);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤
     */
    async handleWorkerRequest(botId, requestType, data) {
        switch (requestType) {
            case 'ai_request':
                await this.handleAIRequest(botId, data);
                break;
            default:
                console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞ ${botId}: ${requestType}`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞
     */
    async handleAIRequest(botId, data) {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
            console.log(`ü§ñ AI –∑–∞–ø—Ä–æ—Å –æ—Ç –±–æ—Ç–∞ ${botId}: "${data.text}"`);
            
            // –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
            const worker = this.workers.get(botId);
            if (worker) {
                worker.send({
                    command: 'ai_response',
                    data: {
                        chatId: data.chatId,
                        response: `–û—Ç–≤–µ—Ç –æ—Ç AI –¥–ª—è: "${data.text}"`
                    }
                });
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –±–æ—Ç–∞ ${botId}:`, error.message);
        }
    }
    
    /**
     * üåê –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò WEBHOOK
     */
    handleWebhookRegistration(botId, data) {
        try {
            if (this.webhookServer && webhookConfig.isWebhookMode()) {
                const worker = this.workers.get(botId);
                if (worker) {
                    this.webhookServer.registerBot(botId, worker);
                    console.log(`üåê –ë–æ—Ç ${botId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ webhook —Å–µ—Ä–≤–µ—Ä–µ`);
                } else {
                    console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ webhook –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ ${botId}`);
                }
            } else {
                console.warn(`‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è webhook, –Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤ webhook —Ä–µ–∂–∏–º–µ`);
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ webhook –¥–ª—è –±–æ—Ç–∞ ${botId}:`, error.message);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞
     */
    async handleWorkerExit(botId, code, signal) {
        this.workers.delete(botId);
        this.updateWorkerStatus(botId, 'crashed');
        
        // üî• –°–ù–ò–ú–ê–ï–ú –ë–õ–û–ö–ò–†–û–í–ö–£ –ó–ê–ü–£–°–ö–ê –ï–°–õ–ò –ë–´–õ–ê
        this.startingBots.delete(botId);
        this.startLocks.delete(botId);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if (code !== 0 && signal !== 'SIGTERM') {
            console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –±–æ—Ç–∞ ${botId}`);
            
            // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ò–†–û–í–ö–ò
            if (this.startingBots.has(botId)) {
                console.log(`‚ö†Ô∏è –ë–æ—Ç ${botId} —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è - –æ—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫`);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
            const lastRestart = this.lastRestartTimes.get(botId);
            const now = Date.now();
            
            if (!lastRestart || (now - lastRestart) > this.config.cooldownPeriod) {
                this.lastRestartTimes.set(botId, now);
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
                const restartCount = this.restartCounters.get(botId) || 0;
                this.restartCounters.set(botId, restartCount + 1);
                
                // Exponential backoff –¥–ª—è —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
                const delay = Math.min(60000, 5000 * Math.pow(2, Math.min(restartCount, 4)));
                
                setTimeout(async () => {
                    try {
                        // üî• –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú
                        if (this.startingBots.has(botId) || this.workers.has(botId)) {
                            console.log(`‚ö†Ô∏è –ë–æ—Ç ${botId} —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–ª–∏ –∑–∞–ø—É—â–µ–Ω - –æ—Ç–º–µ–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫`);
                            return;
                        }
                        
                        const response = await axios.get(`${BACKEND_API_URL}/api/bot-instances-all`);
                        const botConfig = response.data.find(b => b.id === botId && b.is_active);
                        
                        if (botConfig) {
                            await this.startBotWorker(botId, botConfig);
                        }
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${botId}:`, error.message);
                    }
                }, delay);
                
                console.log(`‚è±Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ${botId} —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${restartCount + 1})`);
            } else {
                console.log(`‚ùÑÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ${botId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω cooldown`);
            }
        }
    }
    
    /**
     * –£–ª—å—Ç—Ä–∞-—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
     */
    async stopBotWorker(botId) {
        const worker = this.workers.get(botId);
        if (!worker) return;
        
        console.log(`‚èπÔ∏è –£–õ–¨–¢–†–ê-–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –±–æ—Ç–∞ ${botId}`);
        
        try {
            // 1. –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ webhook (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if (this.webhookServer && webhookConfig.isWebhookMode()) {
                this.webhookServer.unregisterBot(botId);
            }
            
            // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —É–ª—å—Ç—Ä–∞-—Å—Ç–∞–±–∏–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            worker.send({ command: 'stop' });
            
            // 2. –ñ–¥–µ–º graceful shutdown —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º-–∞—É—Ç–æ–º
            await new Promise((resolve) => {
                const timeout = setTimeout(() => {
                    console.log(`üíÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞ –±–æ—Ç–∞ ${botId} (—Ç–∞–π–º-–∞—É—Ç 15 —Å–µ–∫—É–Ω–¥)`);
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å SIGTERM —Å–Ω–∞—á–∞–ª–∞
                    try {
                        worker.kill('SIGTERM');
                        
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–π–º-–∞—É—Ç –¥–ª—è SIGTERM
                        setTimeout(() => {
                            if (!worker.killed) {
                                console.log(`üíÄ SIGKILL –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ –±–æ—Ç–∞ ${botId}`);
                                worker.kill('SIGKILL');
                            }
                        }, 3000);
                        
                    } catch (killError) {
                        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞ ${botId}: ${killError.message}`);
                    }
                    
                    resolve();
                }, 15000); // –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º-–∞—É—Ç –¥–æ 15 —Å–µ–∫—É–Ω–¥
                
                worker.on('exit', () => {
                    clearTimeout(timeout);
                    resolve();
                });
            });
            
            // 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            await this.forceKillBotProcesses(botId);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —É–ª—å—Ç—Ä–∞-—Å—Ç–∞–±–∏–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞ –±–æ—Ç–∞ ${botId}:`, error.message);
            
            // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try {
                worker.kill('SIGKILL');
                await this.forceKillBotProcesses(botId);
            } catch (killError) {
                console.log(`‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞ ${botId}: ${killError.message}`);
            }
        }
        
        // 4. –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö
        this.workers.delete(botId);
        this.updateWorkerStatus(botId, 'stopped');
        
        // üî• –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò–ó –í–°–ï–• –°–¢–†–£–ö–¢–£–† –î–ê–ù–ù–´–•
        this.workerStats.delete(botId);
        this.workerLogs.delete(botId);
        this.restartCounters.delete(botId);
        this.lastRestartTimes.delete(botId);
        this.startingBots.delete(botId);
        this.startLocks.delete(botId);
        this.processTracker.delete(botId);
        this.restartQueue.delete(botId);
        
        // –û—á–∏—Å—Ç–∫–∞ –∏–∑ webhook —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.webhookServer) {
            this.webhookServer.unregisterBot(botId);
        }
        
        console.log(`üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ ${botId} –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä`);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        if (global.gc) {
            console.log(`üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞ ${botId}`);
            global.gc();
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        await new Promise(resolve => setTimeout(resolve, 2000));
        console.log(`‚úÖ –í–æ—Ä–∫–µ—Ä –±–æ—Ç–∞ ${botId} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—á–∏—â–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏`);
    }
    
    /**
     * –•–ò–†–£–†–ì–ò–ß–ï–°–ö–ò –¢–û–ß–ù–û–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
     */
    async forceKillBotProcesses(botId) {
        try {
            console.log(`üéØ –•–ò–†–£–†–ì–ò–ß–ï–°–ö–ò –¢–û–ß–ù–´–ô –ø–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞ ${botId}`);
            
            // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É–±–∏—Ç—å –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É PID –≤–æ—Ä–∫–µ—Ä–∞
            const workerStats = this.workerStats.get(botId);
            const foundPids = new Set();
            
            if (workerStats && workerStats.workerPid) {
                console.log(`üéØ –ù–∞–π–¥–µ–Ω –∏–∑–≤–µ—Å—Ç–Ω—ã–π PID –≤–æ—Ä–∫–µ—Ä–∞: ${workerStats.workerPid}`);
                foundPids.add(workerStats.workerPid);
            }
            
            // 2. üî• –¢–û–ß–ù–´–ô –ü–û–ò–°–ö –¢–û–õ–¨–ö–û –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ë–û–¢–ê
            const { exec } = require('child_process');
            const commands = [
                `ps aux | grep "BOT_ID=${botId}" | grep -v grep`,
                `pgrep -f "BOT_ID=${botId}"`
            ];
            
            for (const command of commands) {
                try {
                    const { stdout } = await new Promise((resolve) => {
                        exec(command, (error, stdout, stderr) => {
                            resolve({ stdout: stdout || '' });
                        });
                    });
                    
                    const lines = stdout.split('\n').filter(line => line.trim());
                    for (const line of lines) {
                        const parts = line.trim().split(/\s+/);
                        if (parts.length > 1) {
                            const pid = parseInt(parts[1]);
                            if (pid && !isNaN(pid) && pid !== process.pid) {
                                // üî• –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –≠–¢–û –ò–ú–ï–ù–ù–û –ù–ê–® –ë–û–¢
                                if (line.includes(`BOT_ID=${botId}`) || line.includes('bot_worker.js')) {
                                    foundPids.add(pid);
                                    console.log(`üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ ${botId}: PID ${pid}`);
                                }
                            }
                        }
                    }
                } catch (cmdError) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
                }
            }
            
            // 3. –•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–æ–µ —É–±–∏–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            if (foundPids.size > 0) {
                console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${foundPids.size} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞ ${botId} –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: [${Array.from(foundPids).join(', ')}]`);
                
                for (const pid of foundPids) {
                    try {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                        process.kill(pid, 0);
                        
                        // üî• –°–†–ê–ó–£ SIGKILL –¢–û–õ–¨–ö–û –î–õ–Ø –≠–¢–û–ì–û –ë–û–¢–ê
                        console.log(`üéØ SIGKILL –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ ${pid} (–±–æ—Ç ${botId})`);
                        process.kill(pid, 'SIGKILL');
                        
                        // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                        await new Promise(resolve => setTimeout(resolve, 1000));
                        
                    } catch (killError) {
                        if (killError.code === 'ESRCH') {
                            console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${pid} —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                        } else {
                            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ ${pid}: ${killError.message}`);
                        }
                    }
                }
            } else {
                console.log(`‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –±–æ—Ç–∞ ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            }
            
            console.log(`üéØ –•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞ ${botId} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Ö–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞ ${botId}:`, error.message);
        }
    }
    
    /**
     * –£–ª—å—Ç—Ä–∞-—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
     */
    async restartBotWorker(botId) {
        console.log(`üîÑ –£–õ–¨–¢–†–ê-–°–¢–ê–ë–ò–õ–¨–ù–´–ô –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –±–æ—Ç–∞ ${botId}`);
        
        // üî• –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ù–ê–ß–ê–õ–ê –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê
        const restartStartTime = Date.now();
        const restartId = `restart_${botId}_${restartStartTime}`;
        
        console.log(`üìã [${restartId}] –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${botId}`);
        console.log(`üìã [${restartId}] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const currentWorker = this.workers.get(botId);
        if (currentWorker) {
            console.log(`üìã [${restartId}]   - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PID: ${currentWorker.pid}`);
            console.log(`üìã [${restartId}]   - Worker killed: ${currentWorker.killed}`);
        } else {
            console.log(`üìã [${restartId}]   - –í–æ—Ä–∫–µ—Ä –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –º–∞—Å—Ç–µ—Ä–µ`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ —Å–∏—Å—Ç–µ–º–µ
        const runningPids = await this.getBotProcesses(botId);
        console.log(`üìã [${restartId}]   - –ü—Ä–æ—Ü–µ—Å—Å—ã –≤ —Å–∏—Å—Ç–µ–º–µ: [${runningPids.join(', ')}]`);
        
        // 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
        const restartCount = this.restartCounters.get(botId) || 0;
        const attempt = restartCount + 1;
        
        // 2. –í—ã—á–∏—Å–ª—è–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        const baseDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥ –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        const maxDelay = 60000; // –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
        const exponentialDelay = Math.min(maxDelay, baseDelay * Math.pow(2, Math.min(attempt - 1, 4)));
        
        console.log(`üìã [${restartId}] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ${botId} —á–µ—Ä–µ–∑ ${exponentialDelay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        
        // 3. –£–ª—å—Ç—Ä–∞-—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        console.log(`üìã [${restartId}] –§–∞–∑–∞ 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤`);
        await this.stopBotWorker(botId);
        
        // 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞
        console.log(`üìã [${restartId}] –§–∞–∑–∞ 2: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤`);
        const remainingPids = await this.getBotProcesses(botId);
        if (remainingPids.length > 0) {
            console.log(`üìã [${restartId}] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã: [${remainingPids.join(', ')}]`);
            for (const pid of remainingPids) {
                await this.forceKillProcess(pid, `cleanup_${restartId}`);
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            console.log(`üìã [${restartId}] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ 5 —Å–µ–∫ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏`);
            await new Promise(resolve => setTimeout(resolve, 5000));
        }
        
        // 5. –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        console.log(`üìã [${restartId}] –§–∞–∑–∞ 3: –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º (${exponentialDelay}ms)`);
        await new Promise(resolve => setTimeout(resolve, exponentialDelay));
        
        try {
            // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            console.log(`üìã [${restartId}] –§–∞–∑–∞ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î`);
            const response = await axios.get(`${BACKEND_API_URL}/api/bot-instances-all`);
            const botConfig = response.data.find(b => b.id === botId && b.is_active);
            
            if (botConfig) {
                // 7. –£–ª—å—Ç—Ä–∞-—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
                console.log(`üìã [${restartId}] –§–∞–∑–∞ 5: –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞`);
                await this.startBotWorker(botId, botConfig);
                
                // 8. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
                this.restartCounters.set(botId, attempt);
                this.lastRestartTimes.set(botId, Date.now());
                
                // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞
                setTimeout(async () => {
                    const newPids = await this.getBotProcesses(botId);
                    const newWorker = this.workers.get(botId);
                    
                    if (newWorker && newPids.length === 1 && newPids[0] === newWorker.pid) {
                        const restartDuration = Date.now() - restartStartTime;
                        console.log(`üìã [${restartId}] ‚úÖ –£–°–ü–ï–®–ù–´–ô –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞ ${restartDuration}ms`);
                        console.log(`üìã [${restartId}]   - –ù–æ–≤—ã–π PID: ${newWorker.pid}`);
                        console.log(`üìã [${restartId}]   - –ü—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${newPids.length}`);
                        
                        // 10. –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
                        setTimeout(() => {
                            if (this.workers.has(botId)) {
                                console.log(`üìã [${restartId}] üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ ${botId}`);
                                this.restartCounters.set(botId, 0);
                            }
                        }, 300000); // 5 –º–∏–Ω—É—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                        
                    } else {
                        console.log(`üìã [${restartId}] ‚ùå –ù–ï–£–°–ü–ï–®–ù–´–ô –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫:`);
                        console.log(`üìã [${restartId}]   - Worker registered: ${!!newWorker}`);
                        console.log(`üìã [${restartId}]   - Processes found: ${newPids.length}`);
                        console.log(`üìã [${restartId}]   - PIDs: [${newPids.join(', ')}]`);
                    }
                }, 10000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                
                console.log(`üìã [${restartId}] ‚úÖ –ë–æ—Ç ${botId} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
                
            } else {
                console.log(`üìã [${restartId}] ‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`);
            }
        } catch (error) {
            console.error(`üìã [${restartId}] ‚ùå –û—à–∏–±–∫–∞ —É–ª—å—Ç—Ä–∞-—Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –±–æ—Ç–∞ ${botId}:`, error.message);
            
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–∞–∫–∂–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            this.restartCounters.set(botId, attempt);
        }
    }
    
    /**
     * üîç –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ü–†–û–¶–ï–°–°–û–í –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ë–û–¢–ê
     */
    async getBotProcesses(botId) {
        try {
            const { exec } = require('child_process');
            const { stdout } = await new Promise((resolve) => {
                exec(`ps aux | grep "BOT_ID=${botId}" | grep -v grep`, (error, stdout) => {
                    resolve({ stdout: stdout || '' });
                });
            });
            
            const pids = [];
            const lines = stdout.split('\n').filter(line => line.trim());
            
            for (const line of lines) {
                const parts = line.trim().split(/\s+/);
                if (parts.length > 1) {
                    const pid = parseInt(parts[1]);
                    if (pid && !isNaN(pid)) {
                        pids.push(pid);
                    }
                }
            }
            
            return pids;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –±–æ—Ç–∞ ${botId}:`, error.message);
            return [];
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Ä–∫–µ—Ä–∞
     */
    updateWorkerStatus(botId, status, extra = {}) {
        const currentStats = this.workerStats.get(botId) || {};
        this.workerStats.set(botId, {
            ...currentStats,
            status: status,
            lastUpdate: Date.now(),
            ...extra
        });
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤–æ—Ä–∫–µ—Ä–∞
     */
    logWorkerEvent(botId, level, message, meta = {}) {
        const logEntry = {
            timestamp: Date.now(),
            level: level,
            message: message,
            meta: meta
        };
        
        if (!this.workerLogs.has(botId)) {
            this.workerLogs.set(botId, []);
        }
        
        const logs = this.workerLogs.get(botId);
        logs.push(logEntry);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
        if (logs.length > this.config.logRetention) {
            logs.splice(0, logs.length - this.config.logRetention);
        }
        
        // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] [${botId}] [${level.toUpperCase()}] ${message}`);
    }
    
    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ—Ä–∫–µ—Ä–æ–≤
     */
    startMonitoring() {
        setInterval(() => {
            const activeWorkers = this.workers.size;
            const totalRestarts = Array.from(this.restartCounters.values()).reduce((a, b) => a + b, 0);
            
            console.log(`üíì –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${activeWorkers} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤, ${totalRestarts} –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤`);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
            this.checkStaleWorkers();
            
        }, this.config.heartbeatInterval);
        
        // üî• –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–ú–Ø–¢–ò –í–û–†–ö–ï–†–û–í
        setInterval(() => {
            this.checkWorkerMemoryUsage();
        }, this.config.memoryCheckInterval);
        
        // üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ë–û–†–ö–ê –ú–£–°–û–†–ê
        setInterval(() => {
            if (global.gc) {
                const memBefore = process.memoryUsage();
                global.gc();
                const memAfter = process.memoryUsage();
                console.log(`üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ ${Math.round((memBefore.heapUsed - memAfter.heapUsed) / 1024 / 1024)}MB`);
            }
        }, this.config.autoGcInterval);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ë–î (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
        setInterval(async () => {
            await this.syncWithDatabase();
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
        setInterval(async () => {
            try {
                const response = await axios.get(`${BACKEND_API_URL}/api/bot-instances-all`);
                const activeBotIds = response.data.filter(b => b.is_active).map(b => b.id);
                await this.cleanupInactiveWorkers(activeBotIds);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏:', error.message);
            }
        }, 300000); // 5 –º–∏–Ω—É—Ç
    }
    
    /**
     * üî• –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–ê–ú–Ø–¢–ò –í–û–†–ö–ï–†–ê–ú–ò
     */
    async checkWorkerMemoryUsage() {
        const memoryWarnings = [];
        const memoryErrors = [];
        
        for (const [botId, worker] of this.workers) {
            try {
                if (worker && !worker.killed) {
                    // –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º
                    const { exec } = require('child_process');
                    const { stdout } = await new Promise((resolve) => {
                        exec(`ps -p ${worker.pid} -o rss=`, (error, stdout) => {
                            resolve({ stdout: stdout || '0' });
                        });
                    });
                    
                    const memoryKB = parseInt(stdout.trim()) || 0;
                    const memoryBytes = memoryKB * 1024;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    const stats = this.workerStats.get(botId);
                    if (stats) {
                        stats.memoryUsage = { rss: memoryBytes };
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                    if (memoryBytes > this.config.maxMemoryPerWorker) {
                        const memoryMB = Math.round(memoryBytes / 1024 / 1024);
                        const limitMB = Math.round(this.config.maxMemoryPerWorker / 1024 / 1024);
                        
                        memoryErrors.push({
                            botId,
                            memoryMB,
                            limitMB
                        });
                        
                        console.log(`üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –±–æ—Ç–æ–º ${botId}: ${memoryMB}MB (–ª–∏–º–∏—Ç: ${limitMB}MB)`);
                        
                        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                        setTimeout(() => {
                            this.restartBotWorker(botId);
                        }, 5000);
                        
                    } else if (memoryBytes > this.config.maxMemoryPerWorker * 0.8) {
                        const memoryMB = Math.round(memoryBytes / 1024 / 1024);
                        memoryWarnings.push({ botId, memoryMB });
                    }
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            }
        }
        
        if (memoryWarnings.length > 0) {
            console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ –ø–∞–º—è—Ç–∏: ${memoryWarnings.length} –≤–æ—Ä–∫–µ—Ä–æ–≤`);
        }
        
        if (memoryErrors.length > 0) {
            console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: ${memoryErrors.length} –≤–æ—Ä–∫–µ—Ä–æ–≤ –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã`);
        }
    }
    
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
     */
    async syncWithDatabase() {
        try {
            const response = await axios.get(`${BACKEND_API_URL}/api/bot-instances-all`);
            const botInstances = response.data;
            const activeBotIds = botInstances.filter(b => b.is_active).map(b => b.id);
            const currentWorkerIds = Array.from(this.workers.keys()).map(id => parseInt(id));
            
            // –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–µ—Å—Ç—å –≤ –≤–æ—Ä–∫–µ—Ä–∞—Ö, –Ω–æ –Ω–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö)
            const botsToStop = currentWorkerIds.filter(id => !activeBotIds.includes(id));
            
            // –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å (–µ—Å—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –Ω–æ –Ω–µ—Ç –≤ –≤–æ—Ä–∫–µ—Ä–∞—Ö)
            const botsToStart = activeBotIds.filter(id => !currentWorkerIds.includes(id));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–æ—Ç–∞—Ö
            const botsToRestart = [];
            for (const botInstance of botInstances.filter(b => b.is_active)) {
                if (this.workers.has(botInstance.id)) {
                    const needsRestart = await this.checkBotChanges(botInstance.id, botInstance);
                    if (needsRestart) {
                        botsToRestart.push(botInstance.id);
                    }
                }
            }
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –±–æ—Ç—ã
            for (const botId of botsToStop) {
                console.log(`üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ ${botId} - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä`);
                await this.stopBotWorker(botId);
                
                // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π
                this.workerStats.delete(botId);
                this.workerLogs.delete(botId);
                this.restartCounters.delete(botId);
                this.lastRestartTimes.delete(botId);
                
                console.log(`‚úÖ –ë–æ—Ç ${botId} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã`);
            }
            
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –±–æ—Ç—ã
            for (const botId of botsToRestart) {
                console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ ${botId} - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º`);
                await this.restartBotWorker(botId);
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –±–æ—Ç—ã
            for (const botId of botsToStart) {
                // üî• –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ò–†–û–í–ö–ò –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú –ù–û–í–û–ì–û –ë–û–¢–ê
                if (this.startingBots.has(botId) || this.workers.has(botId)) {
                    console.log(`‚ö†Ô∏è –ë–æ—Ç ${botId} —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–ª–∏ –∑–∞–ø—É—â–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏`);
                    continue;
                }
                
                const botConfig = botInstances.find(b => b.id === botId && b.is_active);
                if (botConfig) {
                    console.log(`üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –±–æ—Ç ${botId} - –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä`);
                    await this.startBotWorker(botId, botConfig);
                }
            }
            
            if (botsToStop.length > 0 || botsToStart.length > 0 || botsToRestart.length > 0) {
                console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${botsToStop.length}, –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ ${botsToRestart.length}, –∑–∞–ø—É—â–µ–Ω–æ ${botsToStart.length}`);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ë–î:', error.message);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–æ—Ç–µ (–ø—Ä–æ–º–ø—Ç, –º–æ–¥–µ–ª—å, –∏–º—è, —Ç–æ–∫–µ–Ω)
     */
    async checkBotChanges(botId, newBotConfig) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            const assistantResponse = await axios.get(`${BACKEND_API_URL}/api/bot-instances/${botId}/assistant`);
            const newAssistant = assistantResponse.data;
            
            if (!newAssistant) {
                return false;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞
            const workerStats = this.workerStats.get(botId);
            if (!workerStats || !workerStats.lastAssistantData) {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
                this.workerStats.set(botId, {
                    ...workerStats,
                    lastAssistantData: {
                        system_prompt: newAssistant.system_prompt,
                        ai_model: newAssistant.ai_model,
                        name: newAssistant.name,
                        assistant_id: newBotConfig.assistant_id,
                        bot_token: newBotConfig.bot_token
                    }
                });
                return false;
            }
            
            const lastAssistant = workerStats.lastAssistantData;
            
            // üî• –†–ê–ó–î–ï–õ–Ø–ï–ú –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò –ù–ï–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø
            const criticalChanges = (
                lastAssistant.assistant_id !== newBotConfig.assistant_id ||
                lastAssistant.bot_token !== newBotConfig.bot_token
            );
            
            const hotReloadableChanges = (
                lastAssistant.system_prompt !== newAssistant.system_prompt ||
                lastAssistant.ai_model !== newAssistant.ai_model ||
                lastAssistant.name !== newAssistant.name
            );
            
            if (criticalChanges) {
                console.log(`üîÑ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ ${botId} - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫:`);
                if (lastAssistant.bot_token !== newBotConfig.bot_token) {
                    console.log(`  üîë –¢–æ–∫–µ–Ω –∏–∑–º–µ–Ω–µ–Ω`);
                }
                if (lastAssistant.assistant_id !== newBotConfig.assistant_id) {
                    console.log(`  üÜî ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: ${lastAssistant.assistant_id} ‚Üí ${newBotConfig.assistant_id}`);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                this.workerStats.set(botId, {
                    ...workerStats,
                    lastAssistantData: {
                        system_prompt: newAssistant.system_prompt,
                        ai_model: newAssistant.ai_model,
                        name: newAssistant.name,
                        assistant_id: newBotConfig.assistant_id,
                        bot_token: newBotConfig.bot_token
                    }
                });
                
                return true; // –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
                
            } else if (hotReloadableChanges) {
                console.log(`üî• –ì–û–†–Ø–ß–ò–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ ${botId} - –ø—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:`);
                if (lastAssistant.system_prompt !== newAssistant.system_prompt) {
                    console.log(`  üìù –ü—Ä–æ–º–ø—Ç: "${lastAssistant.system_prompt?.substring(0, 50)}..." ‚Üí "${newAssistant.system_prompt?.substring(0, 50)}..."`);
                }
                if (lastAssistant.ai_model !== newAssistant.ai_model) {
                    console.log(`  ü§ñ –ú–æ–¥–µ–ª—å: "${lastAssistant.ai_model}" ‚Üí "${newAssistant.ai_model}"`);
                }
                if (lastAssistant.name !== newAssistant.name) {
                    console.log(`  üè∑Ô∏è  –ò–º—è: "${lastAssistant.name}" ‚Üí "${newAssistant.name}"`);
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–æ—Ä—è—á—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
                const hotReloadSuccess = await this.hotReloadBotSettings(botId);
                
                if (hotReloadSuccess) {
                    console.log(`‚úÖ –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ ${botId}`);
                    return false; // –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
                } else {
                    console.log(`‚ö†Ô∏è –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è –±–æ—Ç–∞ ${botId}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫`);
                    return true; // Fallback –∫ –ø–æ–ª–Ω–æ–º—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
                }
            }
            
            return false; // –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–æ—Ç–∞ ${botId}:`, error.message);
            return false;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
     */
    checkStaleWorkers() {
        const now = Date.now();
        const staleTimeout = this.config.heartbeatInterval * 3; // 3 –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö heartbeat
        
        // üî• –ó–ê–©–ò–¢–ê –û–¢ –ö–ê–°–ö–ê–î–ù–´–• –°–ë–û–ï–í
        const failedWorkers = [];
        const recentRestarts = [];
        
        for (const [botId, stats] of this.workerStats) {
            if (stats.lastHeartbeat && (now - stats.lastHeartbeat) > staleTimeout) {
                failedWorkers.push(botId);
                console.log(`‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä –±–æ—Ç–∞ ${botId} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º`);
                this.restartBotWorker(botId);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
            const restartTime = this.lastRestartTimes.get(botId);
            if (restartTime && (now - restartTime) < 3600000) { // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                recentRestarts.push(botId);
            }
        }
        
        // üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –ó–ê–©–ò–¢–ê - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
        const failureRate = this.workers.size > 0 ? failedWorkers.length / this.workers.size : 0;
        const restartCount = recentRestarts.length;
        const restartRate = this.workers.size > 0 ? restartCount / this.workers.size : 0;
        
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        if (failureRate > this.config.emergencyStopThreshold && this.workers.size >= 3) {
            console.log(`üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: ${Math.round(failureRate * 100)}% –∏–∑ ${this.workers.size} –≤–æ—Ä–∫–µ—Ä–æ–≤ –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç!`);
            this.triggerEmergencyProtocol('HIGH_FAILURE_RATE', { failureRate, failedCount: failedWorkers.length, totalWorkers: this.workers.size });
        }
        
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê HIGH_RESTART_RATE:
        // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –ò –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤
        const shouldTriggerHighRestartRate = (
            (this.workers.size >= 5 && restartRate > 0.6) ||  // –ü—Ä–∏ 5+ –±–æ—Ç–∞—Ö - –±–æ–ª–µ–µ 60% –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
            (this.workers.size >= 2 && restartCount >= 10) ||  // –ü—Ä–∏ 2+ –±–æ—Ç–∞—Ö - –±–æ–ª–µ–µ 10 –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –∑–∞ —á–∞—Å
            (restartCount >= 20)                               // –í—Å–µ–≥–¥–∞ –ø—Ä–∏ 20+ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ö
        );
        
        if (shouldTriggerHighRestartRate) {
            console.log(`üö® –°–õ–ò–®–ö–û–ú –ú–ù–û–ì–û –ü–ï–†–ï–ó–ê–ü–£–°–ö–û–í: ${restartCount} –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –∑–∞ —á–∞—Å (${Math.round(restartRate * 100)}% –∏–∑ ${this.workers.size} –±–æ—Ç–æ–≤)`);
            this.triggerEmergencyProtocol('HIGH_RESTART_RATE', { 
                restartRate, 
                restartCount, 
                totalWorkers: this.workers.size,
                reason: restartCount >= 20 ? 'absolute_count' : (this.workers.size >= 5 ? 'high_percentage' : 'medium_count')
            });
        } else {
            // üî• –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if (restartCount > 0) {
                console.log(`üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: ${restartCount} –∑–∞ —á–∞—Å –∏–∑ ${this.workers.size} –±–æ—Ç–æ–≤ (${Math.round(restartRate * 100)}%) - –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã`);
            }
        }
    }
    
    /**
     * üö® –ê–í–ê–†–ò–ô–ù–´–ô –ü–†–û–¢–û–ö–û–õ
     */
    async triggerEmergencyProtocol(reason, data) {
        console.log(`üö® –ê–ö–¢–ò–í–ê–¶–ò–Ø –ê–í–ê–†–ò–ô–ù–û–ì–û –ü–†–û–¢–û–ö–û–õ–ê: ${reason}`);
        console.log(`üìä –î–∞–Ω–Ω—ã–µ:`, data);
        
        switch (reason) {
            case 'HIGH_FAILURE_RATE':
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
                console.log(`üõë –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤...`);
                
                const stopPromises = Array.from(this.workers.keys()).map(botId => 
                    this.stopBotWorker(botId)
                );
                await Promise.all(stopPromises);
                
                // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
                await new Promise(resolve => setTimeout(resolve, 30000));
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º—É
                console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...`);
                await this.loadBotsFromDB();
                break;
                
            case 'HIGH_RESTART_RATE':
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                console.log(`‚è±Ô∏è –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...`);
                this.config.cooldownPeriod *= 2;
                this.config.heartbeatInterval *= 1.5;
                
                // –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
                setTimeout(() => {
                    this.config.cooldownPeriod = 45000;
                    this.config.heartbeatInterval = 45000;
                    console.log(`‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π`);
                }, 30 * 60 * 1000);
                break;
        }
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
        this.notifyAdmin(`üö® –ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: ${reason}`, data);
    }
    
    /**
     * üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    async notifyAdmin(message, data) {
        try {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email, Slack, Telegram –∏ —Ç.–¥.
            console.log(`üìß –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ê: ${message}`);
            
            // –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            const fs = require('fs');
            const alertData = {
                timestamp: new Date().toISOString(),
                message,
                data,
                systemStats: this.getAllStats()
            };
            
            fs.appendFileSync('logs/emergency.log', JSON.stringify(alertData) + '\n');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error.message);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
     */
    getAllStats() {
        const stats = {
            totalWorkers: this.workers.size,
            maxWorkers: this.config.maxTotalWorkers,
            totalRestarts: Array.from(this.restartCounters.values()).reduce((a, b) => a + b, 0),
            workers: {}
        };
        
        for (const [botId, workerStats] of this.workerStats) {
            const worker = this.workers.get(botId);
            stats.workers[botId] = {
                ...workerStats,
                isActive: worker && !worker.killed,
                pid: worker?.pid,
                memoryUsage: worker?.memoryUsage?.() || null
            };
        }
        
        return stats;
    }
    
    /**
     * API —Å–µ—Ä–≤–µ—Ä
     */
    startAPI() {
        const app = express();
        app.use(express.json());
        app.use(cors());
        
        // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π)
        app.get('/status', (req, res) => {
            const stats = this.getAllStats();
            const status = {
                totalBots: stats.totalWorkers,
                bots: []
            };
            
            for (const [botId, workerStats] of Object.entries(stats.workers)) {
                if (workerStats.isActive) {
                    status.bots.push({
                        id: parseInt(botId),
                        type: 'telegram',
                        assistant: workerStats.assistantName || 'Unknown',
                        platform: 'telegram',
                        active: true,
                        pid: workerStats.pid
                    });
                }
            }
            
            res.json(status);
        });
        
        // –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
        app.get('/workers', (req, res) => {
            res.json(this.getAllStats());
        });

        // üìä ENDPOINT –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ë–û–¢–û–í (/metrics)
        app.get('/metrics', async (req, res) => {
            try {
                const stats = this.getAllStats();
                const botInstances = [];
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–∞—Ö –∏–∑ –ë–î
                try {
                    const response = await axios.get(`${BACKEND_API_URL}/api/bot-instances-all`);
                    const dbBots = response.data;
                    
                    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–æ—Ç–∞—Ö –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    for (const dbBot of dbBots) {
                        const workerStats = this.workerStats.get(dbBot.id);
                        const worker = this.workers.get(dbBot.id);
                        const restartCount = this.restartCounters.get(dbBot.id) || 0;
                        const lastRestart = this.lastRestartTimes.get(dbBot.id);
                        
                        botInstances.push({
                            botId: dbBot.id,
                            assistantName: dbBot.assistant_name || 'Unknown',
                            platform: dbBot.platform || 'telegram',
                            isActive: dbBot.is_active && worker && !worker.killed,
                            uptime: workerStats ? (Date.now() - workerStats.startTime) / 1000 : 0,
                            restarts: restartCount,
                            errors: workerStats ? workerStats.errors : 0,
                            aiRequests: workerStats ? workerStats.aiRequests : 0,
                            lastErrors: workerStats ? (workerStats.lastErrors || []) : []
                        });
                    }
                } catch (dbError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±–æ—Ç–∞—Ö –∏–∑ –ë–î:', dbError.message);
                }
                
                const metricsResponse = {
                    success: true,
                    timestamp: Date.now(),
                    totals: {
                        activeBots: stats.totalWorkers,
                        totalRestarts: stats.totalRestarts,
                        totalErrors: Array.from(this.workerStats.values()).reduce((sum, stat) => sum + (stat.errors || 0), 0),
                        totalAiRequests: Array.from(this.workerStats.values()).reduce((sum, stat) => sum + (stat.aiRequests || 0), 0)
                    },
                    bots: botInstances,
                    systemInfo: {
                        uptime: Date.now() - this.startTime,
                        maxWorkers: this.config.maxTotalWorkers,
                        memoryUsage: process.memoryUsage()
                    }
                };
                
                res.json(metricsResponse);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:', error.message);
                res.status(500).json({ 
                    success: false,
                    error: error.message,
                    timestamp: Date.now()
                });
            }
        });
        
        // –°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
        app.get('/workers/:botId', (req, res) => {
            const botId = parseInt(req.params.botId);
            const stats = this.workerStats.get(botId);
            const worker = this.workers.get(botId);
            
            if (!stats) {
                return res.status(404).json({ error: 'Worker not found' });
            }
            
            res.json({
                ...stats,
                isActive: worker && !worker.killed,
                pid: worker?.pid
            });
        });
        
        // –õ–æ–≥–∏ –≤–æ—Ä–∫–µ—Ä–∞
        app.get('/workers/:botId/logs', (req, res) => {
            const botId = parseInt(req.params.botId);
            const logs = this.workerLogs.get(botId) || [];
            
            res.json({
                botId: botId,
                logs: logs.slice(-100) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ª–æ–≥–æ–≤
            });
        });
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
        app.post('/workers/:botId/restart', async (req, res) => {
            const botId = parseInt(req.params.botId);
            
            try {
                await this.restartBotWorker(botId);
                res.json({ success: true, message: `Worker ${botId} restarted` });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
        app.post('/workers/:botId/stop', async (req, res) => {
            const botId = parseInt(req.params.botId);
            
            try {
                await this.stopBotWorker(botId);
                res.json({ success: true, message: `Worker ${botId} stopped` });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });
        
        // –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        app.post('/workers/restart-all', async (req, res) => {
            try {
                const botIds = Array.from(this.workers.keys());
                
                for (const botId of botIds) {
                    await this.restartBotWorker(botId);
                }
                
                res.json({ 
                    success: true, 
                    message: `Restarted ${botIds.length} workers`,
                    restarted: botIds
                });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });

        // üîÑ ENDPOINT –î–õ–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò –ë–û–¢–û–í (/reload-bots)
        app.post('/reload-bots', async (req, res) => {
            try {
                const { bot_ids, assistant_id, user_id } = req.body;
                
                if (!bot_ids || !Array.isArray(bot_ids)) {
                    return res.status(400).json({ 
                        success: false,
                        error: 'bot_ids array is required' 
                    });
                }
                
                console.log(`üîÑ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –ë–û–¢–û–í: ${bot_ids} (–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: ${assistant_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user_id})`);
                
                const results = [];
                let successCount = 0;
                
                for (const botId of bot_ids) {
                    try {
                        await this.restartBotWorker(botId);
                        results.push({
                            botId: botId,
                            success: true,
                            message: `Bot ${botId} restarted successfully`,
                            restartCount: this.restartCounters.get(botId) || 0
                        });
                        successCount++;
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ ${botId}:`, error.message);
                        results.push({
                            botId: botId,
                            success: false,
                            error: error.message
                        });
                    }
                }
                
                const message = `–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ ${successCount} –∏–∑ ${bot_ids.length} –±–æ—Ç–æ–≤`;
                
                res.json({
                    success: successCount > 0,
                    message: message,
                    results: results,
                    improvements: [
                        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏",
                        "–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞",
                        "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
                    ]
                });
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ API –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤:', error.message);
                res.status(500).json({ 
                    success: false,
                    error: error.message 
                });
            }
        });
        
        // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
        app.post('/workers/cleanup', async (req, res) => {
            try {
                const response = await axios.get(`${BACKEND_API_URL}/api/bot-instances-all`);
                const activeBotIds = response.data.filter(b => b.is_active).map(b => b.id);
                
                await this.cleanupInactiveWorkers(activeBotIds);
                
                res.json({ 
                    success: true, 
                    message: 'Cleanup completed',
                    activeBotIds: activeBotIds
                });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ë–î
        app.post('/workers/sync', async (req, res) => {
            try {
                await this.syncWithDatabase();
                
                res.json({ 
                    success: true, 
                    message: 'Database sync completed',
                    currentWorkers: this.workers.size
                });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });
        
        // üî• –ù–û–í–´–ï ENDPOINTS –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–û–¶–ï–°–°–û–í
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
        app.get('/workers/processes', async (req, res) => {
            try {
                const processInfo = {};
                
                for (const [botId, worker] of this.workers) {
                    const runningPids = await this.getBotProcesses(botId);
                    const tracker = this.processTracker.get(botId);
                    
                    processInfo[botId] = {
                        registered: {
                            pid: worker.pid,
                            killed: worker.killed
                        },
                        running: {
                            pids: runningPids,
                            count: runningPids.length
                        },
                        tracker: tracker ? {
                            lastScan: tracker.lastScan,
                            restartInProgress: tracker.restartInProgress,
                            trackedPids: Array.from(tracker.pids)
                        } : null,
                        status: this.getProcessStatus(botId, worker, runningPids)
                    };
                }
                
                res.json({
                    success: true,
                    timestamp: Date.now(),
                    processes: processInfo,
                    summary: {
                        totalRegistered: this.workers.size,
                        restartQueue: this.restartQueue.size,
                        killingProcesses: this.killingProcesses.size
                    }
                });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });
        
        // üßπ –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê –ë–û–¢–û–í
        app.post('/clear-bot-cache', async (req, res) => {
            try {
                const { bot_ids, assistant_id } = req.body;
                
                if (!bot_ids || !Array.isArray(bot_ids)) {
                    return res.status(400).json({ error: 'bot_ids array is required' });
                }
                
                console.log(`üßπ –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê –¥–ª—è –±–æ—Ç–æ–≤: ${bot_ids} (–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: ${assistant_id})`);
                
                let clearedCount = 0;
                let errors = [];
                
                for (const botId of bot_ids) {
                    try {
                        // –û—á–∏—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                        const workerStats = this.workerStats.get(botId);
                        if (workerStats && workerStats.lastAssistantData) {
                            // –ü–æ–º–µ—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ
                            workerStats.lastAssistantData = null;
                            workerStats.lastCacheUpdate = Date.now();
                            
                            this.workerStats.set(botId, workerStats);
                            console.log(`üßπ –ö—ç—à –æ—á–∏—â–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${botId}`);
                            clearedCount++;
                        }
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –¥–ª—è –±–æ—Ç–∞ ${botId}:`, error.message);
                        errors.push({ botId, error: error.message });
                    }
                }
                
                res.json({ 
                    success: true, 
                    message: `Cache cleared for ${clearedCount} bots`,
                    clearedCount,
                    errors: errors.length > 0 ? errors : undefined
                });
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error.message);
                res.status(500).json({ error: error.message });
            }
        });
        
        // üî• –ì–û–†–Ø–ß–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –ë–û–¢–û–í
        app.post('/hot-reload-bots', async (req, res) => {
            try {
                const { bot_ids, assistant_id, force_reload } = req.body;
                
                if (!bot_ids || !Array.isArray(bot_ids)) {
                    return res.status(400).json({ error: 'bot_ids array is required' });
                }
                
                console.log(`üî• –ì–û–†–Ø–ß–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –±–æ—Ç–æ–≤: ${bot_ids} (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: ${force_reload})`);
                
                let reloadedCount = 0;
                let errors = [];
                
                for (const botId of bot_ids) {
                    try {
                        const success = await this.hotReloadBotSettings(botId);
                        if (success) {
                            reloadedCount++;
                            console.log(`‚úÖ –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –±–æ—Ç—É ${botId}`);
                        } else {
                            throw new Error('Hot reload failed');
                        }
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ ${botId}:`, error.message);
                        errors.push({ botId, error: error.message });
                        
                        // –ï—Å–ª–∏ force_reload = true, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                        if (force_reload) {
                            this.queueRestart(botId, 'hot_reload_failed');
                        }
                    }
                }
                
                res.json({ 
                    success: true, 
                    message: `Hot reload applied to ${reloadedCount} bots`,
                    reloadedCount,
                    errors: errors.length > 0 ? errors : undefined
                });
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', error.message);
                res.status(500).json({ error: error.message });
            }
        });
        
        // üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –ë–û–¢–ê
        app.post('/force-restart-bot', async (req, res) => {
            try {
                const { bot_id, reason } = req.body;
                
                if (!bot_id) {
                    return res.status(400).json({ error: 'bot_id is required' });
                }
                
                console.log(`üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –±–æ—Ç–∞ ${bot_id} (–ø—Ä–∏—á–∏–Ω–∞: ${reason || 'manual'})`);
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
                if (this.workers.has(bot_id)) {
                    await this.stopBotWorker(bot_id);
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                await this.forceKillBotProcesses(bot_id);
                
                // –û—á–∏—â–∞–µ–º –∫—ç—à
                const workerStats = this.workerStats.get(bot_id);
                if (workerStats) {
                    workerStats.lastAssistantData = null;
                    workerStats.lastCacheUpdate = Date.now();
                    this.workerStats.set(bot_id, workerStats);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                this.queueRestart(bot_id, reason || 'force_restart');
                
                res.json({ 
                    success: true, 
                    message: `Force restart queued for bot ${bot_id}`,
                    reason: reason || 'force_restart'
                });
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', error.message);
                res.status(500).json({ error: error.message });
            }
        });

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ö
        app.get('/workers/restarts', (req, res) => {
            try {
                const restartInfo = {};
                
                for (const [botId, count] of this.restartCounters) {
                    const lastRestart = this.lastRestartTimes.get(botId);
                    const inQueue = this.restartQueue.has(botId);
                    const tracker = this.processTracker.get(botId);
                    
                    restartInfo[botId] = {
                        count: count,
                        lastRestart: lastRestart,
                        timeSinceLastRestart: lastRestart ? Date.now() - lastRestart : null,
                        inQueue: inQueue,
                        queueData: inQueue ? this.restartQueue.get(botId) : null,
                        restartInProgress: tracker ? tracker.restartInProgress : false
                    };
                }
                
                res.json({
                    success: true,
                    timestamp: Date.now(),
                    restarts: restartInfo,
                    queue: Array.from(this.restartQueue.entries()).map(([botId, data]) => ({
                        botId,
                        ...data
                    }))
                });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        app.post('/workers/scan', async (req, res) => {
            try {
                console.log(`üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ API –∑–∞–ø—Ä–æ—Å—É`);
                await this.scanAllBotProcesses();
                
                res.json({ 
                    success: true, 
                    message: 'Process scan completed',
                    timestamp: Date.now()
                });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –±–æ—Ç–µ
        app.get('/workers/:botId/detailed', async (req, res) => {
            try {
                const botId = parseInt(req.params.botId);
                const worker = this.workers.get(botId);
                const stats = this.workerStats.get(botId);
                const runningPids = await this.getBotProcesses(botId);
                const tracker = this.processTracker.get(botId);
                const restartCount = this.restartCounters.get(botId) || 0;
                const lastRestart = this.lastRestartTimes.get(botId);
                
                if (!worker && runningPids.length === 0) {
                    return res.status(404).json({ error: 'Bot not found' });
                }
                
                res.json({
                    botId: botId,
                    worker: worker ? {
                        pid: worker.pid,
                        killed: worker.killed,
                        connected: worker.connected
                    } : null,
                    stats: stats,
                    processes: {
                        running: runningPids,
                        count: runningPids.length,
                        status: this.getProcessStatus(botId, worker, runningPids)
                    },
                    tracker: tracker,
                    restarts: {
                        count: restartCount,
                        lastRestart: lastRestart,
                        timeSinceLastRestart: lastRestart ? Date.now() - lastRestart : null,
                        inQueue: this.restartQueue.has(botId)
                    },
                    timestamp: Date.now()
                });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });
        
        // üî• –ì–û–†–Ø–ß–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö –ë–û–¢–û–í
        app.post('/hot-reload-bots', async (req, res) => {
            try {
                const { bot_ids, assistant_id } = req.body;
                
                if (!bot_ids || !Array.isArray(bot_ids)) {
                    return res.status(400).json({ error: 'bot_ids must be an array' });
                }
                
                console.log(`üî• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–æ—Ä—è—á—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –±–æ—Ç–æ–≤: ${bot_ids.join(', ')}`);
                
                const results = [];
                let reloadedCount = 0;
                
                for (const botId of bot_ids) {
                    try {
                        const success = await this.hotReloadBotSettings(botId);
                        
                        if (success) {
                            reloadedCount++;
                            results.push({ 
                                botId, 
                                success: true,
                                message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä—è—á–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã'
                            });
                            console.log(`‚úÖ –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ ${botId} —É—Å–ø–µ—à–Ω–∞`);
                        } else {
                            results.push({ 
                                botId, 
                                success: false, 
                                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥–æ—Ä—è—á—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É'
                            });
                        }
                        
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ ${botId}:`, error.message);
                        results.push({ 
                            botId, 
                            success: false, 
                            error: error.message
                        });
                    }
                }
                
                const message = `üî• –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: ${reloadedCount} –∏–∑ ${bot_ids.length} –±–æ—Ç–æ–≤`;
                console.log(`üìä ${message}`);
                
                res.json({
                    success: reloadedCount > 0,
                    message: message,
                    reloadedCount: reloadedCount,
                    totalCount: bot_ids.length,
                    results: results
                });
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ API –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', error.message);
                res.status(500).json({ 
                    error: error.message,
                    success: false
                });
            }
        });
        
        // üåê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê POLLING/WEBHOOK
        app.post('/switch-mode', async (req, res) => {
            try {
                const { mode } = req.body;
                
                if (!mode || !['polling', 'webhook'].includes(mode)) {
                    return res.status(400).json({ 
                        error: 'Invalid mode. Must be "polling" or "webhook"' 
                    });
                }
                
                const currentMode = webhookConfig.config.MODE;
                
                if (currentMode === mode) {
                    return res.json({
                        message: `–°–∏—Å—Ç–µ–º–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ ${mode}`,
                        currentMode: currentMode,
                        success: true
                    });
                }
                
                console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞: ${currentMode} ‚Üí ${mode}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                webhookConfig.config.MODE = mode;
                
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ webhook - –∑–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
                if (mode === 'webhook' && !this.webhookServer) {
                    this.webhookServer = new WebhookServer();
                    await this.webhookServer.start();
                }
                
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Å webhook - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
                if (mode === 'polling' && this.webhookServer) {
                    await this.webhookServer.stop();
                    this.webhookServer = null;
                }
                
                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –≤ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                const activeBots = Array.from(this.workers.keys());
                console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ${activeBots.length} –±–æ—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ ${mode}`);
                
                let restarted = 0;
                for (const botId of activeBots) {
                    try {
                        await this.restartBotWorker(botId);
                        restarted++;
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${botId}:`, error.message);
                    }
                }
                
                res.json({
                    message: `‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–µ–∂–∏–º ${mode}`,
                    previousMode: currentMode,
                    currentMode: mode,
                    activeBots: activeBots.length,
                    restarted: restarted,
                    webhookServerActive: mode === 'webhook' && this.webhookServer !== null,
                    success: true
                });
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞:', error.message);
                res.status(500).json({ 
                    error: error.message,
                    success: false 
                });
            }
        });
        
        // üåê –°–¢–ê–¢–£–° WEBHOOK/POLLING –†–ï–ñ–ò–ú–ê
        app.get('/mode-status', (req, res) => {
            res.json({
                currentMode: webhookConfig.config.MODE,
                webhookConfig: webhookConfig.config.WEBHOOK,
                isWebhookMode: webhookConfig.isWebhookMode(),
                isPollingMode: webhookConfig.isPollingMode(),
                webhookServerActive: this.webhookServer !== null,
                activeBots: this.workers.size,
                uptime: Date.now() - this.startTime
            });
        });
        
        app.listen(3002, () => {
            console.log('üåê Scalable Bot Manager API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3002');
        });

        // üë§ –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –í TELEGRAM
        app.post('/send-operator-message', async (req, res) => {
            try {
                const { telegram_chat_id, text } = req.body;
                
                if (!telegram_chat_id || !text) {
                    return res.status(400).json({ 
                        error: 'telegram_chat_id –∏ text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
                    });
                }

                console.log(`üë§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram —á–∞—Ç ${telegram_chat_id}: ${text.substring(0, 100)}...`);
                
                const axios = require('axios');
                
                // –ó–∞–ø—Ä–æ—Å –∫ FastAPI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è bot_id –ø–æ telegram_chat_id
                console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è Telegram —á–∞—Ç–∞ ${telegram_chat_id}`);
                const apiUrl = `${BACKEND_API_URL}/api/dialogs/by-telegram-chat/${telegram_chat_id}`;
                console.log(`üîç URL –∑–∞–ø—Ä–æ—Å–∞: ${apiUrl}`);
                
                let fastApiResponse;
                try {
                    const startTime = Date.now();
                    fastApiResponse = await axios.get(apiUrl, {
                        timeout: 15000, // 15 —Å–µ–∫—É–Ω–¥ - –≤—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        maxRedirects: 0,
                        headers: {
                            'Content-Type': 'application/json',
                            'Connection': 'close'
                        }
                    });
                    const endTime = Date.now();
                    console.log(`‚úÖ –î–∏–∞–ª–æ–≥ –Ω–∞–π–¥–µ–Ω –¥–ª—è —á–∞—Ç–∞ ${telegram_chat_id} –∑–∞ ${endTime - startTime}ms, assistant_id: ${fastApiResponse.data?.assistant_id}`);
                } catch (dialogError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —á–∞—Ç–∞ ${telegram_chat_id}:`, dialogError.message);
                    console.error(`‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, {
                        code: dialogError.code,
                        errno: dialogError.errno,
                        syscall: dialogError.syscall,
                        address: dialogError.address,
                        port: dialogError.port,
                        config: dialogError.config ? {
                            url: dialogError.config.url,
                            method: dialogError.config.method,
                            timeout: dialogError.config.timeout
                        } : 'no config'
                    });
                    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: ${dialogError.message}`);
                }
                
                if (!fastApiResponse.data) {
                    return res.status(404).json({ 
                        error: `–î–∏–∞–ª–æ–≥ –¥–ª—è Telegram —á–∞—Ç–∞ ${telegram_chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω` 
                    });
                }
                
                const assistant_id = fastApiResponse.data.assistant_id;
                let bot_id = null;
                
                // –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –∏–º–µ–µ—Ç assistant_id, –∏—â–µ–º bot instance –ø–æ –Ω–µ–º—É
                if (assistant_id) {
                    console.log(`ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ bot instance –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ${assistant_id}`);
                    let botInstanceResponse;
                    try {
                        botInstanceResponse = await axios.get(`${BACKEND_API_URL}/api/bot-instances/by-assistant/${assistant_id}`, {
                            timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ - –≤—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        });
                        console.log(`‚úÖ Bot instance –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ${assistant_id}, bot_id: ${botInstanceResponse.data?.id}`);
                        
                        if (botInstanceResponse.data && botInstanceResponse.data.id) {
                            bot_id = botInstanceResponse.data.id;
                        }
                    } catch (botError) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è bot instance –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ${assistant_id}:`, botError.message);
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ assistant_id, –∏—â–µ–º –ª—é–±–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                if (!bot_id) {
                    console.log(`üîç Assistant_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ bot instance –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—â–µ–º –ª—é–±–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ ${telegram_chat_id}`);
                    
                    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ—Ç–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
                    const activeWorkers = Array.from(this.workers.keys());
                    if (activeWorkers.length > 0) {
                        bot_id = activeWorkers[0];
                        console.log(`ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ—Ç–∞ —Å ID: ${bot_id}`);
                    } else {
                        return res.status(404).json({ 
                            error: `–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${telegram_chat_id}` 
                        });
                    }
                }
                
                // –ù–∞—Ö–æ–¥–∏–º worker –¥–ª—è —ç—Ç–æ–≥–æ bot_id
                const worker = this.workers.get(bot_id);
                if (!worker) {
                    return res.status(404).json({ 
                        error: `Worker –¥–ª—è –±–æ—Ç–∞ ${bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω` 
                    });
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É worker'—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                worker.send({
                    command: 'send_operator_message',
                    data: {
                        telegram_chat_id: telegram_chat_id,
                        text: text
                    }
                });
                
                console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ worker'—É –±–æ—Ç–∞ ${bot_id}`);
                
                res.json({ 
                    success: true, 
                    message: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${telegram_chat_id}`,
                    bot_id: bot_id
                });
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', error.message);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ—à–∏–±–∫–∏
                let detailedError = error.message;
                if (error.code === 'ECONNABORTED') {
                    detailedError = `timeout of ${error.config?.timeout || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}ms exceeded`;
                } else if (error.response) {
                    detailedError = `HTTP ${error.response.status}: ${error.response.statusText}`;
                } else if (error.code === 'ECONNREFUSED') {
                    detailedError = 'Connection refused - FastAPI —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                }
                
                res.status(500).json({ error: detailedError });
            }
        });

        // üîî –û–¢–ü–†–ê–í–ö–ê –°–ò–°–¢–ï–ú–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø –í TELEGRAM  
        app.post('/send-system-message', async (req, res) => {
            try {
                const { telegram_chat_id, text, system_type, dialog_id } = req.body;
                
                if (!telegram_chat_id || !text) {
                    return res.status(400).json({ 
                        error: 'telegram_chat_id –∏ text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' 
                    });
                }

                console.log(`üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (${system_type}) –≤ Telegram —á–∞—Ç ${telegram_chat_id}: ${text}`);

                // –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞ –ø–æ telegram_chat_id —á–µ—Ä–µ–∑ FastAPI
                const dialogResponse = await axios.get(`${BACKEND_API_URL}/api/dialogs/by-telegram-chat/${telegram_chat_id}`, {
                    timeout: 5000
                });

                if (!dialogResponse.data || !dialogResponse.data.bot_id) {
                    console.log(`‚ö†Ô∏è –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Telegram —á–∞—Ç–∞ ${telegram_chat_id}`);
                    return res.status(404).json({ 
                        error: `–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Telegram —á–∞—Ç–∞ ${telegram_chat_id}` 
                    });
                }

                const bot_id = dialogResponse.data.bot_id;
                const worker = this.workers.get(bot_id);

                if (!worker) {
                    console.log(`‚ö†Ô∏è Worker –¥–ª—è –±–æ—Ç–∞ ${bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    return res.status(404).json({ 
                        error: `Worker –¥–ª—è –±–æ—Ç–∞ ${bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω` 
                    });
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É worker'—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                worker.send({
                    command: 'send_system_message',
                    data: {
                        telegram_chat_id: telegram_chat_id,
                        text: text,
                        system_type: system_type,
                        dialog_id: dialog_id
                    }
                });
                
                console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ worker'—É –±–æ—Ç–∞ ${bot_id}`);
                
                res.json({ 
                    success: true, 
                    message: `–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${telegram_chat_id}`,
                    bot_id: bot_id,
                    system_type: system_type
                });
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
                res.status(500).json({ error: error.message });
            }
        });
        
        // –Ø–î–ï–†–ù–ê–Ø –û–ü–¶–ò–Ø: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        app.post('/nuclear-cleanup', async (req, res) => {
            try {
                console.log(`‚ò¢Ô∏è –ó–ê–ü–†–û–° –Ø–î–ï–†–ù–û–ô –û–ß–ò–°–¢–ö–ò –æ—Ç ${req.ip}`);
                await this.nuclearCleanup();
                res.json({ 
                    success: true, 
                    message: '‚ò¢Ô∏è –Ø–î–ï–†–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê'
                });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });
    }
    
    /**
     * üìä –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ü–†–û–¶–ï–°–°–ê
     */
    getProcessStatus(botId, worker, runningPids) {
        if (!worker && runningPids.length === 0) {
            return 'NOT_FOUND';
        } else if (!worker && runningPids.length > 0) {
            return 'ORPHAN_PROCESSES';
        } else if (worker && runningPids.length === 0) {
            return 'MISSING_PROCESS';
        } else if (worker && runningPids.length === 1 && runningPids[0] === worker.pid) {
            return 'HEALTHY';
        } else if (worker && runningPids.length === 1 && runningPids[0] !== worker.pid) {
            return 'PID_MISMATCH';
        } else if (worker && runningPids.length > 1) {
            return 'DUPLICATE_PROCESSES';
        } else {
            return 'UNKNOWN';
        }
    }
    
    /**
     * –Ø–î–ï–†–ù–ê–Ø –û–ü–¶–ò–Ø: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
     */
    async nuclearCleanup() {
        console.log(`‚ò¢Ô∏è –Ø–î–ï–†–ù–ê–Ø –û–ß–ò–°–¢–ö–ê: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –í–°–ï–• –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã`);
        
        try {
            const { exec } = require('child_process');
            
            // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –í–°–ï–• —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            const killCommands = [
                `pkill -f "bot_worker"`,
                `pkill -f "scalable_bot_manager"`,
                `pkill -f "multi_bot_manager"`,
                `pkill -f "telegram_bot"`,
                `ps aux | grep "node.*bot" | grep -v grep | awk '{print $2}' | xargs -r kill -9`,
                `ps aux | grep "BOT_ID=" | grep -v grep | awk '{print $2}' | xargs -r kill -9`,
                `ps aux | grep "worker" | grep -v grep | awk '{print $2}' | xargs -r kill -9`
            ];
            
            for (const command of killCommands) {
                try {
                    console.log(`‚ò¢Ô∏è –í—ã–ø–æ–ª–Ω—è—é: ${command}`);
                    await new Promise((resolve) => {
                        exec(command, (error, stdout, stderr) => {
                            if (stdout) console.log(`üì§ ${stdout}`);
                            if (stderr) console.log(`‚ö†Ô∏è ${stderr}`);
                            resolve();
                        });
                    });
                    await new Promise(resolve => setTimeout(resolve, 1000));
                } catch (cmdError) {
                    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã "${command}": ${cmdError.message}`);
                }
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            if (global.gc) {
                console.log(`üóëÔ∏è –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞`);
                global.gc();
            }
            
            console.log(`‚ò¢Ô∏è –Ø–î–ï–†–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê`);
            
        } catch (error) {
            console.error(`‚ò¢Ô∏è –û—à–∏–±–∫–∞ —è–¥–µ—Ä–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
        }
    }
    
    /**
     * üî• –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–û–ú–ë–ò-–ü–†–û–¶–ï–°–°–û–í
     */
    async cleanupZombieProcesses() {
        try {
            console.log(`üßπ –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–û–ú–ë–ò-–ü–†–û–¶–ï–°–°–û–í...`);
            
            const { exec } = require('child_process');
            const commands = [
                `ps aux | grep "telegram/bot_worker.js" | grep -v grep`,
                `ps aux | grep "node.*bot_worker" | grep -v grep`
            ];
            
            const zombiePids = new Set();
            
            for (const command of commands) {
                try {
                    const { stdout } = await new Promise((resolve) => {
                        exec(command, (error, stdout, stderr) => {
                            resolve({ stdout: stdout || '' });
                        });
                    });
                    
                    const lines = stdout.split('\n').filter(line => line.trim());
                    for (const line of lines) {
                        const parts = line.trim().split(/\s+/);
                        if (parts.length > 1) {
                            const pid = parseInt(parts[1]);
                            if (pid && !isNaN(pid) && pid !== process.pid) {
                                zombiePids.add(pid);
                                console.log(`üßü –ù–∞–π–¥–µ–Ω –∑–æ–º–±–∏-–ø—Ä–æ—Ü–µ—Å—Å: PID ${pid}`);
                            }
                        }
                    }
                } catch (cmdError) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
                }
            }
            
            // –£–±–∏–≤–∞–µ–º –≤—Å–µ—Ö –∑–æ–º–±–∏
            if (zombiePids.size > 0) {
                console.log(`üíÄ –£–±–∏–≤–∞–µ–º ${zombiePids.size} –∑–æ–º–±–∏-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤: [${Array.from(zombiePids).join(', ')}]`);
                
                for (const pid of zombiePids) {
                    try {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                        process.kill(pid, 0);
                        
                        // üî• –°–†–ê–ó–£ SIGKILL –¢–û–õ–¨–ö–û –î–õ–Ø –≠–¢–û–ì–û –ë–û–¢–ê
                        console.log(`üéØ SIGKILL –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ ${pid} (–±–æ—Ç ${botId})`);
                        process.kill(pid, 'SIGKILL');
                        
                        // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                        await new Promise(resolve => setTimeout(resolve, 1000));
                        
                    } catch (killError) {
                        if (killError.code !== 'ESRCH') {
                            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–±–∏–π—Å—Ç–≤–∞ –∑–æ–º–±–∏ ${pid}: ${killError.message}`);
                        }
                    }
                }
                
                // –ü–∞—É–∑–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
                await new Promise(resolve => setTimeout(resolve, 3000));
                console.log(`‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–æ–º–±–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            } else {
                console.log(`‚úÖ –ó–æ–º–±–∏-–ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∑–æ–º–±–∏:`, error.message);
        }
    }
    
    /**
     * üî• –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ü–†–û–¶–ï–°–°–û–í
     */
    startProcessTracking() {
        console.log(`üîç –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...`);
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        setInterval(() => {
            this.scanAllBotProcesses();
        }, this.config.processCheckInterval);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
        setInterval(() => {
            this.processRestartQueue();
        }, 5000);
        
        console.log(`‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞`);
    }
    
    /**
     * üîç –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ü–†–û–¶–ï–°–°–û–í –ë–û–¢–û–í
     */
    async scanAllBotProcesses() {
        try {
            console.log(`üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–æ–≤...`);
            
            const { exec } = require('child_process');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã bot_worker
            const { stdout } = await new Promise((resolve) => {
                exec(`ps aux | grep "bot_worker.js" | grep -v grep`, (error, stdout) => {
                    resolve({ stdout: stdout || '' });
                });
            });
            
            const runningProcesses = new Map(); // botId -> [pids]
            const lines = stdout.split('\n').filter(line => line.trim());
            
            for (const line of lines) {
                const parts = line.trim().split(/\s+/);
                if (parts.length > 10) {
                    const pid = parseInt(parts[1]);
                    const fullCommand = parts.slice(10).join(' ');
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º BOT_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    const botIdMatch = fullCommand.match(/BOT_ID=(\d+)/);
                    if (botIdMatch && pid) {
                        const botId = parseInt(botIdMatch[1]);
                        
                        if (!runningProcesses.has(botId)) {
                            runningProcesses.set(botId, []);
                        }
                        runningProcesses.get(botId).push(pid);
                    }
                }
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await this.analyzeProcessScan(runningProcesses);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:`, error.message);
        }
    }
    
    /**
     * üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø
     */
    async analyzeProcessScan(runningProcesses) {
        const now = Date.now();
        const issues = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        for (const [botId, worker] of this.workers) {
            const expectedPid = worker.pid;
            const runningPids = runningProcesses.get(botId) || [];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä
            if (!this.processTracker.has(botId)) {
                this.processTracker.set(botId, {
                    pids: new Set(),
                    lastScan: now,
                    restartInProgress: false
                });
            }
            
            const tracker = this.processTracker.get(botId);
            tracker.pids = new Set(runningPids);
            tracker.lastScan = now;
            
            // üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
            if (runningPids.length === 0) {
                // üî• –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                const processExists = await this.checkProcessExists(expectedPid);
                const isWorkerConnected = !worker.killed && worker.connected;
                
                if (!processExists && !isWorkerConnected) {
                    // –ü—Ä–æ—Ü–µ—Å—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    issues.push({
                        type: 'MISSING_PROCESS',
                        botId,
                        expectedPid,
                        message: `‚ùå –ë–æ—Ç ${botId} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –ø—Ä–æ—Ü–µ—Å—Å ${expectedPid} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –≤–æ—Ä–∫–µ—Ä –æ—Ç–∫–ª—é—á—ë–Ω`
                    });
                } else if (processExists && isWorkerConnected) {
                    // –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ grep - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    console.log(`‚úÖ –ë–æ—Ç ${botId}: –ø—Ä–æ—Ü–µ—Å—Å ${expectedPid} —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ grep –ø–æ BOT_ID, –Ω–æ –Ω–∞–π–¥–µ–Ω –ø–æ PID - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)`);
                } else if (processExists && !isWorkerConnected) {
                    // –ü—Ä–æ—Ü–µ—Å—Å –µ—Å—Ç—å, –Ω–æ –≤–æ—Ä–∫–µ—Ä –æ—Ç–∫–ª—é—á—ë–Ω - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å IPC
                    console.log(`‚ö†Ô∏è –ë–æ—Ç ${botId}: –ø—Ä–æ—Ü–µ—Å—Å ${expectedPid} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –≤–æ—Ä–∫–µ—Ä –æ—Ç–∫–ª—é—á—ë–Ω - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å IPC`);
                } else {
                    // –ü—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ—Ç, –Ω–æ –≤–æ—Ä–∫–µ—Ä –ø–æ–¥–∫–ª—é—á—ë–Ω - —Å—Ç—Ä–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
                    console.log(`‚ö†Ô∏è –ë–æ—Ç ${botId}: –ø—Ä–æ—Ü–µ—Å—Å ${expectedPid} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –≤–æ—Ä–∫–µ—Ä –ø–æ–¥–∫–ª—é—á—ë–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ`);
                }
                
            } else if (runningPids.length > 1) {
                // –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –ü–†–û–¶–ï–°–°–û–í!
                issues.push({
                    type: 'DUPLICATE_PROCESSES',
                    botId,
                    expectedPid,
                    runningPids,
                    message: `üö® –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï! –ë–æ—Ç ${botId} –∏–º–µ–µ—Ç ${runningPids.length} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: [${runningPids.join(', ')}]`
                });
                
            } else if (runningPids[0] !== expectedPid) {
                // PID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                issues.push({
                    type: 'PID_MISMATCH',
                    botId,
                    expectedPid,
                    actualPid: runningPids[0],
                    message: `‚ö†Ô∏è PID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è –±–æ—Ç–∞ ${botId}: –æ–∂–∏–¥–∞–ª—Å—è ${expectedPid}, –Ω–∞–π–¥–µ–Ω ${runningPids[0]}`
                });
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        for (const [botId, pids] of runningProcesses) {
            if (!this.workers.has(botId)) {
                issues.push({
                    type: 'ORPHAN_PROCESSES',
                    botId,
                    runningPids: pids,
                    message: `üëª –ü—Ä–æ—Ü–µ—Å—Å—ã-—Å–∏—Ä–æ—Ç—ã –¥–ª—è –±–æ—Ç–∞ ${botId}: [${pids.join(', ')}] (–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –º–∞—Å—Ç–µ—Ä–µ)`
                });
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if (issues.length > 0) {
            console.log(`üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${issues.length} –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:`);
            for (const issue of issues) {
                console.log(`   ${issue.message}`);
                await this.handleProcessIssue(issue);
            }
        } else {
            console.log(`‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ ${this.workers.size} –±–æ—Ç–æ–≤)`);
        }
    }
    
    /**
     * üîß –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–ë–õ–ï–ú –° –ü–†–û–¶–ï–°–°–ê–ú–ò
     */
    async handleProcessIssue(issue) {
        const { type, botId, expectedPid, runningPids, actualPid } = issue;
        
        switch (type) {
            case 'DUPLICATE_PROCESSES':
                console.log(`üö® –£–°–¢–†–ê–ù–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –¥–ª—è –±–æ—Ç–∞ ${botId}`);
                
                // –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∫—Ä–æ–º–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ
                for (const pid of runningPids) {
                    if (pid !== expectedPid) {
                        console.log(`üíÄ –£–±–∏–≤–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å ${pid} –¥–ª—è –±–æ—Ç–∞ ${botId}`);
                        await this.forceKillProcess(pid, `duplicate_${botId}`);
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª—Å—è –ª–∏ –æ–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ—Å—Å
                setTimeout(async () => {
                    const stillRunning = await this.checkProcessExists(expectedPid);
                    if (!stillRunning) {
                        console.log(`‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ${expectedPid} –¥–ª—è –±–æ—Ç–∞ ${botId} —Ç–∞–∫–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º`);
                        this.queueRestart(botId, 'after_duplicate_cleanup');
                    }
                }, this.config.duplicateCheckDelay);
                break;
                
            case 'MISSING_PROCESS':
                console.log(`üëª –ü—Ä–æ—Ü–µ—Å—Å –¥–ª—è –±–æ—Ç–∞ ${botId} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
                // üî• –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏,
                // –Ω–æ –æ—á–∏—â–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –¥–∞—ë–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                console.log(`üßπ –û—á–∏—â–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±–æ—Ç–∞ ${botId} - –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                this.updateWorkerStatus(botId, 'crashed');
                
                // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
                this.workers.delete(botId);
                this.processTracker.delete(botId);
                this.startingBots.delete(botId);
                this.startLocks.delete(botId);
                
                // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                console.log(`üìä –ë–æ—Ç ${botId} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π - –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ API`);
                break;
                
            case 'PID_MISMATCH':
                console.log(`üîÑ PID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è –±–æ—Ç–∞ ${botId}, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é`);
                const worker = this.workers.get(botId);
                if (worker) {
                    worker.pid = actualPid;
                    console.log(`‚úÖ PID –¥–ª—è –±–æ—Ç–∞ ${botId} –æ–±–Ω–æ–≤–ª–µ–Ω: ${expectedPid} -> ${actualPid}`);
                }
                break;
                
            case 'ORPHAN_PROCESSES':
                console.log(`üëª –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã-—Å–∏—Ä–æ—Ç—ã –¥–ª—è –±–æ—Ç–∞ ${botId}: [${runningPids.join(', ')}]`);
                for (const pid of runningPids) {
                    await this.forceKillProcess(pid, `orphan_${botId}`);
                }
                break;
        }
    }
    
    /**
     * ‚öîÔ∏è –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –ü–†–û–¶–ï–°–°–ê
     */
    async forceKillProcess(pid, reason) {
        if (this.killingProcesses.has(pid)) {
            console.log(`‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å ${pid} —É–∂–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return;
        }
        
        this.killingProcesses.add(pid);
        console.log(`üíÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ ${pid} (–ø—Ä–∏—á–∏–Ω–∞: ${reason})`);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            process.kill(pid, 0);
            
            // –°–Ω–∞—á–∞–ª–∞ SIGTERM
            console.log(`üì° SIGTERM -> ${pid}`);
            process.kill(pid, 'SIGTERM');
            
            // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            try {
                process.kill(pid, 0);
                // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∂–∏–≤
                console.log(`üíÄ SIGKILL -> ${pid} (–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ SIGTERM)`);
                process.kill(pid, 'SIGKILL');
            } catch (e) {
                // –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${pid} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø–æ SIGTERM`);
            }
            
        } catch (error) {
            if (error.code === 'ESRCH') {
                console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${pid} —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ ${pid}: ${error.message}`);
            }
        } finally {
            // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º—ã—Ö —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                this.killingProcesses.delete(pid);
            }, 30000);
        }
    }
    
    /**
     * üîç –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –ü–†–û–¶–ï–°–°–ê
     */
    async checkProcessExists(pid) {
        try {
            process.kill(pid, 0);
            return true;
        } catch (error) {
            return false;
        }
    }
    
    /**
     * üìù –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –û–ß–ï–†–ï–î–¨ –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê
     */
    queueRestart(botId, reason) {
        const now = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ª–∏ —É–∂–µ
        if (this.restartQueue.has(botId)) {
            console.log(`‚ö†Ô∏è –ë–æ—Ç ${botId} —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if (this.startingBots.has(botId)) {
            console.log(`‚ö†Ô∏è –ë–æ—Ç ${botId} —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫`);
            return;
        }
        
        const tracker = this.processTracker.get(botId);
        if (tracker && tracker.restartInProgress) {
            console.log(`‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ${botId} —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return;
        }
        
        console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ ${botId} –≤ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (–ø—Ä–∏—á–∏–Ω–∞: ${reason})`);
        this.restartQueue.set(botId, { timestamp: now, reason });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        if (tracker) {
            tracker.restartInProgress = true;
        }
    }
    
    /**
     * ‚öôÔ∏è –û–ë–†–ê–ë–û–¢–ö–ê –û–ß–ï–†–ï–î–ò –ü–ï–†–ï–ó–ê–ü–£–°–ö–û–í
     */
    async processRestartQueue() {
        if (this.restartQueue.size === 0) return;
        
        const now = Date.now();
        const toProcess = [];
        
        // –°–æ–±–∏—Ä–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        for (const [botId, data] of this.restartQueue) {
            // –ñ–¥–µ–º –º–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            if (now - data.timestamp >= 10000) {
                toProcess.push(botId);
            }
        }
        
        if (toProcess.length > 0) {
            console.log(`‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: ${toProcess.length} –±–æ—Ç–æ–≤`);
            
            for (const botId of toProcess) {
                const data = this.restartQueue.get(botId);
                this.restartQueue.delete(botId);
                
                console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ${botId} –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–ø—Ä–∏—á–∏–Ω–∞: ${data.reason})`);
                
                try {
                    await this.restartBotWorker(botId);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${botId} –∏–∑ –æ—á–µ—Ä–µ–¥–∏:`, error.message);
                } finally {
                    // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥
                    const tracker = this.processTracker.get(botId);
                    if (tracker) {
                        tracker.restartInProgress = false;
                    }
                }
            }
        }
    }
    
    /**
     * üî• –ì–û–†–Ø–ß–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö –ë–û–¢–ê
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç, –º–æ–¥–µ–ª—å –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
     */
    async hotReloadBotSettings(botId) {
        try {
            if (!this.workers.has(botId)) {
                console.log(`‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä –¥–ª—è –±–æ—Ç–∞ ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return false;
            }
            
            console.log(`üî• –ì–û–†–Ø–ß–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –±–æ—Ç–∞ ${botId}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            const assistantResponse = await axios.get(`${BACKEND_API_URL}/api/bot-instances/${botId}/assistant`);
            const assistant = assistantResponse.data;
            
            if (!assistant) {
                console.log(`‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –±–æ—Ç–∞ ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return false;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
            const botConfigResponse = await axios.get(`${BACKEND_API_URL}/api/bot-instances-all`);
            const botConfig = botConfigResponse.data.find(b => b.id === botId);
            
            if (!botConfig) {
                console.log(`‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return false;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ—Ä–∫–µ—Ä—É
            const worker = this.workers.get(botId);
            worker.send({
                command: 'hot_reload',
                data: { assistant, botConfig }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            const workerStats = this.workerStats.get(botId);
            if (workerStats) {
                this.workerStats.set(botId, {
                    ...workerStats,
                    lastAssistantData: {
                        system_prompt: assistant.system_prompt,
                        ai_model: assistant.ai_model,
                        name: assistant.name,
                        assistant_id: botConfig.assistant_id,
                        bot_token: botConfig.bot_token
                    }
                });
            }
            
            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ ${botId}`);
            return true;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ ${botId}:`, error.message);
            return false;
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async start() {
        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ Scalable Bot Manager...');
            
            // 1. –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            if (this.webhookServer) {
                await this.webhookServer.start();
                console.log('üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
            }
            
            // 2. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            this.startProcessMonitoring();
            this.startHealthChecks();
            
            // 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å API
            await this.syncWithAPI();
            
            // 4. –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.startWebInterface();
            
            console.log('‚úÖ Scalable Bot Manager –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Scalable Bot Manager:', error.message);
            throw error;
        }
    }
}

// –ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–∞
const manager = new ScalableBotManager();

// Graceful shutdown
process.on('SIGTERM', async () => {
    console.log('üîÑ Graceful shutdown –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–∞...');
    
    const shutdownPromises = Array.from(manager.workers.keys()).map(botId => 
        manager.stopBotWorker(botId)
    );
    
    await Promise.all(shutdownPromises);
    process.exit(0);
});

process.on('SIGINT', async () => {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã...');
    
    const shutdownPromises = Array.from(manager.workers.keys()).map(botId => 
        manager.stopBotWorker(botId)
    );
    
    await Promise.all(shutdownPromises);
    process.exit(0);
});

console.log('üöÄ Scalable Bot Manager –≥–æ—Ç–æ–≤ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é 1000+ –±–æ—Ç–æ–≤!');