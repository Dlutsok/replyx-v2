const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const webhookConfig = require('../config/webhook');
// Rate limiter –¥–ª—è Telegram –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω

/**
 * ü§ñ –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–´–ô –ë–û–¢-–í–û–†–ö–ï–†
 * –ö–∞–∂–¥—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏
 */
class BotWorker {
    constructor() {
        this.bot = null;
        this.rateLimitedBot = null;
        this.config = null;
        this.assistant = null;
        this.botId = null;
        this.startTime = Date.now();
        this.metrics = {
            messages: 0,
            errors: 0,
            restarts: 0,
            uptime: 0
        };
        
        // üî• –°–ò–°–¢–ï–ú–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò –°–û–û–ë–©–ï–ù–ò–ô
        this.processedMessages = new Map(); // messageId -> timestamp
        this.messageCleanupInterval = null;
        
        // üö¶ –°–ò–°–¢–ï–ú–ê THROTTLING –õ–û–ì–û–í
        this.errorThrottling = new Map(); // errorKey -> { lastLogged, count, suppressedCount }
        this.logThrottleInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥
        this.summaryInterval = null;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ IPC –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–æ–º
        this.setupIPC();
        
        // Graceful shutdown
        process.on('SIGTERM', () => this.shutdown());
        process.on('SIGINT', () => this.shutdown());
        
        // –ó–∞–ø—É—Å–∫ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–º –ª–æ–≥–∞–º
        this.startLogSummary();
        
        console.log(`ü§ñ –í–æ—Ä–∫–µ—Ä –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω (PID: ${process.pid})`);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–∂–ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
     */
    setupIPC() {
        process.on('message', async (message) => {
            try {
                const { command, data } = message;
                
                switch (command) {
                    case 'start':
                        await this.startBot(data);
                        break;
                    case 'stop':
                        await this.stopBot();
                        break;
                    case 'restart':
                        await this.restartBot(data);
                        break;
                    case 'hot_reload':
                        await this.hotReloadSettings(data);
                        break;
                    case 'webhook_update':
                        await this.handleWebhookUpdate(data);
                        break;
                    case 'ai_response':
                        await this.handleAIResponse(data);
                        break;
                    case 'get_status':
                        this.sendStatus();
                        break;
                    case 'get_metrics':
                        this.sendMetrics();
                        break;
                    case 'send_operator_message':
                        await this.sendOperatorMessage(data);
                        break;
                    case 'send_system_message':
                        await this.sendSystemMessage(data);
                        break;
                    default:
                        console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
                }
            } catch (error) {
                this.sendError(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã ${command}: ${error.message}`, error);
            }
        });
    }
    
    /**
     * üöÄ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –ë–û–¢–ê (POLLING –ò–õ–ò WEBHOOK)
     */
    async startBot(data) {
        try {
            const { botId, botConfig, assistant } = data;
            this.botId = botId;
            this.config = botConfig;
            this.assistant = assistant;
            
            const mode = webhookConfig.isWebhookMode() ? 'WEBHOOK' : 'POLLING';
            console.log(`üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê ${botId} –í –†–ï–ñ–ò–ú–ï ${mode} –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ "${assistant.name}"`);
            
            // 1. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ ${botId}`);
            const tempBot = new TelegramBot(botConfig.bot_token, { polling: false });
            
            try {
                // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º webhook —Å–Ω–∞—á–∞–ª–∞
                await tempBot.deleteWebHook({ drop_pending_updates: true });
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
                const botInfo = await tempBot.getMe();
                console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –±–æ—Ç–∞ ${botId}: @${botInfo.username}`);
                
            } catch (cleanupError) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –±–æ—Ç–∞ ${botId}: ${cleanupError.message}`);
            }
            
            // 2. –ü–∞—É–∑–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
            console.log(`‚è≥ –ü–∞—É–∑–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ ${botId}`);
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
            if (webhookConfig.isWebhookMode()) {
                // WEBHOOK –†–ï–ñ–ò–ú
                this.bot = new TelegramBot(botConfig.bot_token, {
                    polling: false // –û—Ç–∫–ª—é—á–∞–µ–º polling –¥–ª—è webhook
                });
                
                await this.setupWebhookMode(botConfig);
            } else {
                // POLLING –†–ï–ñ–ò–ú (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
                this.bot = new TelegramBot(botConfig.bot_token, {
                    polling: {
                        interval: webhookConfig.config.POLLING.INTERVAL,
                        autoStart: false,
                        params: { timeout: webhookConfig.config.POLLING.TIMEOUT }
                    }
                });
                
                await this.setupPollingMode();
            }
            
            // Rate limiting –æ—Ç–∫–ª—é—á–µ–Ω: —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ node-telegram-bot-api
            
            // 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è polling)
            if (webhookConfig.isPollingMode()) {
                this.setupBotHandlers();
            }
            
            this.sendResponse('started', {
                botId: this.botId,
                pid: process.pid,
                startTime: this.startTime,
                mode: mode
            });
            
        } catch (error) {
            this.metrics.errors++;
            this.sendError(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ ${webhookConfig.config.MODE}: ${error.message}`);
        }
    }
    
    /**
     * üåê –ù–ê–°–¢–†–û–ô–ö–ê WEBHOOK –†–ï–ñ–ò–ú–ê
     */
    async setupWebhookMode(botConfig) {
        try {
            const webhookSettings = webhookConfig.getWebhookSettings(botConfig.bot_token);
            
            if (!webhookSettings) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook');
            }
            
            console.log(`üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞ ${this.botId}: ${webhookSettings.url}`);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            await this.bot.setWebHook(
                webhookSettings.url,
                {
                    max_connections: webhookSettings.max_connections,
                    allowed_updates: webhookSettings.allowed_updates,
                    secret_token: webhookSettings.secret_token,
                    drop_pending_updates: webhookSettings.drop_pending_updates
                }
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook
            const webhookInfo = await this.bot.getWebHookInfo();
            console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${this.botId}:`);
            console.log(`   URL: ${webhookInfo.url}`);
            console.log(`   Pending: ${webhookInfo.pending_update_count}`);
            console.log(`   Max connections: ${webhookInfo.max_connections}`);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ webhook
            this.sendRequest('register_webhook', {
                botId: this.botId,
                worker: process
            });
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –¥–ª—è –±–æ—Ç–∞ ${this.botId}:`, error.message);
            throw error;
        }
    }
    
    /**
     * üîÑ –ù–ê–°–¢–†–û–ô–ö–ê POLLING –†–ï–ñ–ò–ú–ê
     */
    async setupPollingMode() {
        try {
            console.log(`üîÑ –ó–∞–ø—É—Å–∫ polling –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
            let attempts = 0;
            const maxAttempts = 3;
            
            while (attempts < maxAttempts) {
                try {
                    await this.bot.startPolling();
                    console.log(`‚úÖ Polling —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
                    break;
                } catch (pollingError) {
                    attempts++;
                    console.log(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} –∑–∞–ø—É—Å–∫–∞ polling –¥–ª—è –±–æ—Ç–∞ ${this.botId}: ${pollingError.message}`);
                    
                    if (attempts < maxAttempts) {
                        const delay = 5000 * Math.pow(2, attempts - 1);
                        console.log(`‚è≥ –ü–∞—É–∑–∞ ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π`);
                        await new Promise(resolve => setTimeout(resolve, delay));
                    } else {
                        throw pollingError;
                    }
                }
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ polling –¥–ª—è –±–æ—Ç–∞ ${this.botId}:`, error.message);
            throw error;
        }
    }
    
    /**
     * üî• –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
     */
    clearOldHandlers() {
        if (this.bot) {
            console.log(`üßπ –ü–û–õ–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
            
            // 1. –£–¥–∞–ª—è–µ–º –í–°–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.bot.removeAllListeners('message');
            this.bot.removeAllListeners('callback_query');
            this.bot.removeAllListeners('polling_error');
            this.bot.removeAllListeners('webhook_error');
            this.bot.removeAllListeners('error');
            
            // 2. üî• –ì–õ–£–ë–û–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –í–ù–£–¢–†–ï–ù–ù–ò–• –°–¢–†–£–ö–¢–£–† node-telegram-bot-api
            try {
                if (this.bot._textRegexpCallbacks) {
                    this.bot._textRegexpCallbacks.length = 0;
                    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${this.bot._textRegexpCallbacks.length} text regexp callbacks`);
                }
                
                if (this.bot._onReplyToMessages) {
                    if (Array.isArray(this.bot._onReplyToMessages)) {
                        this.bot._onReplyToMessages.length = 0;
                    } else if (typeof this.bot._onReplyToMessages.clear === 'function') {
                        this.bot._onReplyToMessages.clear();
                    }
                    console.log(`üßπ –û—á–∏—â–µ–Ω—ã onReplyToMessages callbacks`);
                }
                
                // 3. üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –í–ù–£–¢–†–ï–ù–ù–ò–• –°–¢–†–£–ö–¢–£–†
                if (this.bot._callbacks) {
                    this.bot._callbacks.clear?.();
                }
                
                if (this.bot._pendingRequests) {
                    this.bot._pendingRequests.clear?.();
                }
                
                // 4. –û—á–∏—Å—Ç–∫–∞ middleware –∏ —Ö—É–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if (this.bot._middleware && Array.isArray(this.bot._middleware)) {
                    this.bot._middleware.length = 0;
                }
                
                console.log(`‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
                
            } catch (cleanupError) {
                console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ ${this.botId}: ${cleanupError.message}`);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ—á–∏—Å—Ç–∫–∏
            }
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
     */
    setupBotHandlers() {
        // üî• –°–ù–ê–ß–ê–õ–ê –û–ß–ò–©–ê–ï–ú –°–¢–ê–†–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
        this.clearOldHandlers();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ polling
        this.bot.on('polling_error', (error) => {
            this.metrics.errors++;
            
            // –£–º–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ 409 –æ—à–∏–±–æ–∫
            const is409Error = error.code === 'ETELEGRAM' && error.response?.statusCode === 409;
            if (is409Error) {
                const botAge = Date.now() - this.startTime;
                if (botAge < 120000) { // –ü–µ—Ä–≤—ã–µ 2 –º–∏–Ω—É—Ç—ã
                    return; // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º 409 –¥–ª—è –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤
                }
            }
            
            // üö¶ –ò–°–ü–û–õ–¨–ó–£–ï–ú THROTTLED –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            this.throttledLog('error', `Polling error: ${error.message}`, { 
                code: error.code,
                botAge: Date.now() - this.startTime 
            });
        });
        
        // üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –° –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ï–ô
        this.bot.on('message', async (msg) => {
            try {
                this.metrics.messages++;
                
                // üî• –ü–†–û–í–ï–†–ö–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò
                if (this.isDuplicateMessage(msg)) {
                    this.sendLog('warn', `‚ö†Ô∏è –î–£–ë–õ–ò–†–£–Æ–©–ï–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from.id}: "${msg.text}" (ID: ${msg.message_id})`);
                    return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                }
                
                if (msg.text && !msg.text.startsWith('/')) {
                    await this.handleMessage(msg);
                }
            } catch (error) {
                this.metrics.errors++;
                this.sendLog('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
        this.bot.onText(/\/start/, async (msg) => {
            const chatId = msg.chat.id;
            await this.bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç "${this.assistant.name}". –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`);
        });
        

        
        // üî• –ó–ê–ü–£–°–ö –û–ß–ò–°–¢–ö–ò –°–¢–ê–†–´–• –°–û–û–ë–©–ï–ù–ò–ô
        this.startMessageCleanup();
        
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞ ${this.botId} —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π`);
    }
    
    /**
     * üî• –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–†–£–Æ–©–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø
     */
    isDuplicateMessage(msg) {
        const messageKey = `${msg.from.id}_${msg.message_id}_${msg.text}`;
        const now = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
        if (this.processedMessages.has(messageKey)) {
            const lastProcessed = this.processedMessages.get(messageKey);
            if (now - lastProcessed < 30000) { // 30 —Å–µ–∫—É–Ω–¥
                return true; // –≠—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç
            }
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
        this.processedMessages.set(messageKey, now);
        return false;
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
     */
    startMessageCleanup() {
        if (this.messageCleanupInterval) {
            clearInterval(this.messageCleanupInterval);
        }
        
        this.messageCleanupInterval = setInterval(() => {
            const now = Date.now();
            const maxAge = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
            
            // üî• –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –£–¢–ï–ß–ï–ö
            let cleanedCount = 0;
            for (const [messageId, timestamp] of this.processedMessages) {
                if (now - timestamp > maxAge) {
                    this.processedMessages.delete(messageId);
                    cleanedCount++;
                }
            }
            
            if (cleanedCount > 0) {
                console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
            }
            
            // üî• –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê –ò –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê
            if (this.processedMessages.size > 10000) {
                console.log(`‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π (${this.processedMessages.size}), –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞`);
                
                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5000 –∑–∞–ø–∏—Å–µ–π
                const entries = Array.from(this.processedMessages.entries())
                    .sort((a, b) => b[1] - a[1]) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
                    .slice(0, 5000);
                
                this.processedMessages.clear();
                entries.forEach(([id, time]) => this.processedMessages.set(id, time));
                
                console.log(`üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–æ –¥–æ 5000 –∑–∞–ø–∏—Å–µ–π`);
            }
            
        }, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        
        console.log(`üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
    }
    
    /**
     * üö¶ –£–ú–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –° THROTTLING
     * –ü–æ–¥–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ—à–∏–±–∫–∏, –≤–µ–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç
     */
    throttledLog(level, message, extra = {}) {
        const errorKey = `${level}:${message}`;
        const now = Date.now();
        
        if (!this.errorThrottling.has(errorKey)) {
            this.errorThrottling.set(errorKey, {
                lastLogged: 0,
                count: 0,
                suppressedCount: 0
            });
        }
        
        const errorData = this.errorThrottling.get(errorKey);
        errorData.count++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        const canLog = (now - errorData.lastLogged) > this.logThrottleInterval;
        
        if (canLog) {
            // –õ–æ–≥–∏—Ä—É–µ–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã—Ö
            let logMessage = message;
            if (errorData.suppressedCount > 0) {
                logMessage += ` [${errorData.suppressedCount} –ø–æ–¥–∞–≤–ª–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${Math.round(this.logThrottleInterval/1000)}—Å]`;
            }
            
            this.sendLog(level, logMessage, extra);
            errorData.lastLogged = now;
            errorData.suppressedCount = 0;
        } else {
            // –ü–æ–¥–∞–≤–ª—è–µ–º, –Ω–æ —Å—á–∏—Ç–∞–µ–º
            errorData.suppressedCount++;
        }
    }
    
    /**
     * üö¶ –ó–ê–ü–£–°–ö –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–û–ô –°–í–û–î–ö–ò –ü–û–î–ê–í–õ–ï–ù–ù–´–• –õ–û–ì–û–í
     */
    startLogSummary() {
        this.summaryInterval = setInterval(() => {
            const now = Date.now();
            let totalSuppressed = 0;
            const suppressedByType = new Map();
            
            for (const [errorKey, data] of this.errorThrottling) {
                if (data.suppressedCount > 0) {
                    totalSuppressed += data.suppressedCount;
                    const [level, message] = errorKey.split(':', 2);
                    const shortMessage = message.length > 50 ? message.substring(0, 50) + '...' : message;
                    suppressedByType.set(`${level}: ${shortMessage}`, data.suppressedCount);
                }
            }
            
            if (totalSuppressed > 0) {
                const summary = Array.from(suppressedByType.entries())
                    .map(([key, count]) => `${key} (${count})`)
                    .join(', ');
                    
                this.sendLog('info', `üìä –°–≤–æ–¥–∫–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ –∑–∞ –º–∏–Ω—É—Ç—É: ${totalSuppressed} —Å–æ–æ–±—â–µ–Ω–∏–π. –î–µ—Ç–∞–ª–∏: ${summary}`);
                
                // –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã—Ö
                for (const data of this.errorThrottling.values()) {
                    data.suppressedCount = 0;
                }
            }
        }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        console.log(`üìä –°–≤–æ–¥–∫–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async handleMessage(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const text = msg.text;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
        const userInfo = {
            telegram_username: msg.from.username || null,
            first_name: msg.from.first_name || null,
            last_name: msg.from.last_name || null,
            language_code: msg.from.language_code || null
        };
        
        this.sendLog('info', `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId} (@${userInfo.telegram_username || 'noUsername'}): "${text}"`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const dialog = await this.getOrCreateDialog(userId, chatId, this.assistant.id, userInfo);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.saveMessage(dialog.id, 'user', text);
            
            // üî• –ü–û–õ–£–ß–ê–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –î–ò–ê–õ–û–ì–ê –ò–ó –ë–î
            const freshDialog = await this.getFreshDialogStatus(dialog.id);
            
            // üî• –ü–†–û–í–ï–†–ö–ê HANDOFF –° –ê–ö–¢–£–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
            // –ë–ª–æ–∫–∏—Ä—É–µ–º AI –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–∞—Ö 'requested' –∏ 'active' (—É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Å —Å–∞–π—Ç–æ–º)
            if (freshDialog.handoff_status === 'requested' || freshDialog.handoff_status === 'active') {
                // –î–∏–∞–ª–æ–≥ —Ç—Ä–µ–±—É–µ—Ç/—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –æ—Ç–≤–µ—Ç
                this.sendLog('info', `üõë –î–∏–∞–ª–æ–≥ ${dialog.id} —Ç—Ä–µ–±—É–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (handoff_status: ${freshDialog.handoff_status}), –ø—Ä–æ–ø—É—Å–∫ AI –æ—Ç–≤–µ—Ç–∞`);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ handoff
            if (this.shouldRequestHandoff(text)) {
                await this.requestHandoff(dialog.id, 'keyword', text);
                await this.bot.sendMessage(chatId, '–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∞—à –¥–∏–∞–ª–æ–≥ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ú—ã —É–∂–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º, –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
            const aiResponse = await this.getAIResponse(userId, text, this.assistant, dialog.id);
            
            // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê HANDOFF –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô –û–¢–í–ï–¢–ê
            const finalDialogStatus = await this.getFreshDialogStatus(dialog.id);
            if (finalDialogStatus.handoff_status === 'requested' || finalDialogStatus.handoff_status === 'active') {
                this.sendLog('info', `üõë –î–∏–∞–ª–æ–≥ ${dialog.id} –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –æ—Ç–≤–µ—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç`);
                return;
            }
            
            // üî• –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï AI –û–¢–í–ï–¢–ê –ù–ê FALLBACK
            if (this.shouldRequestHandoffAfterAI(text, aiResponse, dialog)) {
                await this.requestHandoff(dialog.id, 'fallback', text);
                await this.bot.sendMessage(chatId, '–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∞—à –¥–∏–∞–ª–æ–≥ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ú—ã —É–∂–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º, –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è');
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            await this.saveMessage(dialog.id, 'assistant', aiResponse);
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –¥–ª—è Telegram –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const telegramResponse = this.convertMarkdownForTelegram(aiResponse);
            await this.bot.sendMessage(chatId, telegramResponse, { parse_mode: 'HTML' });
            

            
        } catch (error) {
            this.metrics.errors++;
            await this.bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', { parse_mode: 'HTML' });
            this.sendLog('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
     */
    async getOrCreateDialog(userId, telegramChatId, assistantId, userInfo = {}) {
        try {
            const searchParams = new URLSearchParams({
                user_id: this.config.user_id,
                assistant_id: assistantId,
                telegram_chat_id: telegramChatId
            });

            const response = await axios.get(`http://127.0.0.1:8000/api/bot/dialogs?${searchParams}`);
            const dialogs = response.data;

            if (dialogs.length > 0) {
                // –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–∞–π–¥–µ–Ω, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ—Ç telegram_username, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                const existingDialog = dialogs[0];
                if (userInfo.telegram_username && !existingDialog.telegram_username) {
                    await this.updateDialogUserInfo(existingDialog.id, userInfo);
                }
                return existingDialog;
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const createData = {
                user_id: this.config.user_id,
                assistant_id: assistantId,
                telegram_chat_id: telegramChatId,
                telegram_username: userInfo.telegram_username,
                first_name: userInfo.first_name,
                last_name: userInfo.last_name,
                language_code: userInfo.language_code
            };

            const createResponse = await axios.post(`http://127.0.0.1:8000/api/bot/dialogs`, createData);
            return createResponse.data;

        } catch (error) {
            this.sendLog('error', `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: ${error.message}`);
            throw error;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –¥–∏–∞–ª–æ–≥–µ
     */
    async updateDialogUserInfo(dialogId, userInfo) {
        try {
            await axios.patch(`http://127.0.0.1:8000/api/bot/dialogs/${dialogId}/user-info`, userInfo);
            this.sendLog('info', `–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ${dialogId}`);
        } catch (error) {
            this.sendLog('error', `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${error.message}`);
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async saveMessage(dialogId, sender, text) {
        try {
            await axios.post(`http://127.0.0.1:8000/api/bot/dialogs/${dialogId}/messages`, {
                sender: sender,
                text: text
            });
        } catch (error) {
            this.sendLog('error', `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
     */
    async getAIResponse(userId, text, assistant, dialogId = null) {
        try {
            const response = await axios.post(`http://127.0.0.1:8000/api/bot/ai-response`, {
                user_id: this.config.user_id,
                message: text,
                assistant_id: assistant.id,
                dialog_id: dialogId
            });
            
            return response.data.response || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.';
        } catch (error) {
            this.sendLog('error', `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
            return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.';
        }
    }
    

    

    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ AI –æ—Ç–≤–µ—Ç–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    async handleAIResponse(data) {
        try {
            const { chatId, response, dialogId } = data;
            
            // üî• –ü–†–û–í–ï–†–ö–ê HANDOFF –î–ê–ñ–ï –í –£–°–¢–ê–†–ï–í–®–ï–ú –ú–ï–¢–û–î–ï
            if (dialogId) {
                const dialogStatus = await this.getFreshDialogStatus(dialogId);
                if (dialogStatus.handoff_status === 'requested' || dialogStatus.handoff_status === 'active') {
                    this.sendLog('info', `üõë –î–∏–∞–ª–æ–≥ ${dialogId} –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π AI –æ—Ç–≤–µ—Ç`);
                    return;
                }
            }
            
            await this.bot.sendMessage(chatId, response);
        } catch (error) {
            this.sendLog('error', `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ AI –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
        }
    }
    
    /**
     * –£–ª—å—Ç—Ä–∞-—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
     */
    async stopBot() {
        try {
            if (this.bot) {
                console.log(`‚èπÔ∏è –£–õ–¨–¢–†–ê-–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ ${this.botId}`);
                
                // Rate limiting –æ—Ç–∫–ª—é—á–µ–Ω
                
                // üî• –û–ß–ò–°–¢–ö–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò –°–û–û–ë–©–ï–ù–ò–ô
                if (this.messageCleanupInterval) {
                    clearInterval(this.messageCleanupInterval);
                    this.messageCleanupInterval = null;
                }
                this.processedMessages.clear();
                console.log(`üßπ –û—á–∏—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
                
                // üö¶ –û–ß–ò–°–¢–ö–ê THROTTLING –õ–û–ì–û–í
                if (this.summaryInterval) {
                    clearInterval(this.summaryInterval);
                    this.summaryInterval = null;
                }
                this.errorThrottling.clear();
                console.log(`üö¶ –û—á–∏—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ throttling –ª–æ–≥–æ–≤ –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
                
                // 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling —Å —Ç–∞–π–º-–∞—É—Ç–æ–º
                if (this.bot.isPolling()) {
                    try {
                        // –°–æ–∑–¥–∞–µ–º Promise —Å —Ç–∞–π–º-–∞—É—Ç–æ–º –¥–ª—è stopPolling
                        const stopPromise = this.bot.stopPolling({ 
                            cancel: true, 
                            reason: 'Ultra-stable worker shutdown' 
                        });
                        
                        const timeoutPromise = new Promise((_, reject) => {
                            setTimeout(() => reject(new Error('Stop polling timeout')), 10000);
                        });
                        
                        await Promise.race([stopPromise, timeoutPromise]);
                        console.log(`üïí Polling –¥–ª—è –±–æ—Ç–∞ ${this.botId} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
                        
                    } catch (stopError) {
                        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling –¥–ª—è –±–æ—Ç–∞ ${this.botId}: ${stopError.message}`);
                        
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        if (this.bot._polling) {
                            console.log(`üî® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ polling –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
                            this.bot._polling.abort = true;
                            this.bot._polling = null;
                        }
                    }
                }

                // 2. –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
                try {
                    this.bot.removeAllListeners();
                    console.log(`üßπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
                } catch (listenerError) {
                    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ ${this.botId}: ${listenerError.message}`);
                }

                // 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
                try {
                    if (this.bot._polling) {
                        this.bot._polling.abort = true;
                        this.bot._polling = null;
                    }
                    
                    // –û—á–∏—Å—Ç–∫–∞ pending requests
                    if (this.bot._textRegexpCallbacks && Array.isArray(this.bot._textRegexpCallbacks)) {
                        this.bot._textRegexpCallbacks.length = 0;
                    }
                    
                    if (this.bot._onReplyToMessages && typeof this.bot._onReplyToMessages.clear === 'function') {
                        this.bot._onReplyToMessages.clear();
                    }
                    
                } catch (cleanupError) {
                    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –±–æ—Ç–∞ ${this.botId}: ${cleanupError.message}`);
                }

                // 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
                if (global.gc) {
                    console.log(`üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ ${this.botId}`);
                    global.gc();
                }

                // 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
                await new Promise(resolve => setTimeout(resolve, 3000));
                
                this.bot = null;
                this.sendResponse('stopped', { botId: this.botId });
            }
        } catch (error) {
            this.sendError(`–û—à–∏–±–∫–∞ —É–ª—å—Ç—Ä–∞-—Å—Ç–∞–±–∏–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: ${error.message}`);
            // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            this.sendResponse('stopped', { botId: this.botId });
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
     */
    async restartBot(data) {
        await this.stopBot();
        await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        await this.startBot(data);
        this.metrics.restarts++;
    }
    
    /**
     * üî• –ì–û–†–Ø–ß–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö –ê–°–°–ò–°–¢–ï–ù–¢–ê
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç, –º–æ–¥–µ–ª—å AI –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
     */
    async hotReloadSettings(data) {
        try {
            const { assistant, botConfig } = data;
            
            console.log(`üî• –ì–û–†–Ø–ß–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
            console.log(`üìù –°—Ç–∞—Ä—ã–π –ø—Ä–æ–º–ø—Ç: "${this.assistant?.system_prompt?.substring(0, 50)}..."`);
            console.log(`üìù –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: "${assistant?.system_prompt?.substring(0, 50)}..."`);
            console.log(`ü§ñ –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å: ${this.assistant?.ai_model}`);
            console.log(`ü§ñ –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å: ${assistant?.ai_model}`);
            
            // üî• –ë–ï–ó–û–ü–ê–°–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –° –ü–†–û–í–ï–†–ö–ê–ú–ò
            const oldAssistant = { ...this.assistant };
            const oldConfig = { ...this.config };
            
            try {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                if (assistant) {
                    this.assistant = {
                        ...this.assistant,
                        ...assistant
                    };
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if (botConfig) {
                    this.config = {
                        ...this.config,
                        ...botConfig
                    };
                }
                
                // üî• –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ö–ï–®–ï–ô
                if (this.aiResponseCache) {
                    console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ AI –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
                    this.aiResponseCache.clear();
                }
                
                // –û—á–∏—â–∞–µ–º –∫–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                if (assistant && assistant.id !== oldAssistant.id) {
                    console.log(`üßπ –°–º–µ–Ω–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
                    this.processedMessages.clear();
                }
                
                // üî• –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø
                if (!this.assistant || !this.assistant.id) {
                    throw new Error('–î–∞–Ω–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                }
                
                this.sendResponse('hot_reloaded', {
                    botId: this.botId,
                    assistant: {
                        id: this.assistant.id,
                        name: this.assistant.name,
                        ai_model: this.assistant.ai_model,
                        system_prompt: this.assistant.system_prompt?.substring(0, 100) + '...'
                    },
                    timestamp: Date.now(),
                    success: true
                });
                
                console.log(`‚úÖ –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ ${this.botId}`);
                
            } catch (updateError) {
                // üî• –û–¢–ö–ê–¢ –ò–ó–ú–ï–ù–ï–ù–ò–ô –ü–†–ò –û–®–ò–ë–ö–ï
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ ${this.botId}, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è`);
                this.assistant = oldAssistant;
                this.config = oldConfig;
                throw updateError;
            }
            
        } catch (error) {
            this.metrics.errors++;
            this.sendError(`–û—à–∏–±–∫–∞ –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
            this.sendResponse('hot_reload_failed', {
                botId: this.botId,
                error: error.message,
                timestamp: Date.now()
            });
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
     */
    sendStatus() {
        const status = {
            botId: this.botId,
            pid: process.pid,
            isRunning: this.bot && this.bot.isPolling(),
            uptime: Date.now() - this.startTime,
            memoryUsage: process.memoryUsage(),
            config: this.config ? {
                platform: this.config.platform,
                is_active: this.config.is_active
            } : null,
            assistant: this.assistant ? {
                id: this.assistant.id,
                name: this.assistant.name
            } : null
        };
        
        this.sendResponse('status', status);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫
     */
    sendMetrics() {
        this.metrics.uptime = Date.now() - this.startTime;
        this.sendResponse('metrics', {
            botId: this.botId,
            metrics: this.metrics,
            timestamp: Date.now()
        });
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å—É
     */
    sendResponse(type, data) {
        try {
            if (process.send && process.connected) {
                process.send({
                    type: type,
                    data: data,
                    timestamp: Date.now(),
                    pid: process.pid
                });
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ IPC –∫–∞–Ω–∞–ª–∞
            if (error.code !== 'ERR_IPC_CHANNEL_CLOSED') {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
            }
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å—É
     */
    sendRequest(type, data) {
        try {
            if (process.send && process.connected) {
                process.send({
                    type: 'request',
                    requestType: type,
                    data: data,
                    timestamp: Date.now(),
                    pid: process.pid
                });
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ IPC –∫–∞–Ω–∞–ª–∞
            if (error.code !== 'ERR_IPC_CHANNEL_CLOSED') {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
            }
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å—É
     */
    sendLog(level, message, meta = {}) {
        try {
            if (process.send && process.connected) {
                process.send({
                    type: 'log',
                    data: {
                        level: level,
                        message: message,
                        meta: {
                            ...meta,
                            botId: this.botId,
                            pid: process.pid
                        }
                    },
                    timestamp: Date.now()
                });
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ IPC –∫–∞–Ω–∞–ª–∞
            if (error.code !== 'ERR_IPC_CHANNEL_CLOSED') {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: ${error.message}`);
            }
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å—É
     */
    sendError(message, error = null) {
        this.sendLog('error', message, error ? { stack: error.stack } : {});
        this.sendResponse('error', { message, error: error?.message });
    }
    
    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
     */
    async shutdown() {
        console.log(`üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞ ${this.botId}`);
        
        // üî• –û–ß–ò–°–¢–ö–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò
        if (this.messageCleanupInterval) {
            clearInterval(this.messageCleanupInterval);
            this.messageCleanupInterval = null;
        }
        this.processedMessages.clear();
        
        // üö¶ –û–ß–ò–°–¢–ö–ê THROTTLING –õ–û–ì–û–í
        if (this.summaryInterval) {
            clearInterval(this.summaryInterval);
            this.summaryInterval = null;
        }
        this.errorThrottling.clear();
        
        await this.stopBot();
        process.exit(0);
    }

    /**
     * üåê –û–ë–†–ê–ë–û–¢–ö–ê WEBHOOK –û–ë–ù–û–í–õ–ï–ù–ò–ô
     */
    async handleWebhookUpdate(data) {
        try {
            const { botId, update } = data;
            
            if (botId !== this.botId) {
                console.warn(`‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –±–æ—Ç–∞: –æ–∂–∏–¥–∞–ª—Å—è ${this.botId}, –ø–æ–ª—É—á–µ–Ω ${botId}`);
                return;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if (update.message) {
                await this.processMessage(update.message);

            } else if (update.inline_query) {
                await this.processInlineQuery(update.inline_query);
            } else if (update.chosen_inline_result) {
                await this.processChosenInlineResult(update.chosen_inline_result);
            } else {
                console.log(`üì® –ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ ${botId}:`, Object.keys(update));
            }
            
        } catch (error) {
            this.metrics.errors++;
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, error.message);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ webhook
     */
    async processMessage(msg) {
        try {
            this.metrics.messages++;
            
            // üî• –ü–†–û–í–ï–†–ö–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò
            if (this.isDuplicateMessage(msg)) {
                this.sendLog('warn', `‚ö†Ô∏è –î–£–ë–õ–ò–†–£–Æ–©–ï–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from.id}: "${msg.text}" (ID: ${msg.message_id})`);
                return;
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (msg.text && msg.text.startsWith('/start')) {
                const chatId = msg.chat.id;
                await this.bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç "${this.assistant.name}". –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`);
                return;
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (msg.text && !msg.text.startsWith('/')) {
                await this.handleMessage(msg);
            }
            
        } catch (error) {
            this.metrics.errors++;
            this.sendLog('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        }
    }
    

    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ inline query –∏–∑ webhook
     */
    async processInlineQuery(inlineQuery) {
        try {
            // –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤
            await this.bot.answerInlineQuery(inlineQuery.id, []);
        } catch (error) {
            this.sendLog('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline query: ${error.message}`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ chosen inline result –∏–∑ webhook
     */
    async processChosenInlineResult(chosenInlineResult) {
        try {
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.sendLog('info', `–í—ã–±—Ä–∞–Ω inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${chosenInlineResult.result_id}`);
        } catch (error) {
            this.sendLog('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ chosen inline result: ${error.message}`);
        }
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç markdown –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è Telegram
     */
    convertMarkdownForTelegram(text) {
        if (!text) return text;

        // 1) –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–∞–Ω–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è Markdown, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        text = this.sanitizeMarkdownForTelegram(text);

        // 2) –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ Markdown –≤ HTML —Ç–µ–≥–∏ Telegram
        // **–∂–∏—Ä–Ω—ã–π** ‚Üí <b>–∂–∏—Ä–Ω—ã–π</b>
        text = text.replace(/\*\*(.*?)\*\*/g, '<b>$1</b>');
        // *–∫—É—Ä—Å–∏–≤* ‚Üí <i>–∫—É—Ä—Å–∏–≤</i>
        text = text.replace(/\*(.*?)\*/g, '<i>$1</i>');

        // 3) –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ –Ω–∞—à–∏—Ö —Ç–µ–≥–æ–≤)
        text = text
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—à–∏ —Ç–µ–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ
            .replace(/&lt;b&gt;/g, '<b>')
            .replace(/&lt;\/b&gt;/g, '</b>')
            .replace(/&lt;i&gt;/g, '<i>')
            .replace(/&lt;\/i&gt;/g, '</i>');

        return text;
    }

    /**
     * –£–±–∏—Ä–∞–µ—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ ¬´—à—É–º–Ω—ã–π¬ª Markdown: –∑–∞–≥–æ–ª–æ–≤–∫–∏ ###, –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ -, –Ω—É–º–µ—Ä–∞—Ü–∏—é 1., –±–ª–æ–∫–∏ —Ü–∏—Ç–∞—Ç > –∏ –±—ç–∫—Ç–∏–∫–∏
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ø–∏—Å–∫–æ–≤ —Å –º–∞—Ä–∫–µ—Ä–æ–º ‚Ä¢ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
     */
    sanitizeMarkdownForTelegram(text) {
        if (!text) return text;

        let t = String(text);

        // –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        t = t.replace(/\r\n?/g, '\n');

        // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ —Ü–∏—Ç–∞—Ç –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫: "> "
        t = t.replace(/^\s*>\s?/gm, '');

        // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (#, ##, ### ...) ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç
        t = t.replace(/^\s{0,3}#{1,6}\s*/gm, '');

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ "- " –∏–ª–∏ "* " ‚Üí "‚Ä¢ " (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤)
        t = t.replace(/^(\s*)[-*]\s+/gm, (m, indent) => `${indent}‚Ä¢ `);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ "1. " ‚Üí "‚Ä¢ " (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤)
        t = t.replace(/^(\s*)\d+\.\s+/gm, (m, indent) => `${indent}‚Ä¢ `);

        // –£–¥–∞–ª—è–µ–º –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞ ```...```, –æ—Å—Ç–∞–≤–ª—è—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        t = t.replace(/```([\s\S]*?)```/g, (match, code) => code);

        // –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–±—ç–∫—Ç–∏–∫–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—Å—Ç–∞ `code` ‚Üí code
        t = t.replace(/`([^`]+)`/g, '$1');

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ –¥–≤—É—Ö
        t = t.replace(/\n{3,}/g, '\n\n');

        // –¢—Ä–∏–º–∏–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º —Å—Ç—Ä–æ–∫
        t = t.split('\n').map(line => line.replace(/[\t ]+$/g, '')).join('\n');

        return t.trim();
    }
    
    // üî• –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø HANDOFF –°–ò–°–¢–ï–ú–´
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ handoff
     */
    shouldRequestHandoff(text) {
        const keywords = [
            '–æ–ø–µ—Ä–∞—Ç–æ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–º–æ—â—å', 
            '–∂–∞–ª–æ–±–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
            'operator', 'human', 'manager', 'support', 'help', 'complaint', 'problem'
        ];
        const lowerText = text.toLowerCase();
        return keywords.some(keyword => lowerText.includes(keyword));
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ AI –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å handoff
     */
    shouldRequestHandoffAfterAI(userText, aiResponse, dialog) {
        const fallbackPatterns = [
            '–Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å', '–Ω–µ –Ω–∞—à—ë–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
            '–Ω–µ –∑–Ω–∞—é', '–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å', '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
            '–Ω–µ –ø–æ–Ω–∏–º–∞—é', '–Ω–µ —É–≤–µ—Ä–µ–Ω', 'cannot answer', 'don\'t know'
        ];
        
        const aiLower = aiResponse.toLowerCase();
        return fallbackPatterns.some(pattern => aiLower.includes(pattern));
    }
    
    /**
     * –ó–∞–ø—Ä–æ—Å handoff —á–µ—Ä–µ–∑ API
     */
    async requestHandoff(dialogId, reason, lastUserText) {
        try {
            const response = await axios.post(
                `http://127.0.0.1:8000/api/dialogs/${dialogId}/handoff/request`,
                {
                    reason: reason,
                    last_user_text: lastUserText,
                    request_id: this.generateUUID()
                },
                {
                    headers: { 'Content-Type': 'application/json' }
                }
            );
            
            if (response.status === 200) {
                this.sendLog('info', `Handoff –∑–∞–ø—Ä–æ—à–µ–Ω –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ${dialogId}, –ø—Ä–∏—á–∏–Ω–∞: ${reason}`);
                return true;
            }
            
        } catch (error) {
            this.sendLog('error', `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ handoff –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ${dialogId}: ${error.message}`);
            return false;
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    async sendOperatorMessage(data) {
        try {
            this.sendLog('info', `üîÑ [BOT_WORKER] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ë–æ—Ç ID: ${this.botId}`);
            this.sendLog('info', `üîÑ [BOT_WORKER] –î–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: ${JSON.stringify(data)}`);
            
            const { telegram_chat_id, text } = data;
            
            if (!telegram_chat_id || !text) {
                this.sendLog('error', '‚ùå [BOT_WORKER] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã telegram_chat_id –∏–ª–∏ text');
                return;
            }
            
            this.sendLog('info', `üîÑ [BOT_WORKER] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. Chat ID: ${telegram_chat_id}, —Ç–µ–∫—Å—Ç: ${text.substring(0, 100)}...`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
            if (!this.bot) {
                this.sendLog('error', '‚ùå [BOT_WORKER] –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return;
            }
            
            this.sendLog('info', `üîÑ [BOT_WORKER] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ bot.sendMessage...`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram
            const result = await this.bot.sendMessage(telegram_chat_id, text);
            
            this.sendLog('info', `‚úÖ [BOT_WORKER] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${telegram_chat_id}`);
            this.sendLog('info', `‚úÖ [BOT_WORKER] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: message_id=${result.message_id}, chat_id=${result.chat.id}`);
            this.sendLog('info', `‚úÖ [BOT_WORKER] –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${text.substring(0, 100)}...`);
            
        } catch (error) {
            this.sendLog('error', `‚ùå [BOT_WORKER] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç ${data?.telegram_chat_id}: ${error.message}`);
            this.sendLog('error', `‚ùå [BOT_WORKER] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if (error.response) {
                this.sendLog('error', `‚ùå [BOT_WORKER] Telegram API –æ—Ç–≤–µ—Ç: ${JSON.stringify(error.response.data)}`);
            }
            if (error.code) {
                this.sendLog('error', `‚ùå [BOT_WORKER] –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`);
            }
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (handoff_released –∏ –¥—Ä.)
     */
    async sendSystemMessage(data) {
        try {
            this.sendLog('info', `üîÑ [BOT_WORKER] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ë–æ—Ç ID: ${this.botId}`);
            
            const { telegram_chat_id, text, system_type } = data;
            
            if (!telegram_chat_id || !text) {
                this.sendLog('error', '‚ùå [BOT_WORKER] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã telegram_chat_id –∏–ª–∏ text –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
            if (!this.bot) {
                this.sendLog('error', '‚ùå [BOT_WORKER] –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
                return;
            }
            
            this.sendLog('info', `üîÑ [BOT_WORKER] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (${system_type}): ${text}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            const result = await this.bot.sendMessage(telegram_chat_id, text);
            
            this.sendLog('info', `‚úÖ [BOT_WORKER] –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${telegram_chat_id}`);
            
        } catch (error) {
            this.metrics.errors++;
            this.sendLog('error', `‚ùå [BOT_WORKER] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async getFreshDialogStatus(dialogId) {
        try {
            const response = await axios.get(`http://127.0.0.1:8000/api/dialogs/${dialogId}/status`);
            const status = response.data;
            this.sendLog('info', `üìä –°—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞ ${dialogId}: handoff_status=${status.handoff_status}, is_taken_over=${status.is_taken_over}`);
            return status;
        } catch (error) {
            this.sendLog('error', `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–∏–∞–ª–æ–≥–∞ ${dialogId}: ${error.message}`);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            return { handoff_status: 'none', is_taken_over: 0 };
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –¥–ª—è request_id
     */
    generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            const r = Math.random() * 16 | 0;
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
}

// –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
const worker = new BotWorker();

// Heartbeat –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const heartbeatInterval = setInterval(() => {
    try {
        if (process.connected) {
            worker.sendResponse('heartbeat', {
                botId: worker.botId,
                timestamp: Date.now(),
                uptime: Date.now() - worker.startTime
            });
        } else {
            clearInterval(heartbeatInterval);
        }
    } catch (error) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º heartbeat –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç
        clearInterval(heartbeatInterval);
    }
}, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

console.log(`ü§ñ –ë–æ—Ç-–≤–æ—Ä–∫–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (PID: ${process.pid})`); 
console.log(`ü§ñ –ë–æ—Ç-–≤–æ—Ä–∫–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (PID: ${process.pid})`); 